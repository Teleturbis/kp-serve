var kp_start_time = new Date().getTime();
var kp_execute = true;
(function () {
  window.kp_c = window.kp_c || [];
  if (typeof window.kp_c == 'object' && Array.isArray(window.kp_c)) {
    window.kp_c = (function () {
      var d = (window.kp_c || []).slice();
      var a = {};
      function b() {
        return (
          (Array.from(arguments) || []).pop() ==
          'a775baba404e34ada8f518f8d84507cd'
        );
      }
      return {
        valueOf: function () {
          return d;
        },
        push: function (c) {
          d.push(c);
        },
        set: function (f, c) {
          if (!b.apply(this, arguments)) {
            return;
          }
          a[f] = c;
        },
        get: function (c) {
          if (!b.apply(this, arguments)) {
            return;
          }
          return a[c];
        },
        delete: function (c) {
          if (!b.apply(this, arguments)) {
            return;
          }
          delete a[c];
        },
        has: function (c) {
          if (!b.apply(this, arguments)) {
            return;
          }
          return Object.keys(a).indexOf(c) != -1;
        },
      };
    })();
  }
})();
window.kp_mtis = window.kp_mtis || [1];
window.kp_mtis[0] = window.kp_mtis.length;
var kp_mtk;
(function () {
  var a =
      document.currentScript && document.currentScript.src
        ? document.currentScript.src
        : typeof kp_embed_type != 'undefined' && kp_embed_type == 2
          ? location.href
          : null,
    b = a ? !!(a.indexOf('/test/') + 1) : null;
  var c = (function () {
    var e = /\d+/g,
      f = '',
      d;
    if (a) {
      f = new URL(a).pathname;
      if (f) {
        if ((d = e.exec(f)) !== null) {
          return d[0] || null;
        }
      }
    }
    return null;
  })();
  kp_mtk = [c, b + 0].join('-');
  if (window.kp_mtis.indexOf(kp_mtk) == -1) {
    window.kp_mtis.push(kp_mtk);
  } else {
    kp_execute = false;
  }
})();
(function () {
  var a =
      document.currentScript && document.currentScript.src
        ? document.currentScript.src
        : typeof kp_embed_type != 'undefined' && kp_embed_type == 2
          ? location.href
          : null,
    b,
    c = a ? !!(a.indexOf('/test/') + 1) : null;
  var e = (function () {
    var i = /\d+/g,
      j = '',
      h;
    if (a) {
      j = new URL(a).pathname;
      if (j) {
        if ((h = i.exec(j)) !== null) {
          return h[0] || null;
        }
      }
    }
    return null;
  })();
  var g = {
    baseKey: 'kp',
    cookie: {
      prefixKey: function (h) {
        var i = g.baseKey + '-';
        if (h.indexOf(i) == -1) {
          h = i + h;
        }
        return h;
      },
      get: function (h) {
        var i = (
          document.cookie.match(
            '(^|;)\\s*' + this.prefixKey(h) + '\\s*=\\s*([^;]+)',
          ) || [undefined]
        ).pop();
        if (i && [123, 91].indexOf(i.charCodeAt(0)) != -1) {
          i = JSON.parse(i);
        }
        return i;
      },
    },
  };
  if (
    false === c &&
    null !== e &&
    (g.cookie.get('test-mode') || '').split(',').indexOf(e) != -1
  ) {
    kp_execute = false;
    if (a) {
      b = a.replace(/(customers\/)?(\d+)/g, 'test/$1$2');
      if (typeof kp_embed_type != 'undefined' && kp_embed_type == 2) {
        b = b.replace('.html', '.min.js').replace(/\?(.*)/, '');
      }
      var f = document.createElement('script');
      f.async = true;
      f.src = b;
      var d = document.getElementsByTagName('script')[0];
      d.parentNode.insertBefore(f, d);
    }
  }
})();
if (window.kp_mtis.slice(1, window.kp_mtis[0]).indexOf(kp_mtk) == -1) {
  function KPMasterTag(bp, a2) {
    if (typeof this.mtk == 'undefined') {
      this.mtk = KPMasterTag.mtk;
    }
    if (typeof a2 != 'undefined' && this.mtk != a2) {
      return {};
    }
    this.isInstance = true;
    this.isTestInstance = !!parseInt(this.mtk.split('-').pop() || 0);
    var G = !!window.MSInputMethodContext && !!document.documentMode;
    if (G) {
      var at = [13147];
      if (at.indexOf(bp.customerid) !== -1) {
        return;
      }
    }
    if (typeof this.name == 'undefined') {
      this.name = 'KPMasterTag';
    }
    if (typeof KPMasterTag.name == 'undefined') {
      KPMasterTag.name = this.name;
    }
    var L = {};
    bp.data = bp.data || {};
    bp.data.times = bp.data.times || {};
    bp.useCodeInjections = !!Object.keys(bp.codeInjections).length;
    this.getConf = KPMasterTag.getConf = function () {
      var b2 = Array.prototype.slice.call(arguments),
        w = {},
        b1 = ['function', 'object'],
        b3 = [
          this.name,
          KPConsent.name,
          KPConsentData.name,
          KPRule.name,
          KPReBounce.name,
        ];
      if (b2.length > 0) {
        if (b1.indexOf(typeof b2[0]) != -1 && b3.indexOf(b2[0].name) != -1) {
          w = b2[0].getConf();
        } else {
          if (typeof b2[0] == 'object') {
            w = b2[0];
          }
        }
      } else {
        w = bp;
      }
      return w;
    };
    if (bL('Configuration')) {
      bp = ap('Configuration', bp);
    }
    if (bL('BeforeInstantiation') || bL('AfterInstantiation')) {
      if (typeof KPTempProps == 'undefined') {
        window.KPTempProps = {};
      }
      KPMasterTag._prop = function () {
        var w = Array.prototype.slice.call(arguments);
        if (w.length > 1 && typeof w[1] == 'string') {
          w.unshift(KPMasterTag);
        }
        var b1 = w[0],
          b2 = w[1],
          b4 = w[2],
          b3 = w[3];
        if (typeof b3 != 'undefined') {
          if (b2) {
            KPTempProps[b4] = b3;
          } else {
            if (typeof KPTempProps[b1.name] == 'undefined') {
              KPTempProps[b1.name] = {};
            }
            KPTempProps[b1.name][b4] = b3;
          }
        } else {
          if (b2 && typeof KPTempProps[b4] != 'undefined') {
            return KPTempProps[b4];
          } else {
            if (
              !b2 &&
              typeof KPTempProps[b1.name] != 'undefined' &&
              typeof KPTempProps[b1.name][b4] != 'undefined'
            ) {
              return KPTempProps[b1.name][b4];
            } else {
              return null;
            }
          }
        }
      };
    }
    if (bL('BeforeInstantiation')) {
      ap('BeforeInstantiation');
    }
    if (
      typeof bp.getInitialHistoryState != 'undefined' &&
      bp.getInitialHistoryState
    ) {
      window.kp_c.set(
        'initialHistoryState',
        JSON.parse(JSON.stringify(history.state || {})),
        'a775baba404e34ada8f518f8d84507cd',
      );
      if (typeof bp.reBounce != 'undefined') {
        bp.reBounce.essentials = bp.reBounce.essentials || {};
        bp.reBounce.essentials.getInitialHistoryState =
          bp.getInitialHistoryState;
      }
    }
    if (typeof bp.cleanupDOM != 'undefined' && bp.cleanupDOM) {
      document
        .querySelectorAll('script[id^="kp_"],div[id^="kp"]')
        .forEach(function (w) {
          w.remove();
        });
    }
    if (
      document.currentScript &&
      typeof document.currentScript.dataset != 'undefined' &&
      typeof document.currentScript.dataset.params != 'undefined' &&
      document.currentScript.dataset.params
    ) {
      var bB = document.currentScript.dataset.params,
        aA = {};
      if (bB[0] == '?') {
        bB = bB.substring(1);
      }
      switch (bB[0]) {
        case '{':
          aA = JSON.parse(bB);
          break;
        case '[':
          aA = JSON.parse(bB).reduce(function (b1, w) {
            if (w[0]) {
              b1[w[0]] = w[1];
            }
            return b1;
          }, aA);
          break;
        default:
          aA = bB
            .split('&')
            .map(function (w) {
              return w.split('=');
            })
            .reduce(function (b1, w) {
              if (w[0]) {
                b1[w[0]] = w[1];
              }
              return b1;
            }, aA);
          break;
      }
      if (typeof aA == 'object' && Object.keys(aA).length) {
        Object.keys(aA).map(function (w) {
          if (w.indexOf('kp_') === 0 && typeof aA[w] != 'undefined') {
            window[w] = aA[w];
          }
        });
      }
    }
    var aQ = [];
    if (window.JSON && typeof JSON.stringify == 'function') {
      var ba = window,
        p = [];
      for (var a in ba) {
        if (a.indexOf('kp_') === 0 && typeof ba[a] != 'undefined') {
          p.push([a, ba[a]]);
        }
      }
      aQ.push(['params', JSON.stringify(p)]);
    }
    window.kp_embed_type =
      typeof window.kp_embed_type != 'undefined' ? window.kp_embed_type : 1;
    window.kp_category_id = window.shop_id
      ? window.shop_id
      : window.kp_category_id;
    window.kp_product_brand = window.product_brand
      ? window.product_brand
      : window.kp_product_brand;
    window.kp_product_id =
      window.product_id && !window.kp_product_id
        ? window.product_id
        : window.kp_product_id;
    window.kp_product_category_id = window.shop_id
      ? window.shop_id
      : window.kp_product_category_id;
    window.kp_recommended_product_ids = window.shop_trackingproducts
      ? window.shop_trackingproducts
      : window.kp_recommended_product_ids;
    window.kp_wishlist_product_ids = window.wishlist_article
      ? window.wishlist_article
      : window.kp_wishlist_product_ids;
    window.kp_shoppingcart_product_ids = window.order_article
      ? window.order_article
      : window.kp_shoppingcart_product_ids;
    window.kp_shoppingcart_product_quantities =
      window.shoppingcart_product_quantities
        ? window.shoppingcart_product_quantities
        : window.kp_shoppingcart_product_quantities;
    window.kp_shoppingcart_product_values = window.shoppingcart_product_values
      ? window.shoppingcart_product_values
      : window.kp_shoppingcart_product_values;
    window.kp_order_id = window.order_id ? window.order_id : window.kp_order_id;
    window.kp_order_total = window.order_total
      ? window.order_total
      : window.kp_order_total;
    window.kp_order_product_ids = window.order_article
      ? window.order_article
      : window.kp_order_product_ids;
    window.kp_order_product_quantities = window.product_quantity
      ? window.product_quantity
      : window.kp_order_product_quantities;
    window.kp_order_product_values = window.product_values
      ? window.product_values
      : window.kp_order_product_values;
    window.kp_event = window.event ? window.event : window.kp_event;
    window.kp_existinguser = window.user_log
      ? window.user_log
      : window.kp_existinguser;
    window.kp_tarif = window.order_tariff
      ? window.order_tariff
      : window.kp_tarif;
    window.kp_order_voucher_source = window.order_voucher_source
      ? window.order_voucher_source
      : window.kp_order_voucher_source;
    window.kp_rule_publisher_ids_default = window.kp_rule_publisher_ids_default
      ? window.kp_rule_publisher_ids_default
      : bp.defaultPiggybackWhitelist
        ? bp.defaultPiggybackWhitelist
        : null;
    window.kp_rule_publisher_ids = window.kp_rule_publisher_ids
      ? window.kp_rule_publisher_ids
      : null;
    window.kp_product_id_valid_default = window.kp_product_id_valid_default
      ? window.kp_product_id_valid_default
      : bp.defaultProductIdValid
        ? bp.defaultProductIdValid
        : null;
    window.kp_product_id_valid = window.kp_product_id_valid
      ? window.kp_product_id_valid
      : null;
    window.kp_valid_shoppingcart_ids = window.kp_valid_shoppingcart_ids
      ? window.kp_valid_shoppingcart_ids
      : null;
    window.kp_full_category_id = window.shop_id
      ? window.shop_id
      : window.kp_full_category_id;
    window.kp_full_category_id = window.kp_category_id
      ? window.kp_category_id
      : window.kp_product_category_id
        ? window.kp_product_category_id
        : window.kp_full_category_id;
    window.kp_travel_start_date = window.travel_start_date
      ? window.travel_start_date
      : window.kp_travel_start_date;
    window.kp_travel_end_date = window.travel_end_date
      ? window.travel_end_date
      : window.kp_travel_end_date;
    window.kp_travel_product_type = window.travel_product_type
      ? window.travel_product_type
      : window.kp_travel_product_type;
    window.kp_travel_kids = window.travel_kids
      ? window.travel_kids
      : window.kp_travel_kids;
    window.kp_travel_adults = window.travel_adults
      ? window.travel_adults
      : window.kp_travel_adults;
    window.kp_travel_hotel_category = window.travel_hotel_category
      ? window.travel_hotel_category
      : window.kp_travel_hotel_category;
    window.kp_travel_destination = window.travel_destination
      ? window.travel_destination
      : window.kp_travel_destination;
    window.kp_travel_origin = window.travel_origin
      ? window.travel_origin
      : window.kp_travel_origin;
    window.kp_travel_babys = window.travel_babys
      ? window.travel_babys
      : window.kp_travel_babys;
    window.kp_travel_2_destination = window.travel_2_destination
      ? window.travel_2_destination
      : window.kp_travel_2_destination;
    window.kp_travel_2_origin = window.travel_2_origin
      ? window.travel_2_origin
      : window.kp_travel_2_origin;
    window.kp_travel_class = window.travel_class
      ? window.travel_class
      : window.kp_travel_class;
    window.kp_travel_airline = window.travel_airline
      ? window.travel_airline
      : window.kp_travel_airline;
    window.kp_travel_nonstop = window.travel_nonstop
      ? window.travel_nonstop
      : window.kp_travel_nonstop;
    window.kp_travel_flight_type = window.travel_flight_type
      ? window.travel_flight_type
      : window.kp_travel_flight_type;
    window.kp_downstream_call =
      typeof window.kp_downstream_call != 'undefined'
        ? parseInt(window.kp_downstream_call)
        : null;
    window.kp_load_adserver_pixel =
      window.kp_downstream_call !== null &&
      parseInt(window.kp_downstream_call) == 1
        ? 0
        : window.kp_load_adserver_pixel
          ? parseInt(window.kp_load_adserver_pixel)
          : null;
    window.kp_load_heias_pixel =
      window.kp_load_adserver_pixel !== null
        ? window.kp_load_adserver_pixel
        : window.kp_load_heias_pixel
          ? parseInt(window.kp_load_heias_pixel)
          : null;
    window.kp_load_neory_pixel =
      window.kp_load_adserver_pixel !== null
        ? window.kp_load_adserver_pixel
        : window.kp_load_neory_pixel
          ? parseInt(window.kp_load_neory_pixel)
          : null;
    window.kp_get_consent =
      window.kp_downstream_call !== null &&
      parseInt(window.kp_downstream_call) == 1
        ? 0
        : window.kp_get_consent
          ? parseInt(window.kp_get_consent)
          : typeof bp.getConsent != 'undefined'
            ? bp.getConsent
            : 1;
    window.kp_get_consent = a8(bp.consentexcludesites, bQ())
      ? 0
      : window.kp_get_consent;
    window.kp_get_rules =
      window.kp_downstream_call !== null &&
      parseInt(window.kp_downstream_call) == 1
        ? 0
        : window.kp_get_rules
          ? parseInt(window.kp_get_rules)
          : typeof bp.getRules != 'undefined'
            ? bp.getRules
            : 1;
    window.kp_get_rules = a8(bp.ruleexcludesites, bQ())
      ? 0
      : window.kp_get_rules;
    window.kp_do_rebounce =
      window.kp_downstream_call !== null &&
      parseInt(window.kp_downstream_call) == 1
        ? 0
        : window.kp_do_rebounce
          ? parseInt(window.kp_do_rebounce)
          : typeof bp.doReBounce != 'undefined'
            ? bp.doReBounce
            : 1;
    window.kp_do_rebounce = a8(bp.rebounceexcludesites, bQ())
      ? 0
      : window.kp_do_rebounce;
    window.kp_feed_id =
      typeof window.kp_feed_id != 'undefined'
        ? parseInt(window.kp_feed_id)
        : undefined;
    window.kp_gdpr_params = window.kp_gdpr || window.gdpr ? true : false;
    window.kp_gdpr = window.kp_gdpr
      ? window.kp_gdpr
      : window.gdpr
        ? window.gdpr
        : undefined;
    window.kp_gdpr_consent = window.kp_gdpr_consent
      ? window.kp_gdpr_consent
      : window.gdpr_consent
        ? window.gdpr_consent
        : undefined;
    window.kp_gdpr_pd = window.kp_gdpr_pd
      ? window.kp_gdpr_pd
      : window.gdpr_pd
        ? window.gdpr_pd
        : undefined;
    if (window.kp_recommended_product_ids instanceof Array) {
      window.kp_recommended_product_ids =
        window.kp_recommended_product_ids.join(',');
    }
    if (window.kp_wishlist_product_ids instanceof Array) {
      window.kp_wishlist_product_ids = window.kp_wishlist_product_ids.join(',');
    }
    if (window.kp_shoppingcart_product_ids instanceof Array) {
      window.kp_shoppingcart_product_ids =
        window.kp_shoppingcart_product_ids.join(',');
    }
    if (window.kp_shoppingcart_product_quantities instanceof Array) {
      window.kp_shoppingcart_product_quantities =
        window.kp_shoppingcart_product_quantities.join(',');
    }
    if (window.kp_shoppingcart_product_values instanceof Array) {
      window.kp_shoppingcart_product_values =
        window.kp_shoppingcart_product_values.join(',');
    }
    if (window.kp_order_product_ids instanceof Array) {
      window.kp_order_product_ids = window.kp_order_product_ids.join(',');
    }
    if (window.kp_order_product_quantities instanceof Array) {
      window.kp_order_product_quantities =
        window.kp_order_product_quantities.join(',');
    }
    if (window.kp_order_product_values instanceof Array) {
      window.kp_order_product_values = window.kp_order_product_values.join(',');
    }
    if (kp_gdpr && kp_gdpr.toUpperCase() == '[VALUE]') {
      kp_gdpr = undefined;
      kp_gdpr_params = false;
    }
    if (kp_gdpr_consent && kp_gdpr_consent.toUpperCase() == '[VALUE]') {
      kp_gdpr_consent = undefined;
    }
    if (kp_gdpr_pd && kp_gdpr_pd.toUpperCase() == '[VALUE]') {
      kp_gdpr_pd = undefined;
    }
    if (bL('AfterKPParamsMapping')) {
      ap('AfterKPParamsMapping');
    }
    var bw = [];
    bw.push(['gdpr', kp_gdpr]);
    bw.push(['gdpr_consent', kp_gdpr_consent]);
    bw.push(['gdpr_pd', kp_gdpr_pd]);
    var Z = '1340-20240604-00070';
    var aq = '1340-20240717-00070-00008';
    var aD = '000dbedbbbaf5e4d';
    var au = aL();
    var bx = bQ();
    var br =
      '[protocol]//retrack-kupona-de.s3-external-3.amazonaws.com/sdblog/index.html';
    var bb = 0;
    var l = 1;
    var aj = 2;
    var aH = 4;
    var a4 = bM();
    var m = a9();
    var X = [];
    bD(bw);
    bD(aQ);
    var aX = ['ssl', 'n', 'cus', 'pb', 'type'];
    var bH = bT();
    var am = aC();
    var x = aa();
    var k = ['ssl', 'n', 'cus', 'pb', 'type'];
    var bX = aR();
    var B = N();
    var aI = Math.random() * 10000000000000000000;
    var bh = [];
    var bZ = [];
    var y = r();
    var bO = bg();
    var T = aP();
    var bF = bA();
    var aw = al();
    var H = [];
    var by = aE();
    var h = ai();
    var U = aB();
    var t = b();
    var ar = a5();
    var u = bU();
    var aK = F();
    var s = bk();
    var V = K();
    var an = M();
    var bz = ac();
    var aO = a3();
    var be = a0();
    var aG = av();
    var bo = j();
    var bu = aZ();
    var bC = aS();
    var d = bv();
    var aN = bG();
    var A = aF();
    var bI = '/* LF */';
    function aJ(b1, b4, b3, w) {
      if (typeof b1 == 'undefined' || typeof b4 == 'undefined') {
        return false;
      }
      if (typeof b3 == 'undefined') {
        b3 = false;
      }
      if (typeof w == 'undefined') {
        w = undefined;
      }
      if (typeof b4 == 'string') {
        var b2 = b3 ? typeof b1[b4] != 'undefined' : b1[b4];
        return b2 ? b1[b4] : w;
      } else {
        if (Array.isArray(b4)) {
          if (b4.length > 1) {
            var b2 = b3 ? typeof b1[b4[0]] != 'undefined' : b1[b4[0]];
            return b2 ? aJ(b1[b4[0]], b4.slice(1), b3, w) : w;
          } else {
            var b2 = b3 ? typeof b1[b4[0]] != 'undefined' : b1[b4[0]];
            return b2 ? b1[b4[0]] : w;
          }
        }
      }
      return false;
    }
    var ak = aJ(bp, 'reBounce', false, {});
    var az = aJ(ak, 'storage', false, {});
    var bq = aJ(ak, 'mouse', false, {});
    this.KPConsent =
      typeof KPConsent != 'undefined'
        ? new KPConsent(false, { get_consent: kp_get_consent, opt_version: aD })
        : null;
    this.KPConsentData =
      typeof KPConsentData != 'undefined'
        ? new KPConsentData(false, { get_consent: kp_get_consent })
        : null;
    this.KPRule =
      typeof KPRule != 'undefined'
        ? new KPRule(false, {
            get_rules: kp_get_rules,
            template_version: Z,
            version: aq,
            protocol: au,
            site: bx,
            skipParams: [
              'kp_rule_publisher_ids_default',
              'kp_rule_publisher_ids',
              'kp_product_id_valid_default',
              'kp_product_id_valid',
              'kp_valid_shoppingcart_ids',
              'kp_opt_approval',
              'kp_opt_consent_data',
              'kp_opt_piggyback_opts',
              'kp_downstream_call',
              'kp_load_adserver_pixel',
              'kp_load_heias_pixel',
              'kp_load_neory_pixel',
              'kp_get_consent',
              'kp_get_rules',
              'kp_do_rebounce',
              'kp_gdpr_params',
              'kp_gdpr',
              'kp_gdpr_consent',
              'kp_gdpr_pd',
              'kp_opt_allowed_vendor_partners',
              'kp_feed_id',
              'kp_execute',
              'kp_start_time',
              'kp_mtis',
              'kp_mtk',
              'kp_embed_type',
              'kp_c',
            ],
            ruleQueries: J(),
            skipRuleQueries: { hasSkips: true, pages: ['startpage'] },
            mastertagConf: {
              raw: {
                init: function (b1, w) {
                  if (typeof b1 == 'undefined') {
                    b1 = false;
                  }
                  if (typeof w == 'undefined' || b1) {
                    w = !b1 ? true : false;
                  }
                  var b2 = {};
                  if (
                    !b1 &&
                    window.JSON &&
                    typeof JSON.parse == 'function' &&
                    typeof JSON.stringify == 'function'
                  ) {
                    b2 = JSON.parse(JSON.stringify(bp));
                    if (w) {
                      b2.piggybacks = b2.conversiontags = [];
                    }
                  } else {
                    b2 = bp;
                  }
                  return b2;
                },
              }.init(),
              parsed: {
                loadPiggybacks: by,
                loadAdvertiserPiggybacks: h,
                loadAdvertiserPublisherPiggybacks: U,
                loadManufacturerPiggybacks: t,
                loadManufacturerPublisherPiggybacks: ar,
                loadUrtrackerPiggybacks: u,
                loadHeiasPixel: aK,
                loadNeoryPixel: s,
                loadConversiontags: an,
                loadAdvertiserConversiontags: bz,
                loadAdvertiserPublisherConversiontags: aO,
                loadManufacturerConversiontags: be,
                loadManufacturerPublisherConversiontags: aG,
                loadUrtrackerConversiontags: bo,
                loadOnValidProductIdOnly: A,
                usesFullCategory: C(true, 1),
              },
            },
          })
        : null;
    this.KPReBounce =
      typeof KPReBounce != 'undefined'
        ? new KPReBounce(false, {
            do_rebounce: kp_do_rebounce,
            template_version: Z,
            version: aq,
            protocol: au,
            site: bx,
            isRebounce: T,
            embedTypeType: aJ(ak, 'embedTypeType', true, window.kp_embed_type),
            extTimeout: aJ(ak, 'extTimeout', true, 1000),
            redirectLocationType: aJ(ak, 'redirectLocationType', true, 2),
            rebounceLocationType: aJ(ak, 'rebounceLocationType', true, 1),
            rebounceModeType: aJ(ak, 'rebounceModeType', true, 1),
            rebounceEvents: aJ(ak, 'rebounceEvents', true, 'popstate'),
            logRebounceEvents: aJ(ak, 'logRebounceEvents', true, false),
            userActivity: aJ(
              ak,
              'userActivity',
              true,
              'defaultInitReBounceOnUserActivity:0,checkInterval:100,checkTimeout:5000,initConf:1',
            ),
            storage: {
              active: aJ(az, 'active', true, true),
              cookie: { active: aJ(az, ['cookie', 'active'], true, true) },
              session: {
                active: aJ(az, ['session', 'active'], true, true),
                maxUrlCount: aJ(az, ['session', 'maxUrlCount'], true, 20),
              },
              local: {
                active: aJ(az, ['local', 'active'], true, true),
                maxSessionAge: aJ(az, ['local', 'maxSessionAge'], true, 604800),
                maxSessionCount: aJ(az, ['local', 'maxSessionCount'], true, 20),
                activeSessionIndicator: aJ(
                  az,
                  ['local', 'activeSessionIndicator'],
                  true,
                  0,
                ),
              },
              grantExternalStorageAccess: aJ(
                az,
                'grantExternalStorageAccess',
                true,
                false,
              ),
            },
            mouse: {
              active: aJ(bq, 'active', true, false),
              potentialActive: aJ(bq, 'potentialActive', true, false),
              potentialTriggerTime: aJ(bq, 'potentialTriggerTime', true, 2000),
              possibleActive: aJ(bq, 'possibleActive', true, false),
              possibleTriggerTime: aJ(bq, 'possibleTriggerTime', true, 4000),
              checkIntervalTime: aJ(bq, 'checkIntervalTime', true, 50),
              borderTriggerWidth: aJ(bq, 'borderTriggerWidth', true, 50),
            },
            essentials: aJ(ak, 'essentials', true, {}),
          })
        : null;
    var aW = {};
    this.increaseCounter = function (w, b1) {
      aW[w] = (aW[w] || 0) + (b1 || 1);
    };
    this.getCounter = function (w) {
      return aW[w] || 0;
    };
    var a1 = false;
    var v = false;
    if (bL('AfterInstantiation')) {
      ap('AfterInstantiation');
    }
    var bt = new Date().getTime();
    bp.data.times.Constructor = bt - kp_start_time + 'ms';
    this.load = function () {
      if (
        this.getCounter('load') == 0 &&
        typeof KPTempProps != 'undefined' &&
        Object.keys(KPTempProps).length > 0
      ) {
        valid_functions = [
          this.name,
          KPConsent.name,
          KPConsentData.name,
          KPRule.name,
        ];
        for (var w in KPTempProps) {
          var b3 = valid_functions.indexOf(w) == -1 ? true : false;
          if (b3) {
            this._prop(this, true, w, KPTempProps[w]);
          } else {
            for (var b7 in KPTempProps[w]) {
              this._prop(w, false, b7, KPTempProps[w][b7]);
            }
          }
        }
        window.KPTempProps = null;
        delete KPTempProps;
      }
      if (bL('BeforeLoad')) {
        ap('BeforeLoad', false);
      }
      if (window.is_bot === true) {
        return;
      }
      window.KPMasterTag.KPConsent.init();
      window.KPMasterTag.KPConsentData.init();
      window.KPMasterTag.KPConsentData.setData('status', 'start');
      window.KPMasterTag.KPConsentData.setData(
        'load_flags',
        '' +
          (by | 0) +
          (h | 0) +
          (U | 0) +
          (t | 0) +
          (ar | 0) +
          (u | 0) +
          (aK | 0) +
          (s | 0) +
          (V | 0) +
          (an | 0) +
          (bz | 0) +
          (aO | 0) +
          (be | 0) +
          (aG | 0) +
          (bo | 0) +
          (A | 0),
      );
      if (typeof window.kp_opt_approval == 'undefined') {
        window.KPMasterTag.KPConsentData.setData('status', 'checking consent');
        if (window.KPMasterTag.hasConsentInstance()) {
          var b6 = document.getElementById(
            window.KPMasterTag.KPConsent.getConsentScriptId(),
          );
          if (
            !b6 ||
            new Date() - b6.startTime >=
              window.KPMasterTag.KPConsent.getConsentScriptTimeout()
          ) {
            window.KPMasterTag.KPConsentData.setData('consent_timeout', 1);
            window.kp_opt_approval = false;
          }
          window.setTimeout(function () {
            window.KPMasterTag.load();
          }, 100);
          return;
        } else {
          window.kp_opt_approval = false;
        }
      }
      var b5 = new Date().getTime();
      bp.data.times.ConsentLoaded = b5 - kp_start_time + 'ms';
      window.KPMasterTag.KPConsentData.setData('status', 'consent checked');
      if (window.kp_opt_approval === false) {
        if ((d && bu) || (aN && bC)) {
          if (by || h || aK || an) {
            q(bx);
          }
          if (by || h) {
            c(bx);
          }
          if (aK || by || h) {
            bS(bx);
          }
          if (s || by || h) {
            af(bx);
          }
        }
        if (d && bu) {
          var b4 = bE(bp.piggybacks);
          var b2 = bE(bp.conversiontags);
          if (b4.length) {
            bl(bx, -1, b4);
          }
          if (b2.length) {
            aT(bx, -1, b2);
          }
        }
        if (aN && bC) {
          var b1 = o(bp.piggybacks);
          var b9 = o(bp.conversiontags);
          if (b1.length) {
            bl(bx, -1, b1);
          }
          if (b9.length) {
            aT(bx, -1, b9);
          }
        }
        window.KPMasterTag.KPConsentData.setData('status', 'finished');
        window.KPMasterTag.KPConsentData.setDoCall(true);
        return;
      }
      this.increaseCounter('load');
      if (this.getCounter('load') == 1) {
        C();
        if (by || h || aK || an) {
          q(bx);
        }
        if (by || h) {
          c(bx, false);
        }
        if (aK || by || h) {
          bS(bx);
        }
        if (s || by || h) {
          af(bx);
        }
        if ((by || h) && !a1) {
          bl(bx, false);
        }
        if (an && !v) {
          aT(bx, false);
        }
      }
      var b8 = function () {
        if (bL('BeforeLoad')) {
          ap('BeforeLoad', true);
        }
        window.KPMasterTag.KPConsentData.setData(
          'status',
          'load event function',
        );
        window.KPMasterTag.KPRule.init();
        window.KPMasterTag.KPReBounce.init();
        if (bL('AfterAdditionalsInit')) {
          ap('AfterAdditionalsInit');
        }
        if (window.kp_rule_publisher_ids_default !== null) {
          if (window.kp_rule_publisher_ids === null) {
            window.KPMasterTag.KPConsentData.setData(
              'status',
              'checking rules',
            );
            if (window.KPMasterTag.hasRuleInstance()) {
              var cc = document.getElementById(
                window.KPMasterTag.KPRule.getRuleScriptId(),
              );
              if (
                !cc ||
                new Date() - cc.startTime >=
                  window.KPMasterTag.KPRule.getRuleScriptTimeout()
              ) {
                window.KPMasterTag.KPConsentData.setData('rule_timeout', 1);
                window.kp_rule_publisher_ids =
                  window.kp_rule_publisher_ids_default;
              }
              window.setTimeout(function () {
                window.KPMasterTag.load();
              }, 100);
              return;
            } else {
              window.kp_rule_publisher_ids =
                window.kp_rule_publisher_ids_default;
            }
          }
          if (
            kp_rule_publisher_ids.length == 0 ||
            typeof kp_rule_response == 'undefined'
          ) {
            window.kp_rule_publisher_ids = [
              (bp.customerid || bp.customeridNeory) + '',
            ]
              .concat(
                bp.piggybacks
                  .map(function (cd) {
                    return cd.name.toString();
                  })
                  .concat(
                    bp.conversiontags.map(function (cd) {
                      return cd.name.toString();
                    }),
                  ),
              )
              .filter(function (cf, ce, cd) {
                return cd.indexOf(cf) === ce;
              });
          }
          var cb = new Date().getTime();
          bp.data.times.MastertagRulesLoaded = cb - kp_start_time + 'ms';
          window.KPMasterTag.KPConsentData.setData('status', 'rules checked');
          if (bL('AfterRuleResponse')) {
            ap('AfterRuleResponse');
          }
          if (A) {
            if (window.kp_product_id_valid === null) {
              window.kp_product_id_valid = window.kp_product_id_valid_default;
            }
            if (
              typeof window.kp_shoppingcart_product_ids !== 'undefined' &&
              window.kp_valid_shoppingcart_ids !== null
            ) {
              window.kp_product_id_valid =
                window.kp_valid_shoppingcart_ids.length > 0 ? true : false;
              if (
                window.kp_shoppingcart_product_ids.split(',').length >
                window.kp_valid_shoppingcart_ids.length
              ) {
                window.kp_shoppingcart_product_ids =
                  window.kp_valid_shoppingcart_ids.join(',');
              }
            }
          }
          if (typeof window.kp_full_category_id !== 'undefined') {
            window.kp_full_category_id = decodeURIComponent(
              window.kp_full_category_id,
            );
          }
          if ((by || h) && a1) {
            bl(bx, false);
          }
          if (an && v) {
            aT(bx, false);
          }
          if (!A || kp_product_id_valid) {
            if (by || h) {
              c(bx, true);
            }
            if (aK || by || h) {
              bS(bx, true);
            }
            if (by || h) {
              bl(bx, true);
            }
            if (aK) {
              b0(bx);
            }
            if (s) {
              i(bx);
            }
          }
          if (an) {
            aT(bx, true);
          }
        }
        var ca = Math.max.apply(
          this,
          KPMasterTag.getConf(KPMasterTag)
            .piggybacks.concat(KPMasterTag.getConf(KPMasterTag).conversiontags)
            .concat([{ timeout: 0 }])
            .map(function (cd) {
              return cd.timeout || 0;
            }),
        );
        setTimeout(function () {
          var cd = new Date().getTime();
          bp.data.times.PixelLoaded = cd - kp_start_time + 'ms';
        }, ca);
        window.KPMasterTag.KPConsentData.setData('status', 'finished');
        window.KPMasterTag.KPConsentData.setDoCall(true);
        if (bL('AfterLoad')) {
          ap('AfterLoad', true);
        }
      };
      window.KPMasterTag.KPConsentData.setData(
        'status',
        'initializing load event function trigger',
      );
      if (
        bp.immediateExecution &&
        (a8(bp.immediateExecutionSites, 'all') ||
          a8(bp.immediateExecutionSites, bx))
      ) {
        b8();
      } else {
        'complete' === document.readyState
          ? window.setTimeout(b8)
          : window.addEventListener
            ? window.addEventListener('load', b8, false)
            : window.attachEvent('onload', b8);
      }
      window.KPMasterTag.KPConsentData.setData(
        'status',
        'waiting for load event',
      );
      if (bL('AfterLoad')) {
        ap('AfterLoad', false);
      }
    };
    function q(w) {
      if (bL('BeforeDynamicParams')) {
        ap('BeforeDynamicParams');
      }
      if (typeof bp.dynamicParamsRules !== 'undefined') {
        for (var b8 in bp.dynamicParamsRules) {
          var b3 = bp.dynamicParamsRules[b8];
          if (typeof b3 == 'function') {
            continue;
          }
          if (bL('BeforeDynamicParam')) {
            b3 = ap('BeforeDynamicParam', b3);
          }
          if (a8(b3.sites, w) || bP(b3.sites, w)) {
            var b7 = null;
            var b4 = 0;
            var b2 = 0;
            if (b3.type == 'url') {
              var b1 = new RegExp(b3.query);
              b7 = location.href.match(b1);
              b4 = 1;
              b2 = 1;
            } else {
              if (b3.type == 'dom') {
                if (typeof document.querySelectorAll == 'function') {
                  b7 = document.querySelectorAll(b3.query);
                }
              }
            }
            if (b7 !== null && b7.length > b2) {
              var b6 = b3.mapping.split(',');
              if (b6.length > 0) {
                var b9 = [];
                for (var cb in b6) {
                  var cc = b6[cb].trim();
                  if (typeof b7[parseInt(cb) + b4] != 'undefined') {
                    var b5 = b7[parseInt(cb) + b4];
                    var ca = null;
                    if (b3.type == 'url') {
                      ca = b5 || null;
                    } else {
                      if (b3.type == 'dom') {
                        ca = b5.value || b5.textContent || b5.innerText || null;
                      }
                    }
                    if (cc.indexOf('kp_') == 0) {
                      window[cc] = ca;
                    } else {
                      if (cc.indexOf('[') == 0) {
                        b9.push([cc.substring(1, cc.length - 1), ca]);
                      }
                    }
                  }
                }
                if (b9.length > 0) {
                  bD(b9);
                }
              }
            }
          }
          if (bL('AfterDynamicParam')) {
            ap('AfterDynamicParam', b3);
          }
        }
      }
      if (bL('AfterDynamicParams')) {
        ap('AfterDynamicParams');
      }
    }
    function bS(b1, cn) {
      if (
        bp.manufacturerLoadAdserverPixel == 1 &&
        window.kp_rule_publisher_ids !== null &&
        window.kp_rule_publisher_ids.length == 0 &&
        b1 !== 'orderconfirmation'
      ) {
        return;
      }
      if (typeof cn == 'undefined') {
        cn = false;
      }
      if (cn) {
        bh = [];
        if (aK) {
          window.HEIAS = [];
        }
      }
      if (bh.length > 0) {
        return bh;
      }
      if (bL('BeforeHeiasParams')) {
        ap('BeforeHeiasParams');
      }
      var b5 = !aK && !s;
      bh.push(
        ['ssl', 'auto'],
        ['n', bp.networkid],
        ['cus', bp.customerid],
        ['pb', 1],
      );
      if (b1 == 'orderconfirmation') {
        var cf = window.kp_order_product_ids ? kp_order_product_ids : '';
        var ca = window.kp_order_id ? kp_order_id : '';
        var cg = window.kp_order_total ? kp_order_total : '';
        var ci = window.kp_order_product_quantities
          ? kp_order_product_quantities
          : '';
        var cs = window.kp_order_product_values ? kp_order_product_values : '';
        var cy = window.kp_order_voucher_source ? kp_order_voucher_source : '';
        if (!cf) {
          bK('order_article is not defined for site ' + b1);
        }
        if (!cg) {
          bK('order_total is not defined for site ' + b1);
        }
        if (!ci) {
          bK('product_quantity is not defined for site ' + b1);
        }
        bh.push(['order_article', cf]);
        bh.push(['product_quantity', ci]);
        bh.push(['product_value', cs]);
        bh.push(['order_id', ca]);
        bh.push(['order_total', cg]);
        bh.push(['order_voucher_source', cy]);
        bh.push(['type', 'cpx']);
      } else {
        if (
          b1 == 'wishlist' &&
          (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1) || b5)
        ) {
          var cr = window.kp_wishlist_product_ids;
          bh.push(['wishlist_article', cr]);
          bh.push(['type', 'ppx']);
        } else {
          if (
            b1 == 'shoppingcart' &&
            (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1) || b5)
          ) {
            var cf = window.kp_shoppingcart_product_ids;
            var ci = window.kp_shoppingcart_product_quantities
              ? kp_shoppingcart_product_quantities
              : '';
            var cs = window.kp_shoppingcart_product_values
              ? kp_shoppingcart_product_values
              : '';
            var ce = window.kp_tarif ? window.kp_tarif : '';
            bh.push(['order_article', cf]);
            bh.push(['product_quantity', ci]);
            bh.push(['product_value', cs]);
            bh.push(['type', 'ppx']);
          } else {
            if (
              b1 == 'productdetail' &&
              (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1) || b5)
            ) {
              var b6 = window.kp_product_category_id
                ? kp_product_category_id
                : '';
              var cu = window.kp_product_brand ? kp_product_brand : '';
              var b8 = window.kp_product_id ? window.kp_product_id : '';
              var co = window.kp_recommended_product_ids
                ? window.kp_recommended_product_ids
                : '';
              if (!b8) {
                bK('kp_product_id is not defined for site ' + b1);
              }
              if (!co) {
                bK('kp_recommended_product_ids is not defined for site ' + b1);
              }
              if (!b6) {
                bK('kp_product_category_id is not defined for site ' + b1);
              }
              if (!cu) {
                bK('kp_product_brand is not defined for site ' + b1);
              }
              bh.push(['shop_id', b6]);
              bh.push(['product_brand', cu]);
              bh.push(['product_id', b8]);
              bh.push(['shop_trackingproducts', co]);
              bh.push(['type', 'ppx']);
            } else {
              if (
                b1 == 'category' &&
                (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1) || b5)
              ) {
                var b6 = window.kp_category_id ? kp_category_id : '';
                bh.push(['shop_id', b6]);
                bh.push(['type', 'ppx']);
              } else {
                if (
                  b1 == 'startpage' &&
                  (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1) || b5)
                ) {
                  bh.push(['shop_id', '']);
                  bh.push(['type', 'ppx']);
                } else {
                  if (
                    window.kp_site &&
                    (a8(bp.profilingsites, window.kp_site) ||
                      bP(bp.profilingsites, window.kp_site) ||
                      b5)
                  ) {
                    var b6 = window.kp_category_id
                      ? window.kp_category_id
                      : window.kp_product_category_id
                        ? window.kp_product_category_id
                        : '';
                    var b8 = window.kp_product_id ? window.kp_product_id : '';
                    var cu = window.kp_product_brand
                      ? window.kp_product_brand
                      : '';
                    var co = window.kp_recommended_product_ids
                      ? window.kp_recommended_product_ids
                      : '';
                    var cr = window.kp_wishlist_product_ids
                      ? window.kp_wishlist_product_ids
                      : '';
                    var cf = window.kp_order_product_ids
                      ? window.kp_order_product_ids
                      : window.kp_shoppingcart_product_ids
                        ? window.kp_shoppingcart_product_ids
                        : '';
                    var ca = window.kp_order_id ? window.kp_order_id : '';
                    var cg = window.kp_order_total ? window.kp_order_total : '';
                    var ci = window.kp_order_product_quantities
                      ? window.kp_order_product_quantities
                      : window.kp_shoppingcart_product_quantities
                        ? window.kp_shoppingcart_product_quantities
                        : '';
                    var cs = window.kp_order_product_values
                      ? window.kp_order_product_values
                      : window.kp_shoppingcart_product_values
                        ? window.kp_shoppingcart_product_values
                        : '';
                    var cy = window.kp_order_voucher_source
                      ? kp_order_voucher_source
                      : '';
                    if (b6) {
                      bh.push(['shop_id', b6]);
                    }
                    if (cu) {
                      bh.push(['product_brand', cu]);
                    }
                    if (b8) {
                      bh.push(['product_id', b8]);
                    }
                    if (co) {
                      bh.push(['shop_trackingproducts', co]);
                    }
                    if (cr) {
                      bh.push(['wishlist_article', cr]);
                    }
                    if (cf) {
                      bh.push(['order_article', cf]);
                    }
                    if (ci) {
                      bh.push(['product_quantity', ci]);
                    }
                    if (cs) {
                      bh.push(['product_value', cs]);
                    }
                    if (ca) {
                      bh.push(['order_id', ca]);
                    }
                    if (cg) {
                      bh.push(['order_total', cg]);
                    }
                    if (cy) {
                      bh.push(['order_voucher_source', cy]);
                    }
                    bh.push(['type', 'ppx']);
                  }
                }
              }
            }
          }
        }
      }
      var ce = window.kp_tarif ? window.kp_tarif : '';
      if (ce) {
        bh.push(['order_tariff', ce]);
      }
      var w = window.kp_existinguser ? window.kp_existinguser : '';
      if (w) {
        bh.push(['user_log', w]);
      }
      var cz = window.kp_event ? window.kp_event : '';
      if (cz) {
        bh.push(['event', cz]);
      }
      var cp = window.kp_travel_start_date ? window.kp_travel_start_date : '';
      if (cp) {
        bh.push(['travel_start_date', cp]);
      }
      var b9 = window.kp_travel_end_date ? window.kp_travel_end_date : '';
      if (b9) {
        bh.push(['travel_end_date', b9]);
      }
      var cx = window.kp_travel_product_type
        ? window.kp_travel_product_type
        : '';
      if (cx) {
        bh.push(['travel_product_type', cx]);
      }
      var cq = window.kp_travel_kids ? window.kp_travel_kids : '';
      if (cq) {
        bh.push(['travel_kids', cq]);
      }
      var cc = window.kp_travel_adults ? window.kp_travel_adults : '';
      if (cc) {
        bh.push(['travel_adults', cc]);
      }
      var cj = window.kp_travel_hotel_category
        ? window.kp_travel_hotel_category
        : '';
      if (cj) {
        bh.push(['travel_hotel_category', cj]);
      }
      var cw = window.kp_travel_destination ? window.kp_travel_destination : '';
      if (cw) {
        bh.push(['travel_destination', cw]);
      }
      var b2 = window.kp_travel_origin ? window.kp_travel_origin : '';
      if (b2) {
        bh.push(['travel_origin', b2]);
      }
      var ct = window.kp_travel_babys ? window.kp_travel_babys : '';
      if (ct) {
        bh.push(['travel_babys', ct]);
      }
      var b7 = window.kp_travel_2_destination
        ? window.kp_travel_2_destination
        : '';
      if (b7) {
        bh.push(['travel_2_destination', b7]);
      }
      var ck = window.kp_travel_2_origin ? window.kp_travel_2_origin : '';
      if (ck) {
        bh.push(['travel_2_origin', ck]);
      }
      var b3 = window.kp_travel_class ? window.kp_travel_class : '';
      if (b3) {
        bh.push(['travel_class', b3]);
      }
      var b4 = window.kp_travel_airline ? window.kp_travel_airline : '';
      if (b4) {
        bh.push(['travel_airline', b4]);
      }
      var ch = window.kp_travel_nonstop ? window.kp_travel_nonstop : '';
      if (ch) {
        bh.push(['travel_nonstop', ch]);
      }
      var cd = window.kp_travel_flight_type ? window.kp_travel_flight_type : '';
      if (cd) {
        bh.push(['travel_flight_type', cd]);
      }
      if (
        bF &&
        ((typeof H.manufacturer !== 'undefined' && H.manufacturer.length > 0) ||
          (typeof H.relatedCampaigns !== 'undefined' &&
            H.relatedCampaigns.length > 0))
      ) {
        var cm = [];
        cm.push('kp_' + bp.customerid);
        if (
          typeof H.manufacturer !== 'undefined' &&
          H.manufacturer.length > 0
        ) {
          for (var cv in H.manufacturer) {
            var cb = H.manufacturer[cv];
            if (typeof cb == 'function') {
              continue;
            }
            cm.push('kp_' + bp.customerid + '_' + cb);
          }
        }
        if (
          typeof H.relatedCampaigns !== 'undefined' &&
          H.relatedCampaigns.length > 0
        ) {
          for (var cv in H.relatedCampaigns) {
            var cl = H.relatedCampaigns[cv];
            if (typeof cl == 'function') {
              continue;
            }
            cm.push('kp_' + bp.customerid + '_' + cl);
          }
        }
        cm = f(cm, 1);
        bh.push(['user_searchresults', cm.join(',')]);
      }
      bh = e(bh);
      bh = W(bh);
      if (bL('BeforeHeiasParamsInsertion')) {
        bh = ap('BeforeHeiasParamsInsertion', bh);
      }
      if (aK) {
        if (typeof window.HEIAS === 'undefined') {
          window.HEIAS = [];
        }
        window.HEIAS.push(bh);
      }
      bD(bh);
      if (bL('AfterHeiasParams')) {
        ap('AfterHeiasParams', bh);
      }
    }
    function b0(b1) {
      if (
        bp.manufacturerLoadAdserverPixel == 1 &&
        window.kp_rule_publisher_ids !== null &&
        window.kp_rule_publisher_ids.length == 0 &&
        b1 !== 'orderconfirmation'
      ) {
        return;
      }
      if (bL('BeforeHeiasPixelLoad')) {
        ap('BeforeHeiasPixelLoad');
      }
      if (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1)) {
        var b5 = document.createElement('script');
        b5.async = true;
        b5.src = au + '//ads.heias.com/x/heias.async/p.min.js';
        var b4 = document.getElementsByTagName('script')[0];
        b4.parentNode.insertBefore(b5, b4);
        aI = Math.random() * 10000000000000000000;
        var b6, b2, b3, w;
        b6 = 'none';
        b2 = 'auto';
        b3 = '';
        for (var w = 0; w < bh.length; w += 1) {
          if (bh[w][0] === 'type') {
            b6 = bh[w][1];
          } else {
            if (bh[w][0] === 'ssl') {
              b2 = bh[w][1];
            } else {
              b3 += '|' + bh[w][0] + '|' + bh[w][1];
            }
          }
        }
        heiasSrc =
          b2 === 'force'
            ? 'https:'
            : b2 === 'off'
              ? 'http:'
              : au === 'http:'
                ? 'http:'
                : 'https:';
        switch (b6) {
          case 'cpx':
            heiasSrc +=
              '//ads.heias.com/x/heias.cpa/count.px.js/?html=1&PX=HT|' +
              aI +
              b3;
            break;
          case 'ppx':
            heiasSrc +=
              '//ads.heias.com/x/heias.ret.px/?html=1&PX=HT|' +
              aI +
              '|fl_ver|' +
              this.fl_ver +
              '|js_var|' +
              window.screen.width +
              ',' +
              window.screen.height +
              ',' +
              window.navigator.cookieEnabled +
              b3;
            break;
          default:
            return;
        }
        bm('heias ppx', 'script', heiasSrc, bp.customerid, b1, l);
      }
      if (bL('AfterHeiasPixelLoad')) {
        ap('AfterHeiasPixelLoad');
      }
    }
    function E(b1) {
      if (
        bp.manufacturerLoadAdserverPixel == 1 &&
        window.kp_rule_publisher_ids !== null &&
        window.kp_rule_publisher_ids.length == 0 &&
        b1 !== 'orderconfirmation'
      ) {
        return;
      }
      if (bL('BeforeHeiasPixelLoad')) {
        ap('BeforeHeiasPixelLoad');
      }
      aI = Math.random();
      aI = aI * 10000000000000000000;
      if (b1 == 'orderconfirmation') {
        var b2 = window.kp_order_product_ids ? kp_order_product_ids : '';
        var cb = window.kp_order_id ? kp_order_id : '';
        var b7 = window.kp_order_total ? kp_order_total : '';
        var b5 = window.kp_order_product_quantities
          ? kp_order_product_quantities
          : '';
        var b6 = window.kp_tarif ? window.kp_tarif : '';
        if (!b2) {
          bK('order_article is not defined for site ' + b1);
        }
        if (!b7) {
          bK('order_total is not defined for site ' + b1);
        }
        if (!b5) {
          bK('product_quantity is not defined for site ' + b1);
        }
        b2 = ao('order_article', b2);
        b5 = ao('product_quantity', b5);
        cb = ao('order_id', cb);
        b7 = ao('order_total', b7);
        var cc =
          'https://ads.heias.com/x/heias.cpa/count.px.js/?PX=HT|' +
          aI +
          '|n|' +
          bp.networkid +
          '|cus|' +
          bp.customerid +
          '|pb|1|order_article|' +
          b2 +
          '|product_quantity|' +
          b5 +
          '|order_id|' +
          cb +
          '|order_total|' +
          b7;
        if (b6) {
          cc = cc + '|order_tariff|' + b6;
        }
        var b8 = O(cc);
        b8 = W(b8);
        cc = a6(cc, b8);
        bf(cc, 'script', 'heiascpx', 'heiascpx', '', 0, null, false, l);
      } else {
        if (
          b1 == 'wishlist' &&
          (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1))
        ) {
          var ca = window.kp_wishlist_product_ids;
          var b6 = window.kp_tarif ? window.kp_tarif : '';
          ca = ao('wishlist_article', ca);
          var cc =
            '[protocol]//ads.heias.com/x/heias.ret.px.fr/?PX=HT|' +
            aI +
            '|n|' +
            bp.networkid +
            '|cus|' +
            bp.customerid +
            '|pb|1|wishlist_article|' +
            ca +
            '';
          if (b6) {
            cc = cc + '|order_tariff|' + b6;
          }
          var b8 = O(cc);
          b8 = W(b8);
          cc = a6(cc, b8);
          S(cc);
        } else {
          if (
            b1 == 'shoppingcart' &&
            (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1))
          ) {
            var b2 = window.kp_shoppingcart_product_ids;
            var b6 = window.kp_tarif ? window.kp_tarif : '';
            b2 = ao('order_article', b2);
            var cc =
              '[protocol]//ads.heias.com/x/heias.ret.px.fr/?PX=HT|' +
              aI +
              '|n|' +
              bp.networkid +
              '|cus|' +
              bp.customerid +
              '|pb|1|order_article|' +
              b2 +
              '';
            if (b6) {
              cc = cc + '|order_tariff|' + b6;
            }
            var b8 = O(cc);
            b8 = W(b8);
            cc = a6(cc, b8);
            S(cc);
          } else {
            if (
              b1 == 'productdetail' &&
              (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1))
            ) {
              var w = window.kp_product_category_id
                ? kp_product_category_id
                : '';
              var b9 = window.kp_product_brand ? kp_product_brand : '';
              var b4 = window.kp_product_id ? window.kp_product_id : '';
              var b3 = window.kp_recommended_product_ids
                ? window.kp_recommended_product_ids
                : '';
              var b6 = window.kp_tarif ? window.kp_tarif : '';
              if (!b4) {
                bK('kp_product_id is not defined for site ' + b1);
              }
              if (!b3) {
                bK('kp_recommended_product_ids is not defined for site ' + b1);
              }
              if (!w) {
                bK('kp_product_category_id is not defined for site ' + b1);
              }
              if (!b9) {
                bK('kp_product_brand is not defined for site ' + b1);
              }
              w = ao('shop_id', w);
              b9 = ao('product_brand', b9);
              b4 = ao('product_id', b4);
              b3 = ao('shop_trackingproducts', b3);
              var cc =
                '[protocol]//ads.heias.com/x/heias.ret.px.fr/?PX=HT|' +
                aI +
                '|n|' +
                bp.networkid +
                '|cus|' +
                bp.customerid +
                '|pb|1|shop_id|' +
                w +
                '|product_brand|' +
                b9 +
                '|product_id|' +
                b4 +
                '|shop_trackingproducts|' +
                b3 +
                '';
              if (b6) {
                cc = cc + '|order_tariff|' + b6;
              }
              var b8 = O(cc);
              b8 = W(b8);
              cc = a6(cc, b8);
              S(cc);
            } else {
              if (
                b1 == 'category' &&
                (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1))
              ) {
                var w = window.kp_category_id ? kp_category_id : '';
                var b6 = window.kp_tarif ? window.kp_tarif : '';
                w = ao('shop_id', w);
                var cc =
                  '[protocol]//ads.heias.com/x/heias.ret.px.fr/?PX=HT|' +
                  aI +
                  '|n|' +
                  bp.networkid +
                  '|cus|' +
                  bp.customerid +
                  '|pb|1|shop_id|' +
                  w +
                  '';
                if (b6) {
                  cc = cc + '|order_tariff|' + b6;
                }
                var b8 = O(cc);
                b8 = W(b8);
                cc = a6(cc, b8);
                S(cc);
              } else {
                if (
                  b1 == 'startpage' &&
                  (a8(bp.profilingsites, b1) || bP(bp.profilingsites, b1))
                ) {
                  var b6 = window.kp_tarif ? window.kp_tarif : '';
                  var cc =
                    '[protocol]//ads.heias.com/x/heias.ret.px.fr/?PX=HT|' +
                    aI +
                    '|n|' +
                    bp.networkid +
                    '|cus|' +
                    bp.customerid +
                    '|pb|1|shop_id|';
                  if (b6) {
                    cc = cc + '|order_tariff|' + b6;
                  }
                  var b8 = O(cc);
                  b8 = W(b8);
                  cc = a6(cc, b8);
                  S(cc);
                }
              }
            }
          }
        }
      }
      if (bL('AfterHeiasPixelLoad')) {
        ap('AfterHeiasPixelLoad');
      }
    }
    function S(w) {
      w = w.replace(/\[protocol\]/g, au);
      if (bp.loadingtype == 'test') {
        document.write(
          '<div id="px_div_' +
            aI +
            '" style="position: absolute; left:0; top:0; width:0px; height:0px;"><iframe id="px_fr_' +
            aI +
            '" name="px_fr_' +
            aI +
            '" src="' +
            w +
            '" allowtransparency="true" framespacing="0" frameborder="no" scrolling="no" width="1" height="1"></iframe></div>',
        );
      } else {
        document.write(
          '<div id="px_div_' +
            aI +
            '" style="position: absolute; left:0; top:0; width:0px; height:0px;"><iframe id="px_fr_' +
            aI +
            '" name="px_fr_' +
            aI +
            '" src="' +
            w +
            '" allowtransparency="true" framespacing="0" frameborder="no" scrolling="no" width="1" height="1"></iframe></div>',
        );
      }
      D('heias profiling pixel: ' + w);
      bm('heias ppx', 'script', w, bp.customerid, bx, l);
    }
    function af(b9, cj) {
      if (
        bp.manufacturerLoadAdserverPixel == 1 &&
        window.kp_rule_publisher_ids !== null &&
        window.kp_rule_publisher_ids.length == 0 &&
        b9 !== 'orderconfirmation'
      ) {
        return;
      }
      if (typeof cj == 'undefined') {
        cj = false;
      }
      if (cj) {
        bZ = [];
      }
      if (bZ.length > 0) {
        return bZ;
      }
      if (bL('BeforeNeoryParams')) {
        ap('BeforeNeoryParams');
      }
      var b4 = !aK && !s;
      bZ.push(
        ['version', '1'],
        ['a', bp.customeridNeory],
        ['cat', bp.customerfeedidNeory],
      );
      if (b9 == 'orderconfirmation') {
        bZ.push(['event', 'transaction']);
        var ci = window.kp_order_product_ids ? kp_order_product_ids : '';
        var b7 = window.kp_order_product_quantities
          ? kp_order_product_quantities
          : '';
        var ck = window.kp_order_product_values ? kp_order_product_values : '';
        ci = ci.split(',');
        b7 = b7.split(',');
        ck = ck.split(',');
        var w = [];
        for (var cf = 0, cd = ci.length; cf < cd; cf++) {
          ci[cf] = encodeURIComponent(ci[cf]);
          w.push(
            (typeof b7[cf] !== 'undefined' && b7[cf] !== ''
              ? b7[cf] + ','
              : '') + ci[cf],
          );
        }
        bZ.push(['items', w.join('|')]);
      } else {
        if (
          b9 == 'wishlist' &&
          (a8(bp.profilingsitesNeory, b9) ||
            bP(bp.profilingsitesNeory, b9) ||
            b4)
        ) {
        } else {
          if (
            b9 == 'shoppingcart' &&
            (a8(bp.profilingsitesNeory, b9) ||
              bP(bp.profilingsitesNeory, b9) ||
              b4)
          ) {
            var b6 = window.kp_shoppingcart_product_ids
              ? kp_shoppingcart_product_ids
              : '';
            var b5 = window.kp_shoppingcart_product_quantities
              ? kp_shoppingcart_product_quantities
              : '';
            var b1 = window.kp_shoppingcart_product_values
              ? kp_shoppingcart_product_values
              : '';
            b6 = b6.split(',');
            b5 = b5.split(',');
            b1 = b1.split(',');
            var cb = [];
            for (var cf = 0, cd = b6.length; cf < cd; cf++) {
              b6[cf] = encodeURIComponent(b6[cf]);
              cb.push(
                (typeof b5[cf] !== 'undefined' && b5[cf] !== ''
                  ? b5[cf] + ','
                  : '') + b6[cf],
              );
            }
            bZ.push(['event', 'basket']);
            bZ.push(['items', cb.join('|')]);
          } else {
            if (
              b9 == 'productdetail' &&
              (a8(bp.profilingsitesNeory, b9) ||
                bP(bp.profilingsitesNeory, b9) ||
                b4)
            ) {
              var b2 = window.kp_product_category_id
                ? kp_product_category_id
                : '';
              var b8 = window.kp_product_id ? window.kp_product_id : '';
              b2 = encodeURIComponent(b2);
              b8 = encodeURIComponent(b8);
              bZ.push(['event', 'view']);
              bZ.push(['items', b8]);
              bZ.push(['segment', b2]);
            } else {
              if (
                b9 == 'category' &&
                (a8(bp.profilingsitesNeory, b9) ||
                  bP(bp.profilingsitesNeory, b9) ||
                  b4)
              ) {
                var b2 = window.kp_category_id ? kp_category_id : '';
                b2 = encodeURIComponent(b2);
                bZ.push(['event', 'view']);
                bZ.push(['segment', b2]);
              } else {
                if (
                  b9 == 'startpage' &&
                  (a8(bp.profilingsitesNeory, b9) ||
                    bP(bp.profilingsitesNeory, b9) ||
                    b4)
                ) {
                  bZ.push(['event', 'view']);
                } else {
                  if (
                    window.kp_site &&
                    (a8(bp.profilingsitesNeory, window.kp_site) ||
                      bP(bp.profilingsitesNeory, window.kp_site) ||
                      b4)
                  ) {
                    var b2 = window.kp_category_id
                      ? window.kp_category_id
                      : window.kp_product_category_id
                        ? window.kp_product_category_id
                        : '';
                    var b8 = window.kp_product_id ? window.kp_product_id : '';
                    var ci = window.kp_order_product_ids
                      ? kp_order_product_ids
                      : '';
                    var b7 = window.kp_order_product_quantities
                      ? kp_order_product_quantities
                      : '';
                    var ck = window.kp_order_product_values
                      ? kp_order_product_values
                      : '';
                    var b6 = window.kp_shoppingcart_product_ids
                      ? kp_shoppingcart_product_ids
                      : '';
                    var b5 = window.kp_shoppingcart_product_quantities
                      ? kp_shoppingcart_product_quantities
                      : '';
                    var b1 = window.kp_shoppingcart_product_values
                      ? kp_shoppingcart_product_values
                      : '';
                    var ce = 'view';
                    var ca = '';
                    if (ci !== '') {
                      ce = 'transaction';
                      ci = ci.split(',');
                      b7 = b7.split(',');
                      ck = ck.split(',');
                      var w = [];
                      for (var cf = 0, cd = ci.length; cf < cd; cf++) {
                        ci[cf] = encodeURIComponent(ci[cf]);
                        w.push(
                          (typeof b7[cf] !== 'undefined' && b7[cf] !== ''
                            ? b7[cf] + ','
                            : '') + ci[cf],
                        );
                      }
                      ca = w.join('|');
                    } else {
                      if (b6 !== '') {
                        ce = 'basket';
                        b6 = b6.split(',');
                        b5 = b5.split(',');
                        b1 = b1.split(',');
                        var cb = [];
                        for (var cf = 0, cd = b6.length; cf < cd; cf++) {
                          b6[cf] = encodeURIComponent(b6[cf]);
                          cb.push(
                            (typeof b5[cf] !== 'undefined' && b5[cf] !== ''
                              ? b5[cf] + ','
                              : '') + b6[cf],
                          );
                        }
                        ca = cb.join('|');
                      } else {
                        ca = encodeURIComponent(b8);
                      }
                    }
                    b2 = encodeURIComponent(b2);
                    bZ.push(['event', ce]);
                    bZ.push(['items', ca]);
                    bZ.push(['segment', b2]);
                  }
                }
              }
            }
          }
        }
      }
      if (
        bF &&
        ((typeof H.manufacturer !== 'undefined' && H.manufacturer.length > 0) ||
          (typeof H.relatedCampaigns !== 'undefined' &&
            H.relatedCampaigns.length > 0))
      ) {
        var b3 = [];
        b3.push('kp_' + bp.customerid);
        if (
          typeof H.manufacturer !== 'undefined' &&
          H.manufacturer.length > 0
        ) {
          for (var cg in H.manufacturer) {
            var cc = H.manufacturer[cg];
            if (typeof cc == 'function') {
              continue;
            }
            cc = encodeURIComponent(cc);
            b3.push('kp_' + bp.customerid + '_' + cc);
          }
        }
        if (
          typeof H.relatedCampaigns !== 'undefined' &&
          H.relatedCampaigns.length > 0
        ) {
          for (var cg in H.relatedCampaigns) {
            var ch = H.relatedCampaigns[cg];
            if (typeof ch == 'function') {
              continue;
            }
            ch = encodeURIComponent(ch);
            b3.push('kp_' + bp.customerid + '_' + ch);
          }
        }
        b3 = f(b3, 1);
        if (b3.length) {
          var b2 = ae('segment', null, true);
          bZ.push([
            'segment',
            (b2 !== null && b2 !== '' ? [b2] : []).concat(b3).join('|'),
          ]);
        }
      }
      if (bL('AfterNeoryParams')) {
        ap('AfterNeoryParams', bZ);
      }
    }
    function ae(b6, b1, w) {
      if (typeof b1 == 'undefined') {
        b1 = null;
      }
      if (typeof w == 'undefined') {
        w = false;
      }
      var b3 = bZ.filter(function (b7) {
        return b7[0] == b6;
      });
      var b2 = b3.length > 0 ? b3[0][1] : b1;
      if (w) {
        var b5 = n(b6);
        if (b5 !== -1) {
          var b4 = bZ.splice(b5, 1);
        }
      }
      return b2;
    }
    function n(b1) {
      var w = bZ.findIndex(function (b2) {
        return typeof b2 !== 'undefined' && b2[0] == b1;
      });
      return w;
    }
    function i(w) {
      if (
        bp.manufacturerLoadAdserverPixel == 1 &&
        window.kp_rule_publisher_ids !== null &&
        window.kp_rule_publisher_ids.length == 0 &&
        w !== 'orderconfirmation'
      ) {
        return;
      }
      if (typeof kp_opt_allowed_vendor_partners != 'undefined' && !ah()) {
        return;
      }
      if (bL('BeforeNeoryPixelLoad')) {
        ap('BeforeNeoryPixelLoad');
      }
      if (a8(bp.profilingsitesNeory, w) || bP(bp.profilingsitesNeory, w)) {
        var b1 = Math.random() * 10000000000000000;
        var b5 = ae('a', '');
        var b9 = ae('version', '1');
        var cb = window.kp_feed_id || ae('cat', '');
        var ce = ae('event', 'view');
        var b6 = ae('items', '');
        var cc = ae('segment', '');
        var b2 = ae('gdpr', '-1');
        var b3 = ae('gdpr_consent', '');
        if (b5 > 0) {
          var b4 = document.createElement('iframe');
          b4.id = 'tp_rtrgt_iframe_' + b1;
          b4.allowtransparency = 'true';
          b4.framespacing = '0';
          b4.frameborder = '0';
          b4.scrolling = 'no';
          b4.width = '0';
          b4.height = '0';
          if (typeof kp_gdpr_params !== 'undefined' && kp_gdpr_params) {
            b2 = kp_gdpr;
            b3 = kp_gdpr_consent;
          } else {
            b2 = '0';
          }
          var b8 =
            'https://ad.ad-srv.net/retarget?a=' +
            b5 +
            '&version=' +
            b9 +
            '&event=' +
            ce +
            '&cat=' +
            cb;
          b8 += '&gdpr=' + b2;
          b8 += '&gdpr_consent=' + b3;
          b8 += '&segment=' + cc;
          b8 += '&items=' + b6;
          if (bp.neoryPixelType == 'image') {
            b8 += '&mode=img';
            var b7 = '<img src="' + b8 + '" width="1" height="1" />';
            if ('srcdoc' in b4) {
              b4.srcdoc = b7;
            } else {
              b7 = b7.replace(/"/g, '\\"');
              var cd =
                'javascript:(function(){document.open();document.domain="' +
                document.domain +
                '";document.write("' +
                b7 +
                '");document.close();})();';
              b4.src = cd;
            }
          } else {
            b4.src = b8;
          }
          if (!document.body) {
            document.firstChild.appendChild(document.createElement('body'));
          }
          var ca = document.getElementById('tp_rtrgt_div_' + b1);
          if (ca === null) {
            ca = document.createElement('div');
            ca.id = 'tp_rtrgt_div_' + b1;
            ca.innerHTML = '';
            ca.style.visibility = 'hidden';
            ca.style.display = 'none';
            ca.style.position = 'absolute';
            ca.style.left = '0px';
            ca.style.top = '0px';
            ca.style.width = '1px';
            ca.style.height = '1px';
            ca.style.border = '0';
            (aM() || document.body).appendChild(ca);
          }
          ca.appendChild(b4);
        }
      }
      if (bL('AfterNeoryPixelLoad')) {
        ap('AfterNeoryPixelLoad');
      }
    }
    function bj(w) {
      if (
        bp.manufacturerLoadAdserverPixel == 1 &&
        window.kp_rule_publisher_ids !== null &&
        window.kp_rule_publisher_ids.length == 0 &&
        w !== 'orderconfirmation'
      ) {
        return;
      }
      if (typeof kp_opt_allowed_vendor_partners != 'undefined' && !ah()) {
        return;
      }
      if (bL('BeforeNeoryPixelLoad')) {
        ap('BeforeNeoryPixelLoad');
      }
      var b1 = Math.random() * 10000000000000000;
      var b2 = ae('a', '');
      var b5 = ae('version', '1');
      var b6 = window.kp_feed_id || ae('cat', '');
      var b8 = ae('event', 'view');
      var b3 = ae('items', '');
      var b7 = ae('segment', '');
      if (b2 > 0) {
        var b4 =
          'https://ad.ad-srv.net/retarget?a=' +
          b2 +
          '&version=' +
          b5 +
          '&event=' +
          b8 +
          '&cat=' +
          b6;
        b4 += '&segment=' + b7;
        b4 += '&items=' + b3;
        if (bp.neoryPixelType == 'image') {
          b4 += '&mode=img';
        }
        a7(b4);
      }
      if (bL('AfterNeoryPixelLoad')) {
        ap('AfterNeoryPixelLoad');
      }
    }
    function a7(b2) {
      b2 = b2.replace(/\[protocol\]/g, au);
      var b1 = Math.random() * 10000000000000000;
      var w = b2;
      document.write(
        '<div id="tp_rtrgt_div_' +
          b1 +
          '" style="position:absolute; visibility:hidden; left:0px; top:0px; width:1px; height:1px; border:0"><iframe id="tp_rtrgt_iframe_' +
          b1 +
          '" name="tp_rtrgt_iframe_' +
          b1 +
          '" src="' +
          w +
          '" scrolling="no" width="1" height="1"></iframe></div>',
      );
    }
    function c(w, b1) {
      if (typeof b1 == 'undefined') {
        b1 = -1;
      }
      var b6 = window.kp_disable_marker ? kp_disable_marker : '';
      var b3 = window.kp_disable_demarker ? kp_disable_demarker : '';
      var b7 = window.kp_disable_optout ? kp_disable_optout : '';
      var b8 = window.kp_disable_urtracker ? kp_disable_urtracker : '';
      var b4 = window.kp_disable_relation_marker
        ? kp_disable_relation_marker
        : '';
      if (bL('BeforePiggybackParams')) {
        ap('BeforePiggybackParams');
      }
      for (var b2 in bp.piggybacks) {
        var b5 = bp.piggybacks[b2];
        if (typeof b5 == 'function') {
          continue;
        }
        if (bL('BeforePiggybackParam')) {
          b5 = ap('BeforePiggybackParam', b5, false);
        }
        if (
          (a8(b5.sites, w) || bP(b5.sites, w)) &&
          ((!b6 && b5.pbtype == 'marker') ||
            (!b3 && b5.pbtype == 'demarker') ||
            (!b7 && b5.pbtype == 'optout') ||
            (!b8 && b5.pbtype == 'urtracker') ||
            (!b4 && b5.pbtype == 'relation_marker'))
        ) {
          if (
            ((bO || T) && U && a8(b5.originType, 'advertiser_publisher')) ||
            (bF && ar && a8(b5.originType, 'manufacturer_publisher')) ||
            ((bO || T || bF) &&
              h &&
              (b5.pbtype == 'marker' ||
                b5.pbtype == 'demarker' ||
                b5.pbtype == 'optout') &&
              a8(b5.originType, 'advertiser')) ||
            (bF && t && a8(b5.originType, 'manufacturer')) ||
            ((bO || T || bF || aw) &&
              u &&
              b5.pbtype == 'urtracker' &&
              a8(b5.originType, 'advertiser')) ||
            (bF &&
              h &&
              b5.pbtype == 'relation_marker' &&
              a8(b5.originType, 'manufacturer_campaign')) ||
            ((bO || T || bF) &&
              h &&
              b5.pbtype == 'relation_marker' &&
              a8(b5.originType, 'advertiser'))
          ) {
            if (
              b1 === -1 ||
              (b1 === false && b5.restrictions === false) ||
              (b1 === true &&
                b5.restrictions === true &&
                a8(window.kp_rule_publisher_ids, b5.name.toString()))
            ) {
              if (bL('BeforePiggybackParam')) {
                b5 = ap('BeforePiggybackParam', b5, true);
              }
              if (bF && typeof b5.origin != 'undefined') {
                bn(b5.origin, 'manufacturer');
              }
              if (bL('AfterPiggybackParam')) {
                ap('AfterPiggybackParam', b5, true);
              }
            }
          }
        }
        if (bL('AfterPiggybackParam')) {
          ap('AfterPiggybackParam', b5, false);
        }
      }
      if (bF && typeof bp.relatedCampaigns != 'undefined') {
        bn(bp, 'relatedCampaigns');
      }
      if (bL('AfterPiggybackParams')) {
        ap('AfterPiggybackParams');
      }
    }
    function bl(b1, b2, cc) {
      if (typeof b2 == 'undefined') {
        b2 = -1;
      }
      if (typeof cc == 'undefined') {
        cc = -1;
      }
      var ca = window.kp_disable_marker ? kp_disable_marker : '';
      var b6 = window.kp_disable_demarker ? kp_disable_demarker : '';
      var cb = window.kp_disable_optout ? kp_disable_optout : '';
      var cd = window.kp_disable_urtracker ? kp_disable_urtracker : '';
      var b7 = window.kp_disable_relation_marker
        ? kp_disable_relation_marker
        : '';
      var b8 = [];
      b8.push(['timestamp', new Date().getTime()]);
      b8.push(['random', Math.random() * 10000000000000000000]);
      if (typeof window.kp_full_category_id !== 'undefined') {
        b8.push(['full_category', window.kp_full_category_id]);
      }
      if (typeof window.kp_product_category_id !== 'undefined') {
        b8.push(['product_category', window.kp_product_category_id]);
      }
      bD(b8);
      var b4 = 0;
      if (bL('BeforePiggybacksLoad')) {
        ap('BeforePiggybacksLoad');
      }
      D('load pigibacks for site ' + b1);
      for (var b3 in bp.piggybacks) {
        var b9 = bp.piggybacks[b3];
        if (typeof b9 == 'function') {
          continue;
        }
        if (bL('BeforePiggybackLoad')) {
          b9 = ap('BeforePiggybackLoad', b9, false);
        }
        if (typeof b9.uid != 'undefined' && aU(b9.uid)) {
          continue;
        }
        if (typeof kp_opt_allowed_vendor_partners != 'undefined' && !R(b9)) {
          continue;
        }
        if (
          (a8(b9.sites, b1) || bP(b9.sites, b1)) &&
          ((!ca && b9.pbtype == 'marker') ||
            (!b6 && b9.pbtype == 'demarker') ||
            (!cb && b9.pbtype == 'optout') ||
            (!cd && b9.pbtype == 'urtracker') ||
            (!b7 && b9.pbtype == 'relation_marker'))
        ) {
          if (
            (bO && U && a8(b9.originType, 'advertiser_publisher')) ||
            (bF && ar && a8(b9.originType, 'manufacturer_publisher')) ||
            ((bO || bF) &&
              h &&
              (b9.pbtype == 'marker' ||
                b9.pbtype == 'demarker' ||
                b9.pbtype == 'optout') &&
              a8(b9.originType, 'advertiser')) ||
            (bF && t && a8(b9.originType, 'manufacturer')) ||
            ((bO || bF || aw) &&
              u &&
              b9.pbtype == 'urtracker' &&
              a8(b9.originType, 'advertiser')) ||
            (bF &&
              h &&
              b9.pbtype == 'relation_marker' &&
              a8(b9.originType, 'manufacturer_campaign')) ||
            ((bO || bF) &&
              h &&
              b9.pbtype == 'relation_marker' &&
              a8(b9.originType, 'advertiser'))
          ) {
            if (
              b2 === -1 ||
              (b2 === false && b9.restrictions === false) ||
              (b2 === true &&
                b9.restrictions === true &&
                (a8(window.kp_rule_publisher_ids, b9.name.toString()) ||
                  !window.kp_get_rules))
            ) {
              if (cc === -1 || cc.indexOf(b3) !== -1) {
                if (bL('BeforePiggybackLoad')) {
                  b9 = ap('BeforePiggybackLoad', b9, true);
                }
                if (b9.httpOnly == true && au == 'https:') {
                  bK(
                    b9.name +
                      ' (' +
                      b9.pbtype +
                      ') skipped because of loading http content in https context',
                  );
                  return;
                }
                if (b9.url && b9.httpOnly == false) {
                  b9.url = b9.url.replace(/\[protocol\]/g, au);
                }
                var b5 = '';
                if (b9.content && (b9.httpOnly == false || au == 'http:')) {
                  b9.content = b9.content.replace(/\[protocol\]/g, au);
                  b5 = b9.content;
                }
                if (b9.url) {
                  b9.url = b9.url.replace(/\[id\]/g, bp.id);
                  b9.url = b9.url.replace(/\[heiasid\]/g, bp.customerid);
                  b9.url = b9.url.replace(/\[neoryid\]/g, bp.customeridNeory);
                  b9.url = b9.url.replace(/\[site\]/g, b1);
                  b9.url = P(b9.url);
                }
                if (b5) {
                  b5 = b5.replace(/\[id\]/g, bp.id);
                  b5 = b5.replace(/\[heiasid\]/g, bp.customerid);
                  b5 = b5.replace(/\[neoryid\]/g, bp.customeridNeory);
                  b5 = b5.replace(/\[site\]/g, b1);
                  b5 = P(b5);
                }
                var w = b9.name + ' ' + b9.pbtype;
                bf(
                  b9.url,
                  b9.type,
                  b9.name + '-' + b3,
                  w,
                  b5,
                  b9.timeout,
                  b9.loadingtype,
                  b9.fif,
                  aj,
                );
                b4++;
                if (bL('AfterPiggybackLoad')) {
                  ap('AfterPiggybackLoad', b9, true);
                }
              }
            }
          }
        }
        if (bL('AfterPiggybackLoad')) {
          ap('AfterPiggybackLoad', b9, false);
        }
      }
      if (b4 > 0) {
        window.KPMasterTag.KPConsentData.setData(
          'status',
          'loaded ' + (b2 ? 'restricted' : 'unrestricted') + ' piggybacks',
        );
      }
      if (bL('AfterPiggybacksLoad')) {
        ap('AfterPiggybacksLoad');
      }
    }
    function aT(b2, b3, b4) {
      if (typeof b3 == 'undefined') {
        b3 = -1;
      }
      if (typeof b4 == 'undefined') {
        b4 = -1;
      }
      var b6 = window.kp_disable_conversion ? kp_disable_conversion : '';
      var b9 = window.kp_disable_urtracker ? kp_disable_urtracker : '';
      var b1 = 0;
      if (bL('BeforeConversiontagsLoad')) {
        ap('BeforeConversiontagsLoad');
      }
      D('load conversiontags for site ' + b2);
      for (var b8 in bp.conversiontags) {
        var b7 = bp.conversiontags[b8];
        if (typeof b7 == 'function') {
          continue;
        }
        if (bL('BeforeConversiontagLoad')) {
          b7 = ap('BeforeConversiontagLoad', b7, false);
        }
        if (typeof b7.uid != 'undefined' && aU(b7.uid)) {
          continue;
        }
        if (typeof kp_opt_allowed_vendor_partners != 'undefined' && !R(b7)) {
          continue;
        }
        if (
          (a8(b7.sites, b2) || bP(b7.sites, b2)) &&
          ((!b6 && b7.cptype == 'conversion') ||
            (!b9 && b7.cptype == 'urtracker'))
        ) {
          if (
            ((bO || T) && aO && a8(b7.originType, 'advertiser_publisher')) ||
            (bF && aG && a8(b7.originType, 'manufacturer_publisher')) ||
            ((bO || T || bF) &&
              bz &&
              b7.cptype == 'conversion' &&
              a8(b7.originType, 'advertiser')) ||
            (bF && be && a8(b7.originType, 'manufacturer')) ||
            ((bO || T || bF || aw) &&
              bo &&
              b7.cptype == 'urtracker' &&
              a8(b7.originType, 'advertiser'))
          ) {
            if (
              b3 === -1 ||
              (b3 === false && b7.restrictions === false) ||
              (b3 === true && b7.restrictions === true)
            ) {
              if (b4 === -1 || b4.indexOf(b8) !== -1) {
                if (bL('BeforeConversiontagLoad')) {
                  b7 = ap('BeforeConversiontagLoad', b7, true);
                }
                if (b7.status == false) {
                  bK(b7.name + ' skipped because of status set to inactive');
                  continue;
                }
                var b5 = b7.content;
                if (b5) {
                  b5 = b5.replace(/\[order_id\]/g, kp_order_id);
                  b5 = b5.replace(/\[basket_value\]/g, kp_order_total);
                  b5 = b5.replace(/\[order_total\]/g, kp_order_total);
                  b5 = b5.replace(/\[order_article\]/g, kp_order_product_ids);
                  b5 = b5.replace(
                    /\[product_quantity\]/g,
                    kp_order_product_quantities,
                  );
                  b5 = b5.replace(
                    /\[product_value\]/g,
                    kp_order_product_values,
                  );
                  b5 = b5.replace(/\[id\]/g, bp.id);
                  b5 = b5.replace(/\[heiasid\]/g, bp.customerid);
                  b5 = b5.replace(/\[neoryid\]/g, bp.customeridNeory);
                  b5 = P(b5);
                }
                var w = b7.name;
                bf(
                  null,
                  b7.type,
                  b7.name + '-' + b8,
                  w,
                  b5,
                  0,
                  b7.loadingtype,
                  b7.fif,
                  aH,
                );
                b1++;
                if (bL('AfterConversiontagLoad')) {
                  ap('AfterConversiontagLoad', b7, true);
                }
              }
            }
          }
        }
        if (bL('AfterConversiontagLoad')) {
          ap('AfterConversiontagLoad', b7, false);
        }
      }
      if (b1 > 0) {
        window.KPMasterTag.KPConsentData.setData(
          'status',
          'loaded ' + (b3 ? 'restricted' : 'unrestricted') + ' conversiontags',
        );
      }
      if (bL('AfterConversiontagsLoad')) {
        ap('AfterConversiontagsLoad');
      }
    }
    function bE(w) {
      return ax(w, ['AR5701Q', 'AR5702Q', 'AR5703Q']);
    }
    function o(w) {
      return ax(w, ['AR571']);
    }
    function ax(b6, b3) {
      var b2 = [];
      for (var b5 in b6) {
        var b1 = b6[b5];
        if (typeof b1 == 'function') {
          continue;
        }
        if (typeof b1.uid !== 'undefined') {
          var b4 = null;
          for (var w in b3) {
            if (b1.uid.indexOf(b3[w]) != -1) {
              b4 = true;
              break;
            }
          }
          if (b4 !== null) {
            b2.push(b5);
          }
        }
      }
      return b2;
    }
    function bJ(w) {
      return Y(w, 'ad-srv.net');
    }
    function I(w) {
      return Y(w, 'adsrvr.org');
    }
    function bV(w) {
      return Y(w, 'adition.com');
    }
    function bY(w) {
      return Y(w, 'creative-serving.com');
    }
    function Y(b1, w) {
      var b2 = b1.url || b1.content;
      if (b2.indexOf(w) !== -1) {
        return true;
      }
      return false;
    }
    function ah() {
      return bs('Neory');
    }
    function z() {
      return bs('Tradedesk');
    }
    function Q() {
      return bs('Adition');
    }
    function bi() {
      return bs('Platform161');
    }
    function bs(w) {
      return true;
    }
    function R(w) {
      return true;
    }
    function bf(w, b6, b2, b1, b5, b8, b7, b3, b4) {
      if (b6 == 'image') {
        b5 = '<img src="' + w + '" width="1" height="1" />';
      } else {
        if (b6 == 'script') {
          if (b5) {
          } else {
            b5 = '<script src="' + w + '"></script>';
          }
        }
      }
      D(b1 + ' (' + b6 + '): ' + b5);
      bm(b1, b6, b5, bp.customerid, bx, b4);
      if (bp.loadingtype == 'test') {
        document.write('<div id="' + b2 + '" >' + b5 + '</div>');
      } else {
        if (bp.loadingtype == 'asynciframe' && b7 != 'asyncinline') {
          window.setTimeout(function () {
            ab(b5, '', b2, b8, b3);
          });
        } else {
          if (bp.loadingtype == 'asyncinline' || b7 == 'asyncinline') {
            window.setTimeout(function () {
              aV(b5, '', b2, b8, b3);
            });
          }
        }
      }
    }
    function ab(b7, w, b1, b9, b3) {
      if (bL('BeforePiggybackIFrameAddition')) {
        var b6 = ap('BeforePiggybackIFrameAddition', b7, w, b1, b9, b3);
        if (Array.isArray(b6) && b6.length == 5) {
          (b7 = b6[0]), (w = b6[1]), (b1 = b6[2]), (b9 = b6[3]), (b3 = b6[4]);
        }
      }
      b1 += '';
      var ca = b1 + '',
        b1 = b1.split('-').shift();
      var b4 = '';
      b7 = b7.replaceAll(bI, b4);
      var b5 = document.createElement('iframe');
      b5.id = 'kp' + ca;
      if (b3) {
        b5.classList.add('fif');
      }
      b5.allowtransparency = 'true';
      b5.framespacing = '0';
      b5.frameborder = '0';
      b5.scrolling = 'no';
      b5.width = '0';
      b5.height = '0';
      var b2 = 10000;
      if (typeof b9 == 'undefined') {
        b9 = b2;
      }
      var b9 =
        bp.timeout || b9
          ? Math.min(bp.timeout ? bp.timeout : b2, b9 ? b9 : b2)
          : b2;
      if (b9 < b2) {
        b5.startTime = new Date();
        b5.loopTime = setInterval(
          "var iframe = document.getElementById('" +
            b5.id +
            "'); var a = new Date()-iframe.startTime; if(a > " +
            b9 +
            "){if('srcdoc' in iframe) {iframe.srcdoc='';} else {iframe.src = 'about:blank';}clearInterval(iframe.loopTime);var iframeParent = iframe.parentNode;if(iframeParent) {iframeParent.removeChild(iframe);if('classList' in iframeParent) {iframeParent.classList.add('timeout');}}}",
          100,
        );
        b5.onload = function () {
          clearInterval(this.loopTime);
          var cc = this.parentNode;
          if (cc && 'classList' in cc) {
            cc.classList.add('loaded');
          }
        };
      } else {
        b5.onload = function () {
          var cc = this.parentNode;
          if (cc && 'classList' in cc) {
            cc.classList.add('loaded');
          }
        };
      }
      if (bL('BeforePiggybackIFrameSourceAddition')) {
        var b6 = ap('BeforePiggybackIFrameSourceAddition', b5, b7, w, b3);
        if (Array.isArray(b6) && b6.length == 4) {
          (b5 = b6[0]), (b7 = b6[1]), (w = b6[2]), (b3 = b6[3]);
        }
      }
      if (w) {
        b5.src = w;
      } else {
        if ('srcdoc' in b5) {
          if (b3) {
            b5.src = 'about:blank';
          }
          b5.srcdoc = b7;
        } else {
          b7 = b7.replace(/"/g, '\\"');
          var cb =
            'javascript:(function(){document.open();document.domain="' +
            document.domain +
            '";document.write("' +
            b7 +
            '");document.close();})();';
          b5.src = cb;
        }
      }
      if (bL('AfterPiggybackIFrameSourceAddition')) {
        ap('AfterPiggybackIFrameSourceAddition', b5);
      }
      if (!document.body) {
        document.firstChild.appendChild(document.createElement('body'));
      }
      var b8 = document.getElementById('kpdiv' + b1);
      if (b8 === null) {
        b8 = document.createElement('div');
        b8.id = 'kpdiv' + b1;
        b8.classList.add('iframe');
        b8.innerHTML = '';
        b8.style.visibility = 'hidden';
        b8.style.display = 'none';
        (aM() || document.body).appendChild(b8);
      }
      b8.appendChild(b5);
      if (bL('AfterPiggybackIFrameAddition')) {
        ap('AfterPiggybackIFrameAddition', b5, b8);
      }
    }
    function aV(ck, b4, ch, b9, ct) {
      ch += '';
      var w = ch + '',
        ch = ch.split('-').shift();
      if (bL('BeforePiggybackInlineAddition')) {
        var cm = ap('BeforePiggybackInlineAddition', ck, b4, ch, b9, ct);
        if (Array.isArray(cm) && cm.length == 5) {
          (ck = cm[0]), (b4 = cm[1]), (ch = cm[2]), (b9 = cm[3]), (ct = cm[4]);
        }
      }
      if (ck.indexOf(bI) == -1) {
        var b3 = /<([a-z]+)([^>]*)>([^<]*)(<\/\1>)?/g;
        var ci = ck;
        var b1;
        var b2 = 0;
        while ((b1 = b3.exec(ci)) !== null) {
          if (b1.length) {
            b2 += b1.length / 5;
          }
        }
        if (b2 > 1) {
          ab(ck, b4, w, b9, ct);
          return;
        }
      }
      var cp = '\n';
      ck = ck.replaceAll(bI, cp);
      var ca = ck.split('\n'),
        co = ca.map(function (cu) {
          return cu.trim();
        });
      var cq = false,
        cb = '',
        cd = 0,
        ce = [],
        cg;
      co.forEach(function (cC, cB) {
        cg = cB + 1;
        var cz = /^<(\/?)([a-zA-Z]+)(.*?)(%2|\/?)>$/m;
        var cy = cC;
        var cv;
        if ((cv = cz.exec(cy)) !== null) {
          if (cv.length == 5) {
            var cx = false,
              cw = false,
              cA = false,
              cu = '';
            switch (cv[1]) {
              case '/':
                cw = true;
                cA = true;
                break;
              case '':
                cx = true;
                break;
            }
            cu = cv[2];
            switch (cv[4]) {
              case '/':
              case cu:
                cA = true;
                cq = false;
                cb = '';
                break;
              case '':
                cq = true;
                cb = cu;
                break;
            }
            if (typeof ce[cd] == 'undefined') {
              ce[cd] = {
                tag_rows: [],
                tag_full: '',
                tag_name: '',
                tag_attributes: [],
                tag_content: '',
                tag_id: ad(8, 'kptag'),
                tag_dependencies: [],
              };
            }
            ce[cd]['tag_rows'].push(cC);
            ce[cd]['tag_name'] = cu;
            if (cA) {
              cd++;
            }
          }
        } else {
          ce[cd]['tag_rows'].push(cC);
          ce[cd]['tag_name'] = cb;
          ce[cd]['tag_content'] += cC + '\n';
        }
      });
      ce.forEach(function (cu, cw) {
        var cx = /^<[a-zA-Z]+ ?(.*?)\/?>/m;
        var cz = cu.tag_rows[0];
        var cy;
        if ((cy = cx.exec(cz)) !== null) {
          if (cy.length == 2) {
            if (cy[1]) {
              var cv = cy[1].split(' ');
              cv = cv.map(function (cB) {
                var cA = cB.split('=');
                return [
                  cA.shift(),
                  cA
                    .join('=')
                    .replace(/^["']?/, '')
                    .replace(/["']?$/, ''),
                ];
              });
              cu.tag_attributes = cv;
            }
          }
          cu.tag_full = cu.tag_rows.join('\n');
        }
        ce[cw] = cu;
      });
      var cc = [];
      ce.map(function (cv, cu) {
        if (cc.length) {
          cv.tag_dependencies = cc.slice();
        }
        if (
          cv.tag_name == 'script' &&
          cv.tag_attributes.flat().indexOf('src') != -1
        ) {
          cc.push(cv.tag_id);
        }
      });
      var cs = document.getElementById('kpdiv' + ch);
      if (cs === null) {
        cs = document.createElement('div');
        cs.id = 'kpdiv' + ch;
        cs.classList.add('inline');
        (aM() || document.body).append(cs);
      }
      var cr = document.createElement('div');
      cr.id = 'kp' + w;
      cr.classList.add('inline');
      cs.append(cr);
      var b6 = [],
        cn = [],
        b8 = {},
        cj = {},
        cl = 20,
        cf = [],
        b7 = [];
      var b5 = [
        'body',
        'embed',
        'iframe',
        'img',
        'link',
        'object',
        'script',
        'style',
        'track',
      ];
      if (bL('BeforePiggybackInlineTagsAddition')) {
        var cm = ap('BeforePiggybackInlineTagsAddition', ce, cr, cs, b5, cl);
        if (Array.isArray(cm) && cm.length == 5) {
          (ce = cm[0]), (cr = cm[1]), (cs = cm[2]), (b5 = cm[3]), (cl = cm[4]);
        }
      }
      ce.map(function (cv, cu) {
        var cw = cv.tag_dependencies.length ? 50 : 0;
        b8[cv.tag_id] = setInterval(function () {
          var cz = true;
          cv.tag_dependencies.map(function (cA) {
            if (cn.indexOf(cA) == -1) {
              cz = false;
            }
          });
          if (cz) {
            if (bL('BeforePiggybackInlineTagAddition')) {
              cv = ap('BeforePiggybackInlineTagAddition', cv);
            }
            clearInterval(b8[cv.tag_id]);
            delete b8[cv.tag_id];
            var cy = document.createElement(cv.tag_name);
            cy.id = cv.tag_id;
            cy.classList.add('kptag');
            cy.onload = function () {
              cn.push(this.id);
            };
            cy.onerror = function () {
              cf.push(this.id);
            };
            if (b5.indexOf(cv.tag_name) == -1) {
              b6.push(cv.tag_id);
            }
            if (cv.tag_attributes.length) {
              if (b5.indexOf(cv.tag_name) != -1) {
                if (
                  cv.tag_attributes.filter(function (cA) {
                    return cA[0] == 'src';
                  }).length == 0
                ) {
                  b6.push(cv.tag_id);
                }
              }
              cv.tag_attributes.map(function (cA) {
                cy.setAttribute(cA[0], cA[1]);
              });
            }
            if (cv.tag_content != '') {
              cy.innerHTML = cv.tag_content
                .trim()
                .replaceAll(
                  'document.write(',
                  'KPMasterTag.write(document.currentScript, ',
                );
            }
            var cx = document.createElement('div');
            cx.id = ad(8, 'kpwrpdiv');
            cx.classList.add('kpwrpdiv');
            cx.append(cy);
            cr.append(cx);
            if (bL('AfterPiggybackInlineTagAddition')) {
              ap('AfterPiggybackInlineTagAddition', cy, cx, cr, cs);
            }
          } else {
            cj[cv.tag_id] = cj[cv.tag_id] + 1 || 1;
            if (cj[cv.tag_id] >= cl) {
              clearInterval(b8[cv.tag_id]);
              delete b8[cv.tag_id];
              b7.push(cv.tag_id);
            }
          }
        }, cw);
      });
      if (bL('AfterPiggybackInlineTagsAddition')) {
        ap('AfterPiggybackInlineTagsAddition', ce, cr, cs, b8, b6, cn, cf, b7);
      }
      if (bL('AfterPiggybackInlineAddition')) {
        ap('AfterPiggybackInlineAddition', cr, cs, b8, b6, cn, cf, b7);
      }
    }
    function aM() {
      var b1 = 'kpdiv',
        w = document.getElementById(b1);
      if (w === null) {
        w = document.createElement('div');
        w.id = b1;
        w.innerHTML = '';
        w.style.visibility = 'hidden';
        w.style.display = 'none';
        document.body.appendChild(w);
      }
      return w;
    }
    function g(w) {
      if (bp.debug) {
        console.log(w);
      }
    }
    function D(w) {
      if (bp.debug) {
        console.info(w);
      }
    }
    function bN(w) {
      if (bp.debug) {
        console.error(w);
      }
    }
    function bK(w) {
      if (bp.debug) {
        console.warn(w);
      }
    }
    function bm(b2, b3, b5, b6, b1, b4) {
      if (bp.log) {
        if (typeof b4 == 'undefined') {
          b4 = bb;
        }
        if (a4 > 0 && (a4 & b4) > 0) {
          var w =
            br +
            '?name=' +
            escape(b2) +
            '&type=' +
            escape(b3) +
            '&value=' +
            escape(b5) +
            '&customer=' +
            escape(b6) +
            '&groupid=' +
            aI +
            '&site=' +
            escape(b1) +
            '&jobid=' +
            escape(m);
          w = w.replace(/\[protocol\]/g, au);
          var b7 = Math.random() * 10000000000000000000;
          ab('', w, 'kplog_' + b7);
        }
      }
    }
    function aL() {
      var w = '';
      w = 'https:';
      return w;
    }
    function bQ() {
      var w = '';
      if (window.kp_site) {
        w = window.kp_site;
      } else {
        if (window.kp_order_id) {
          w = 'orderconfirmation';
        } else {
          if (window.kp_wishlist_product_ids) {
            w = 'wishlist';
          } else {
            if (window.kp_shoppingcart_product_ids) {
              w = 'shoppingcart';
            } else {
              if (window.kp_product_id || window.kp_recommended_product_ids) {
                w = 'productdetail';
              } else {
                if (window.kp_category_id) {
                  w = 'category';
                } else {
                  w = 'startpage';
                }
              }
            }
          }
        }
      }
      return w;
    }
    function a8(b2, b1) {
      if (b2) {
        for (var w = 0; w < b2.length; w++) {
          if (b2[w] === b1) {
            return true;
          }
        }
      }
      return false;
    }
    function bP(b1, w) {
      return a8(b1, 'all') && !a8(bp.allexcludesites, w);
    }
    function F() {
      var w = true;
      if (typeof bp.loadHeiasPixel == 'undefined') {
        w = false;
      } else {
        w = bp.loadHeiasPixel;
        if (
          bp.loadHeiasPixel &&
          (bO || T || bF) &&
          typeof bp.manufacturerLoadAdserverPixel != 'undefined'
        ) {
          if (bp.manufacturerLoadAdserverPixel == 0) {
          } else {
            if (
              bp.manufacturerLoadAdserverPixel == 1 &&
              bp.piggybacks.length == 0 &&
              bx !== 'orderconfirmation'
            ) {
              w = false;
            }
          }
        }
      }
      return w;
    }
    function bk() {
      var w = true;
      if (
        typeof window.kp_load_neory_pixel != 'undefined' &&
        window.kp_load_neory_pixel === 0
      ) {
        w = false;
      } else {
        if (typeof bp.loadNeoryPixel == 'undefined') {
          w = false;
        } else {
          w = bp.loadNeoryPixel;
          if (
            bp.loadNeoryPixel &&
            (bO || T || bF) &&
            typeof bp.manufacturerLoadAdserverPixel != 'undefined'
          ) {
            if (bp.manufacturerLoadAdserverPixel == 0) {
            } else {
              if (
                bp.manufacturerLoadAdserverPixel == 1 &&
                bp.piggybacks.length == 0 &&
                bx !== 'orderconfirmation'
              ) {
                w = false;
              }
            }
          }
        }
      }
      return w;
    }
    function K() {
      var w = true;
      if (typeof bp.overwriteAdserverPixelSettings == 'undefined') {
        w = false;
      } else {
        w = bp.overwriteAdserverPixelSettings;
      }
      return w;
    }
    function ag(b1) {
      var w = false;
      if (typeof bp.skipGlobalLoadPiggybacksCheck == 'undefined') {
        w = false;
      } else {
        if (typeof bp.skipGlobalLoadPiggybacksCheck == 'boolean') {
          if (typeof b1 == 'undefined' || (typeof b1 == 'number' && b1 > 0)) {
            w = bp.skipGlobalLoadPiggybacksCheck;
          }
        } else {
          if (typeof bp.skipGlobalLoadPiggybacksCheck == 'string') {
            if (
              typeof b1 == 'number' &&
              b1 >= 0 &&
              b1 < bp.skipGlobalLoadPiggybacksCheck.length
            ) {
              w = !!parseInt(bp.skipGlobalLoadPiggybacksCheck.substr(b1, 1));
            }
          }
        }
      }
      return w;
    }
    function aE(b1) {
      if (typeof b1 == 'undefined') {
        b1 = 0;
      }
      var w = true;
      if (typeof bp.loadPiggybacks == 'undefined') {
        w = false;
      } else {
        if (b1 > 0 && ag(b1) == true) {
          w = true;
        } else {
          w =
            F() == true || bk() == true || K() == true
              ? bp.loadPiggybacks
              : false;
        }
      }
      return w;
    }
    function ai() {
      var w = true;
      if (typeof bp.loadAdvertiserPiggybacks == 'undefined') {
        w = false;
      } else {
        w = ag() == true || aE() == true ? bp.loadAdvertiserPiggybacks : false;
      }
      return w;
    }
    function aB() {
      var w = true;
      if (typeof bp.loadAdvertiserPublisherPiggybacks == 'undefined') {
        w = false;
      } else {
        w = aE() == true ? bp.loadAdvertiserPublisherPiggybacks : false;
      }
      return w;
    }
    function b() {
      var w = true;
      if (typeof bp.loadManufacturerPiggybacks == 'undefined') {
        w = false;
      } else {
        w = aE() == true ? bp.loadManufacturerPiggybacks : false;
      }
      return w;
    }
    function a5() {
      var w = true;
      if (typeof bp.loadManufacturerPublisherPiggybacks == 'undefined') {
        w = false;
      } else {
        w = aE() == true ? bp.loadManufacturerPublisherPiggybacks : false;
      }
      return w;
    }
    function bU() {
      var w = true;
      if (typeof bp.loadUrtrackerPiggybacks == 'undefined') {
        w = false;
      } else {
        w = aE() == true ? bp.loadUrtrackerPiggybacks : false;
      }
      return w;
    }
    function M() {
      var w = true;
      if (typeof bp.loadConversiontags == 'undefined') {
        w = false;
      } else {
        w = bp.loadConversiontags;
      }
      return w;
    }
    function ac() {
      var w = true;
      if (typeof bp.loadAdvertiserConversiontags == 'undefined') {
        w = false;
      } else {
        w = M() == true ? bp.loadAdvertiserConversiontags : false;
      }
      return w;
    }
    function a3() {
      var w = true;
      if (typeof bp.loadAdvertiserPublisherConversiontags == 'undefined') {
        w = false;
      } else {
        w = M() == true ? bp.loadAdvertiserPublisherConversiontags : false;
      }
      return w;
    }
    function a0() {
      var w = true;
      if (typeof bp.loadManufacturerConversiontags == 'undefined') {
        w = false;
      } else {
        w = M() == true ? bp.loadManufacturerConversiontags : false;
      }
      return w;
    }
    function av() {
      var w = true;
      if (typeof bp.loadManufacturerPublisherConversiontags == 'undefined') {
        w = false;
      } else {
        w = M() == true ? bp.loadManufacturerPublisherConversiontags : false;
      }
      return w;
    }
    function j() {
      var w = true;
      if (typeof bp.loadUrtrackerConversiontags == 'undefined') {
        w = false;
      } else {
        w = M() == true ? bp.loadUrtrackerConversiontags : false;
      }
      return w;
    }
    function aZ() {
      var w = true;
      if (typeof bp.loadQPixelAutonomously == 'undefined') {
        w = false;
      } else {
        w = bp.loadQPixelAutonomously;
      }
      return w;
    }
    function aS() {
      var w = true;
      if (typeof bp.loadFBPixelAutonomously == 'undefined') {
        w = false;
      } else {
        w = bp.loadFBPixelAutonomously;
      }
      return w;
    }
    function bv() {
      var w = true;
      if (typeof bp.hasQPixel == 'undefined') {
        w = false;
      } else {
        w = bp.hasQPixel;
      }
      return w;
    }
    function bG() {
      var w = true;
      if (typeof bp.hasFBPixel == 'undefined') {
        w = false;
      } else {
        w = bp.hasFBPixel;
      }
      return w;
    }
    function aF() {
      var w = false;
      if (typeof bp.loadOnValidProductIdOnly == 'undefined') {
        w = false;
      } else {
        w = bp.loadOnValidProductIdOnly;
      }
      return w;
    }
    function bM() {
      var w = true;
      if (typeof bp.logtype == 'undefined') {
        w = 0;
      } else {
        w = bp.logtype;
      }
      return w;
    }
    function a9() {
      var w = '';
      if (typeof bp.jobid == 'undefined') {
        w = '';
      } else {
        w = bp.jobid;
      }
      return w;
    }
    function bD(b1) {
      var b5 = [];
      if (!(typeof b1 == 'undefined')) {
        var w = ['ssl', 'n', 'cus', 'pb', 'type'];
        var b8 = { shop_id: 'category', product_brand: 'brand' };
        for (var b4 = 0; b4 < b1.length; b4++) {
          if (!a8(w, b1[b4][0])) {
            var b6 =
              typeof b8[b1[b4][0]] !== 'undefined' ? b8[b1[b4][0]] : b1[b4][0];
            var b7 = b1[b4][1];
            var b2 = -1;
            for (var b3 = 0; b3 < X.length; b3++) {
              if (X[b3][0] == b6) {
                b2 = b3;
                break;
              }
            }
            if (b2 == -1) {
              X.push([b6, b7]);
            } else {
              if (X[b2][1] !== b7) {
                X[b2][1] = b7;
              }
            }
          }
        }
      }
    }
    function P(b2) {
      if (b2) {
        if (X.length > 0) {
          var w = b2.indexOf('.encoded]') != -1 ? true : false;
          var b3 = b2.indexOf('.decoded]') != -1 ? true : false;
          for (var b1 = 0; b1 < X.length; b1++) {
            b2 = b2.replace(
              new RegExp('\\[' + X[b1][0] + '\\]', 'g'),
              X[b1][1],
            );
            if (w) {
              b2 = b2.replace(
                new RegExp('\\[' + X[b1][0] + '.encoded\\]', 'g'),
                encodeURIComponent(X[b1][1]),
              );
            }
            if (b3) {
              b2 = b2.replace(
                new RegExp('\\[' + X[b1][0] + '.decoded\\]', 'g'),
                encodeURIComponent(X[b1][1]),
              );
            }
          }
        }
      }
      return b2;
    }
    function bT() {
      var w = 'kp_';
      if (typeof window.kp_prefix != 'undefined') {
        w = window.kp_prefix;
      }
      return w;
    }
    function aC() {
      var w = [];
      if (typeof window.kp_prefix_heias_params != 'undefined') {
        w = window.kp_prefix_heias_params.split('|');
      }
      return w;
    }
    function aa() {
      return !!am.length;
    }
    function ao(b1, w) {
      if (
        typeof b1 != 'undefined' &&
        x &&
        !a8(aX, b1) &&
        a8(am, b1) &&
        w.indexOf(bH) != 0
      ) {
        w = bH + w;
      }
      return w;
    }
    function e(b1) {
      if (typeof b1 == 'object' && b1.length && x) {
        for (var w in b1) {
          b1[w][1] = ao(b1[w][0], b1[w][1]);
        }
      }
      return b1;
    }
    function aR() {
      var w = [];
      if (typeof window.kp_skip_heias_params != 'undefined') {
        w = window.kp_skip_heias_params.split('|');
      }
      return w;
    }
    function N() {
      return !!bX.length;
    }
    function bd(w) {
      return typeof w != 'undefined' && B && !a8(k, w) && a8(bX, w);
    }
    function W(b2) {
      if (typeof b2 == 'object' && b2.length && B) {
        var b1 = [];
        for (var w in b2) {
          if (!bd(b2[w][0])) {
            b1.push([b2[w][0], b2[w][1]]);
          }
        }
        b2 = b1;
        delete b1;
      }
      return b2;
    }
    function O(w) {
      var b4 = w.split('=');
      var b5 = b4.length ? b4.length - 1 : 0;
      var b2 = b4[b5].split('|');
      var b3 = [];
      for (var b1 = 0; b1 < b2.length; b1 = b1 + 2) {
        b3.push([b2[b1], b2[b1 + 1]]);
      }
      return b3;
    }
    function a6(w, b3) {
      var b2 = w.split('=');
      var b4 = b2.length ? b2.length - 1 : 0;
      aA = [];
      for (var b1 in b3) {
        aA.push(b3[b1][0]);
        aA.push(b3[b1][1]);
      }
      b2[b4] = aA.join('|');
      w = b2.join('=');
      return w;
    }
    function r() {
      var w = true;
      if (typeof bp.isAdvertiser == 'undefined') {
        w = false;
      } else {
        w = bp.isAdvertiser;
      }
      return w;
    }
    function bg() {
      var w = true;
      if (typeof bp.isRetargeting == 'undefined') {
        w = false;
      } else {
        w = bp.isRetargeting;
      }
      return w;
    }
    function aP() {
      var w = true;
      if (typeof bp.isRebounce == 'undefined') {
        w = false;
      } else {
        w = bp.isRebounce;
      }
      return w;
    }
    function bA() {
      var w = true;
      if (typeof bp.isProfileProvider == 'undefined') {
        w = false;
      } else {
        w = bp.isProfileProvider;
      }
      return w;
    }
    function al() {
      var w = true;
      if (typeof bp.isManufacturer == 'undefined') {
        w = false;
      } else {
        w = bp.isManufacturer;
      }
      return w;
    }
    function J() {
      var w = '';
      if (typeof bp.ruleQueries !== 'undefined') {
        w = bp.ruleQueries;
      }
      return w;
    }
    function bn(w, b2) {
      if (typeof b2 == 'undefined') {
        b2 = 'all';
      }
      if (typeof w !== 'undefined' && typeof w[b2] !== 'undefined') {
        if (typeof H[b2] == 'undefined') {
          H[b2] = [];
        }
        for (var b1 = 0; b1 < w[b2].length; b1++) {
          if (!a8(H[b2], w[b2][b1])) {
            H[b2].push(w[b2][b1]);
          }
        }
      }
    }
    function ay(b3) {
      for (
        var b1, w, b2 = b3.length;
        b2;
        b1 = Math.floor(Math.random() * b2),
          w = b3[--b2],
          b3[b2] = b3[b1],
          b3[b1] = w
      ) {}
      return b3;
    }
    function f(b3, w, b2) {
      var b1 = typeof b2 == 'undefined' ? b3.length : b2;
      b3 = b3
        .slice(0, w)
        .concat(ay(b3.slice(w, b2)))
        .concat(b3.slice(b1));
      return b3;
    }
    function C(b2, b4) {
      if (typeof b2 == 'undefined') {
        b2 = false;
      }
      if (typeof b4 == 'undefined') {
        b4 = b2 ? 255 : 0;
      }
      var b1 = false;
      for (var b5 in bp.piggybacks) {
        var w = bp.piggybacks[b5];
        if (typeof w == 'function') {
          continue;
        }
        if (w.restrictions === false) {
          if (
            (w.url && w.url.indexOf('[full_category]') !== -1) ||
            (w.content && w.content.indexOf('[full_category]') !== -1)
          ) {
            a1 = true;
            b1 = true;
            break;
          }
        }
      }
      for (var b5 in bp.conversiontags) {
        var b3 = bp.conversiontags[b5];
        if (typeof b3 == 'function') {
          continue;
        }
        if (b3.restrictions === false) {
          if (
            (b3.url && b3.url.indexOf('[full_category]') !== -1) ||
            (b3.content && b3.content.indexOf('[full_category]') !== -1)
          ) {
            v = true;
            b1 = true;
            break;
          }
        }
      }
      if (b2 && b4 > 0) {
        if (b4 == 1) {
          return b1;
        } else {
          if (b4 == 255) {
            return a1 || v;
          }
        }
      }
    }
    function aU(b2) {
      var w = false;
      if (
        typeof window.kp_opt_piggyback_opts != 'undefined' &&
        window.kp_opt_piggyback_opts != null
      ) {
        for (var b1 in window.kp_opt_piggyback_opts) {
          if (b2.indexOf(window.kp_opt_piggyback_opts[b1]) != -1) {
            w = true;
            break;
          }
        }
      }
      return w;
    }
    function ad(b3, b4) {
      var b1 = '';
      if (typeof b4 == 'undefined') {
        b4 = '';
      }
      b1 += b4;
      var w = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      var b5 = w.length;
      var b2 = 0;
      while (b2 < b3) {
        b1 += w.charAt(Math.floor(Math.random() * b5));
        b2 += 1;
      }
      return b1;
    }
    this.write = function (b4, b3, b5, b1) {
      var w = [1, 2];
      if (typeof b4 == 'undefined' || b4 == null || b4 == false) {
        b4 = document.currentScript;
      }
      if (typeof b3 == 'undefined' || b3 == '') {
        b3 = undefined;
      }
      if (typeof b5 == 'undefined' || w.indexOf() == -1) {
        b5 = 2;
      }
      if (typeof b1 == 'undefined' || b1 == '') {
        b1 = 'div';
      }
      if (typeof b3 != 'undefined') {
        var b2 = document.createElement(b1);
        b2.id = ad(8, 'kpdocwrt');
        b2.classList.add('kpdocwrt');
        b4.after(b2);
        if (b5 == 1) {
          b2.outerHTML = b3;
        } else {
          if (b5 == 2) {
            b2.innerHTML = b3;
          }
        }
      }
    };
    function ap() {
      var b1 = Array.prototype.slice.call(arguments);
      b1.unshift(KPMasterTag);
      var w = null;
      w = bR.apply(b1[0], b1);
      return w;
    }
    this._execute = function () {
      var w = Array.prototype.slice.call(arguments);
      return bR.apply(w[0], w);
    };
    function bR(b2, b3) {
      if (!bp.useCodeInjections) {
        return false;
      }
      var w = null;
      if (
        typeof b2 === 'undefined' ||
        typeof b3 === 'undefined' ||
        b2 === null
      ) {
        return;
      }
      var b1 = Array.prototype.slice.call(arguments);
      b1.shift();
      b1.shift();
      if (
        typeof bp.codeInjections[b2.name] !== 'undefined' &&
        typeof bp.codeInjections[b2.name][b3] !== 'undefined'
      ) {
        w = bp.codeInjections[b2.name][b3].apply(b2, b1);
      } else {
        if (typeof bp.codeInjections[b2.name + '.' + b3] !== 'undefined') {
          w = bp.codeInjections[b2.name + '.' + b3].apply(b2, b1);
        } else {
          if (typeof bp.codeInjections[b3] !== 'undefined') {
            w = bp.codeInjections[b3].apply(b2, b1);
          }
        }
      }
      return w;
    }
    function bL() {
      var b1 = Array.prototype.slice.call(arguments);
      b1.unshift(KPMasterTag);
      var w = null;
      w = bc.apply(b1[0], b1);
      return w;
    }
    this._has = function () {
      var w = Array.prototype.slice.call(arguments);
      return bc.apply(w[0], w);
    };
    function bc(b1, b2) {
      if (!bp.useCodeInjections) {
        return false;
      }
      var w = false;
      if (
        typeof b1 === 'undefined' ||
        typeof b2 === 'undefined' ||
        b1 === null
      ) {
        return;
      }
      if (
        typeof bp.codeInjections[b1.name] !== 'undefined' &&
        typeof bp.codeInjections[b1.name][b2] !== 'undefined'
      ) {
        w = true;
      } else {
        if (typeof bp.codeInjections[b1.name + '.' + b2] !== 'undefined') {
          w = true;
        } else {
          if (typeof bp.codeInjections[b2] !== 'undefined') {
            w = true;
          }
        }
      }
      return w;
    }
    function bW() {
      var b1 = Array.prototype.slice.call(arguments);
      b1.unshift(KPMasterTag);
      var w = null;
      w = aY.apply(b1[0], b1);
      return w;
    }
    this._prop = function () {
      var w = Array.prototype.slice.call(arguments);
      if (w.length > 1 && typeof w[1] == 'string') {
        w.unshift(KPMasterTag);
      }
      return aY.apply(w[0], w);
    };
    function aY(w, b1, b3, b2) {
      if (!bp.useCodeInjections) {
        return false;
      }
      if (typeof w == 'string') {
        w = { name: w };
      }
      if (typeof b2 != 'undefined') {
        if (b1) {
          L[b3] = b2;
        } else {
          if (typeof L[w.name] == 'undefined') {
            L[w.name] = {};
          }
          L[w.name][b3] = b2;
        }
      } else {
        if (b1 && typeof L[b3] != 'undefined') {
          return L[b3];
        } else {
          if (
            !b1 &&
            typeof L[w.name] != 'undefined' &&
            typeof L[w.name][b3] != 'undefined'
          ) {
            return L[w.name][b3];
          } else {
            switch (b3) {
              default:
                return null;
                break;
            }
          }
        }
      }
    }
    this.hasConsentInstance = function () {
      return !!(
        typeof this.KPConsent !== 'undefined' &&
        this.KPConsent !== null &&
        typeof KPConsent !== 'undefined' &&
        this.KPConsent instanceof KPConsent
      );
    };
    this.hasConsentDataInstance = function () {
      return !!(
        typeof this.KPConsentData !== 'undefined' &&
        this.KPConsentData !== null &&
        typeof KPConsentData !== 'undefined' &&
        this.KPConsentData instanceof KPConsentData
      );
    };
    this.hasRuleInstance = function () {
      return !!(
        typeof this.KPRule !== 'undefined' &&
        this.KPRule !== null &&
        typeof KPRule !== 'undefined' &&
        this.KPRule instanceof KPRule
      );
    };
    this.hasReBounceInstance = function () {
      return !!(
        typeof this.KPReBounce !== 'undefined' &&
        this.KPReBounce !== null &&
        typeof KPReBounce !== 'undefined' &&
        this.KPReBounce instanceof KPReBounce
      );
    };
  }
  function KPConsent(b, g) {
    if (typeof this.name == 'undefined') {
      this.name = 'KPConsent';
    }
    if (typeof KPConsent.name == 'undefined') {
      KPConsent.name = this.name;
    }
    this.getConf = KPConsent.getConf = function () {
      return KPMasterTag.getConf(g);
    };
    var j = window;
    var h = j.document;
    var f = false;
    var l = '75267';
    var i = 'kp_mtc';
    var c = 10000;
    var k = 'https://opt.kuponacdn.de/mastertag_opt.js';
    this.init = function () {
      if (!this.getInitRun()) {
        if (typeof g.get_consent == 'undefined' || g.get_consent) {
          e();
        } else {
          window.kp_opt_approval = true;
        }
        this.setInitRun(true);
      }
      return this;
    };
    this.getConsentScriptId = function () {
      return i;
    };
    this.setConsentScriptId = function (d) {
      i = d;
      return this;
    };
    this.getConsentScriptTimeout = function () {
      return c;
    };
    this.setConsentScriptTimeout = function (d) {
      c = d;
      return this;
    };
    this.getInitRun = function () {
      return f;
    };
    this.setInitRun = function (d) {
      f = d;
      return this;
    };
    this.resetInit = function () {
      return setInitRun(false);
    };
    function e() {
      if (typeof kp_gdpr_params !== 'undefined' && kp_gdpr_params) {
        window.kp_call_source_original = window.kp_call_source;
        window.kp_call_source = 'mt';
      }
      var n = h.createElement('script');
      n.async = true;
      n.id = i;
      n.setAttribute('data-customer-id', l);
      n.startTime = new Date();
      var d = '';
      if (
        typeof g.opt_version !== 'undefined' &&
        g.opt_version !== '%%NOISREV_TPO%%'.split('').reverse().join('')
      ) {
        n.setAttribute('data-opt-version', g.opt_version);
        d = '?v=' + g.opt_version;
      }
      n.src = k + d;
      if (typeof kp_gdpr_params !== 'undefined' && kp_gdpr_params) {
        n.onload = function () {
          window.kp_call_source = window.kp_call_source_original;
          delete window.kp_call_source_original;
        };
      }
      var m = h.getElementsByTagName('script')[0];
      m.parentNode.insertBefore(n, m);
    }
    function a(n, m) {
      if (n) {
        for (var d = 0; d < n.length; d++) {
          if (n[d] === m) {
            return true;
          }
        }
      }
      return false;
    }
    if (typeof b == 'undefined' || b == true) {
      this.init();
    }
  }
  function KPConsentData(l, f) {
    if (typeof this.name == 'undefined') {
      this.name = 'KPConsentData';
    }
    if (typeof KPConsentData.name == 'undefined') {
      KPConsentData.name = this.name;
    }
    this.getConf = KPConsentData.getConf = function () {
      return KPMasterTag.getConf(f);
    };
    var i = window;
    var q = i.document;
    var g = false;
    var h = null;
    var n = 100;
    var r = 0;
    var t = false;
    var p = true;
    var a = false;
    var j = false;
    var m = 500;
    var b = 100;
    var s = {
      status: '-',
      load_flags: '',
      rule_load_flags: '',
      consent_timeout: 0,
      rule_timeout: 0,
      kp_opt_approval: 0,
      kp_opt_consent_data: '-',
    };
    var c = '';
    var e = 'kp_mtcd';
    var o = 'https://consentmgr.kuponacdn.de/';
    this.init = function () {
      if (!this.getInitRun()) {
        if (typeof f.get_consent == 'undefined' || f.get_consent) {
          this.startCheck();
        }
        this.setInitRun(true);
      }
      return this;
    };
    this.getInitRun = function () {
      return g;
    };
    this.setInitRun = function (d) {
      g = d;
      return this;
    };
    this.resetInit = function () {
      return setInitRun(false);
    };
    this.setData = function (d, u) {
      if (d == 'status' && s[d] == 'finished') {
        return;
      }
      s[d] = u;
    };
    this.incrementData = function (d) {
      if (!isNaN(parseInt(s[d]))) {
        s[d]++;
      }
    };
    this.getData = function (d) {
      return s[d];
    };
    this.setDoCall = function (d) {
      a = d;
    };
    this.getCallDone = function (d) {
      return j;
    };
    this.setCallDone = function (d) {
      j = d;
    };
    this.check = function () {
      if ((a || r >= b) && !t) {
        this.setDoCall(false);
        this.stopCheck();
        window.setTimeout(function () {
          window.KPMasterTag.KPConsentData.doCall();
        }, m);
      }
      r++;
    };
    this.startCheck = function () {
      if (p) {
        return;
      }
      h = window.setInterval(function () {
        window.KPMasterTag.KPConsentData.check();
      }, n);
    };
    this.stopCheck = function () {
      t = true;
      window.clearInterval(h);
    };
    this.doCall = function () {
      if (!p && !this.getCallDone()) {
        this.setCallDone(true);
        this.setData(
          'kp_opt_approval',
          window.kp_opt_approval === true ? 1 : 0,
        );
        this.setData('kp_opt_consent_data', window.kp_opt_consent_data);
        k();
        if (c !== '') {
          var u = q.createElement('script');
          u.async = true;
          u.id = e;
          u.src = o + '?' + c;
          var d = q.getElementsByTagName('script')[0];
          d.parentNode.insertBefore(u, d);
        }
      }
    };
    function k() {
      var w = [];
      w.push(0);
      w.push(s.status);
      w.push(s.load_flags);
      w.push(s.rule_load_flags);
      w.push('' + s.consent_timeout + s.rule_timeout);
      w.push(s.kp_opt_approval);
      var d = w.join('|');
      d = window.btoa(d);
      var x = new RegExp('.{1,12}', 'g');
      d = d.match(x).join('-');
      var v = s.kp_opt_consent_data;
      var u = [];
      u.push('m=' + d);
      u.push('c=' + v);
      c = u.join('&');
    }
    if (typeof l == 'undefined' || l == true) {
      this.init();
    }
  }
  function KPRule(t, j) {
    if (typeof this.name == 'undefined') {
      this.name = 'KPRule';
    }
    if (typeof KPRule.name == 'undefined') {
      KPRule.name = this.name;
    }
    this.getConf = KPRule.getConf = function () {
      return KPMasterTag.getConf(j);
    };
    if (b('BeforeInstantiation')) {
      h('BeforeInstantiation');
    }
    var l = window;
    var z = l.document;
    var k = false;
    var i = '75267';
    var c = 'kp_mtr';
    var a = 1000;
    var m = '';
    var f = '';
    var p = '[protocol]//mastertag.kpcustomer.de/';
    var u = 0;
    var v = 0;
    var B = 0;
    var s = 0;
    var n = 0;
    var q = 0;
    if (b('AfterInstantiation')) {
      h('AfterInstantiation');
    }
    this.init = function () {
      if (!this.getInitRun()) {
        if (b('BeforeInit')) {
          h('BeforeInit');
        }
        if (typeof j.get_rules == 'undefined' || j.get_rules) {
          r();
          o();
          A();
        } else {
          window.kp_rule_publisher_ids = window.kp_rule_publisher_ids_default;
        }
        this.setInitRun(true);
        if (b('AfterInit')) {
          h('AfterInit');
        }
      }
      return this;
    };
    this.getRuleScriptId = function () {
      return c;
    };
    this.setRuleScriptId = function (d) {
      c = d;
      return this;
    };
    this.getRuleScriptTimeout = function () {
      return a;
    };
    this.setRuleScriptTimeout = function (d) {
      a = d;
      return this;
    };
    this.getInitRun = function () {
      return k;
    };
    this.setInitRun = function (d) {
      k = d;
      return this;
    };
    this.resetInit = function () {
      return setInitRun(false);
    };
    function r() {
      if (b('BeforeParamsInit')) {
        h('BeforeParamsInit');
      }
      if (typeof j == 'undefined') {
        j = { protocol: '', site: '', skipParams: [], ruleQueries: '' };
      }
      p = p.replace(/\[protocol\]/, j.protocol);
      var d = false;
      if (j.skipRuleQueries && j.skipRuleQueries.hasSkips) {
        if (
          typeof j.skipRuleQueries.pages !== 'undefined' &&
          j.skipRuleQueries.pages.length &&
          x(j.skipRuleQueries.pages, j.site)
        ) {
          if (j.mastertagConf && j.mastertagConf.raw) {
            if (
              !(
                x(j.mastertagConf.raw.markersites, j.site) ||
                x(j.mastertagConf.raw.markersites, 'all')
              )
            ) {
              d = true;
            }
          } else {
            d = true;
          }
        }
      }
      if (!d) {
        m = j.ruleQueries;
      }
      if (j.mastertagConf && j.mastertagConf.parsed) {
        u = j.mastertagConf.parsed.loadHeiasPixel ? 1 : 0;
        if (u && j.mastertagConf.raw) {
          u =
            x(j.mastertagConf.raw.profilingsites, j.site) ||
            x(j.mastertagConf.raw.profilingsites, 'all')
              ? 1
              : 0;
        }
        v = j.mastertagConf.parsed.loadNeoryPixel ? 1 : 0;
        if (v && j.mastertagConf.raw) {
          v =
            x(j.mastertagConf.raw.profilingsitesNeory, j.site) ||
            x(j.mastertagConf.raw.profilingsitesNeory, 'all')
              ? 1
              : 0;
        }
        B =
          j.mastertagConf.parsed.loadPiggybacks ||
          j.mastertagConf.parsed.loadAdvertiserPiggybacks
            ? 1
            : 0;
        if (B && j.mastertagConf.raw) {
          B =
            x(j.mastertagConf.raw.markersites, j.site) ||
            x(j.mastertagConf.raw.markersites, 'all')
              ? 1
              : 0;
        }
        s = j.mastertagConf.parsed.loadConversiontags ? 1 : 0;
        if (s && j.mastertagConf.raw) {
          s =
            x(j.mastertagConf.raw.conversionsites, j.site) ||
            x(j.mastertagConf.raw.conversionsites, 'all')
              ? 1
              : 0;
        }
        n = j.mastertagConf.parsed.loadOnValidProductIdOnly ? 1 : 0;
        q = j.mastertagConf.parsed.usesFullCategory ? 1 : 0;
      }
      window.KPMasterTag.KPConsentData.setData(
        'rule_load_flags',
        '' + (u | 0) + (v | 0) + (B | 0) + (s | 0) + (n | 0),
      );
      if (b('AfterParamsInit')) {
        h('AfterParamsInit', u, v, B, s, n);
      }
    }
    function o() {
      if (b('BeforeQueryBuild')) {
        h('BeforeQueryBuild');
      }
      var w = [];
      w.push('custid=' + encodeURIComponent(i));
      for (var d in l) {
        if (
          d.indexOf('kp_') === 0 &&
          typeof l[d] !== 'undefined' &&
          !x(j.skipParams, d)
        ) {
          w.push(d + '=' + encodeURIComponent(l[d]));
        }
        if (d == 'kp_shoppingcart_product_ids' && typeof l[d] !== 'undefined') {
          w.push('kp_shoppingcard_product_ids=' + encodeURIComponent(l[d]));
        }
      }
      w.push('kp_load_heias_pixel=' + encodeURIComponent(u));
      w.push('kp_load_neory_pixel=' + encodeURIComponent(v));
      w.push('kp_load_piggybacks=' + encodeURIComponent(B));
      w.push('kp_load_conversiontags=' + encodeURIComponent(s));
      w.push('kp_load_on_valid_product_id_only=' + encodeURIComponent(n));
      w.push('kp_site=' + encodeURIComponent(j.site));
      w.push('kp_queries=' + encodeURIComponent(m));
      w.push('kp_uses_full_category=' + encodeURIComponent(q));
      w.push('t=' + Math.random() * 10000000000000000000);
      f = w.join('&');
      if (b('AfterQueryBuild')) {
        h('AfterQueryBuild', f);
      }
    }
    function A() {
      if (b('BeforeRulesLoad')) {
        h('BeforeRulesLoad');
      }
      if (f !== '') {
        var w = z.createElement('script');
        w.async = true;
        w.id = c;
        w.startTime = new Date();
        w.loaded = false;
        w.onload = function () {
          this.loaded = true;
        };
        w.src = p + '?' + f;
        var d = z.getElementsByTagName('script')[0];
        d.parentNode.insertBefore(w, d);
        window.setTimeout(function () {
          if (!w.loaded) {
            console.log(
              '%cKPRule Script potentially blocked due to Content Security Policy',
              'color:red;',
            );
          }
        }, a);
      }
      if (b('AfterRulesLoad')) {
        h('AfterRulesLoad', w);
      }
    }
    function x(D, w) {
      if (D) {
        for (var d = 0; d < D.length; d++) {
          if (D[d] === w) {
            return true;
          }
        }
      }
      return false;
    }
    function h() {
      var w = Array.prototype.slice.call(arguments);
      w.unshift(KPMasterTag.KPRule || KPRule);
      var d = null;
      if (
        typeof window.KPMasterTag !== 'undefined' &&
        typeof window.KPMasterTag._execute !== 'undefined'
      ) {
        d = window.KPMasterTag._execute.apply(w[0], w);
      } else {
        d = C.apply(w[0], w);
      }
      return d;
    }
    this._execute = function () {
      var d = Array.prototype.slice.call(arguments);
      if (d.length == 1 && typeof d[0] == 'string') {
        d.unshift(KPMasterTag.KPRule || KPRule);
      }
      return C.apply(d[0], d);
    };
    function C(E, F) {
      var d = null;
      if (typeof E === 'undefined' || typeof F === 'undefined' || E === null) {
        return;
      }
      var D = Array.prototype.slice.call(arguments);
      D.shift();
      D.shift();
      var w = KPMasterTag.getConf(this);
      if (!w.useCodeInjections) {
        return false;
      }
      if (
        typeof w.codeInjections[E.name] !== 'undefined' &&
        typeof w.codeInjections[E.name][F] !== 'undefined'
      ) {
        d = w.codeInjections[E.name][F].apply(E, D);
      } else {
        if (typeof w.codeInjections[E.name + '.' + F] !== 'undefined') {
          d = w.codeInjections[E.name + '.' + F].apply(E, D);
        } else {
          if (typeof w.codeInjections[F] !== 'undefined') {
            d = w.codeInjections[F].apply(E, D);
          }
        }
      }
      return d;
    }
    function b() {
      var w = Array.prototype.slice.call(arguments);
      w.unshift(KPMasterTag.KPRule || KPRule);
      var d = null;
      if (
        typeof window.KPMasterTag !== 'undefined' &&
        typeof window.KPMasterTag._has !== 'undefined'
      ) {
        d = window.KPMasterTag._has.apply(w[0], w);
      } else {
        d = y.apply(w[0], w);
      }
      return d;
    }
    this._has = function () {
      var d = Array.prototype.slice.call(arguments);
      if (d.length == 1 && typeof d[0] == 'string') {
        d.unshift(KPMasterTag.KPRule || KPRule);
      }
      return y.apply(d[0], d);
    };
    function y(D, E) {
      var d = false;
      if (typeof D === 'undefined' || typeof E === 'undefined' || D === null) {
        return;
      }
      var w = KPMasterTag.getConf(this);
      if (!w.useCodeInjections) {
        return false;
      }
      if (
        typeof w.codeInjections[D.name] !== 'undefined' &&
        typeof w.codeInjections[D.name][E] !== 'undefined'
      ) {
        d = true;
      } else {
        if (typeof w.codeInjections[D.name + '.' + E] !== 'undefined') {
          d = true;
        } else {
          if (typeof w.codeInjections[E] !== 'undefined') {
            d = true;
          }
        }
      }
      return d;
    }
    function e() {
      var w = Array.prototype.slice.call(arguments);
      w.unshift(KPMasterTag.KPRule || KPRule);
      var d = null;
      d = g.apply(w[0], w);
      return d;
    }
    this._prop = function () {
      var d = Array.prototype.slice.call(arguments);
      if (d.length > 1 && typeof d[1] == 'string') {
        d.unshift(KPMasterTag.KPRule || KPRule);
      }
      return g.apply(d[0], d);
    };
    function g(D, E, G, F) {
      var w = Array.prototype.slice.call(arguments);
      var d = null;
      if (
        typeof window.KPMasterTag !== 'undefined' &&
        typeof window.KPMasterTag._prop !== 'undefined'
      ) {
        d = window.KPMasterTag._prop.apply(w[0], w);
      }
      return d;
    }
    if (typeof t == 'undefined' || t == true) {
      this.init();
    }
  }
  function KPReBounce(U, a0) {
    if (typeof this.name == 'undefined') {
      this.name = 'KPReBounce';
    }
    if (typeof KPReBounce.name == 'undefined') {
      KPReBounce.name = this.name;
    }
    this.getConf = KPReBounce.getConf = function () {
      return KPMasterTag.getConf(a0);
    };
    this.syncs = {};
    if (T('BeforeInstantiation')) {
      v('BeforeInstantiation');
    }
    var B;
    var u = false;
    var aD = '75267';
    var aj = 'https://retrack-kupona.kuponacdn.de/';
    var aP = 'https://rebounce.feedengine.de/';
    var ac = aP + 'wp-content/plugins/kp-rebounce-backend/';
    var aU = aj;
    var X = ac + 'mastertag_redirect.php?id=' + aD;
    var b = '';
    var y = 2;
    var s = y == 1 ? b : X;
    var a = ac + 'mastertag_api.php';
    var bk = aU + 'customers/' + aD + '.json';
    var bq = 1;
    var H = bq == 1 ? bk : a;
    var aF = ac + 'saveStats.php';
    var bn = 'standard';
    var am = 'extended';
    var aM = 1;
    var p = aM == 1 ? bn : am;
    var a2 = 'popstate';
    var ay =
      'defaultInitReBounceOnUserActivity:0,checkInterval:50,checkTimeout:2000';
    var bo = 'javascript';
    var a9 = 'iframe';
    var al = 1;
    var N = al == 1 ? bo : a9;
    var bb = false;
    var t = true;
    var af = false;
    var ai = false;
    var M;
    var aa = {
      source: undefined,
      origin: undefined,
      data: undefined,
      valid: false,
      event: undefined,
    };
    var S;
    var aG = false;
    var ao = false;
    var bu = false;
    var A = false;
    var bm;
    var ab;
    var bl;
    var ba = [];
    if (T('AfterInstantiation')) {
      v('AfterInstantiation');
    }
    this.init = function () {
      if (!o()) {
        if (T('BeforeInit')) {
          a0 = v('BeforeInit', a0);
        }
        B = this;
        aZ();
        E();
        D();
        if (typeof a0.do_rebounce == 'undefined' || a0.do_rebounce) {
          if (
            typeof a0.embedTypeType != 'undefined' &&
            [1, 2].indexOf(a0.embedTypeType) !== -1
          ) {
            N = a0.embedTypeType == 1 ? bo : a9;
          } else {
            N = !K() ? bo : a9;
          }
          if (
            typeof a0.redirectLocationType != 'undefined' &&
            [1, 2].indexOf(a0.redirectLocationType) !== -1
          ) {
            s = a0.redirectLocationType == 1 ? b : X;
            if (s == b) {
              t = false;
            }
            y = a0.redirectLocationType;
          }
          if (
            typeof a0.redirectLocation != 'undefined' &&
            a0.redirectLocation
          ) {
            s = a0.redirectLocation;
          }
          if (
            typeof a0.redirectTransferSessionData != 'undefined' &&
            a0.redirectTransferSessionData
          ) {
            bb = a0.redirectTransferSessionData;
          }
          if (
            typeof a0.redirectTransferEventData != 'undefined' &&
            a0.redirectTransferEventData
          ) {
            t = a0.redirectTransferEventData;
          }
          if (
            typeof a0.rebounceLocationType != 'undefined' &&
            [1, 2].indexOf(a0.rebounceLocationType) !== -1
          ) {
            H = a0.rebounceLocationType == 1 ? bk : a;
            if (H == a) {
              af = true;
            }
            bq = a0.rebounceLocationType;
          }
          if (
            typeof a0.rebounceLocation != 'undefined' &&
            a0.rebounceLocation
          ) {
            H = a0.rebounceLocation;
          }
          if (
            typeof a0.rebounceSubmitSessionData != 'undefined' &&
            a0.rebounceSubmitSessionData
          ) {
            af = a0.rebounceSubmitSessionData;
          }
          if (
            typeof a0.rebounceModeType != 'undefined' &&
            [1, 2].indexOf(a0.rebounceModeType) !== -1
          ) {
            p = a0.rebounceModeType == 1 ? bn : am;
          }
          if (typeof a0.rebounceEvents != 'undefined' && a0.rebounceEvents) {
            a2 = a0.rebounceEvents;
          }
          if (typeof a0.userActivity != 'undefined' && a0.userActivity) {
            ay = a0.userActivity;
          }
          d();
          c();
        }
        an(true);
        if (T('AfterInit')) {
          a0 = v('AfterInit', a0);
        }
      }
      return this;
    };
    function o() {
      return u;
    }
    function an(bA) {
      u = bA;
      return this;
    }
    function be() {
      return an(false);
    }
    function aZ() {
      var bA = a0.essentials;
      if (typeof a0.isRebounce != 'undefined' && !a0.isRebounce) {
        a0.do_rebounce = false;
      }
      if (
        new RegExp(
          '^(lp\\..+\\.[a-z]+|rebounce\\.feedengine\\.[a-z]+|.+\\.re-bounce\\.[a-z]+)$',
          'g',
        ).exec(aX(location.href, false)) !== null
      ) {
        a0.do_rebounce = false;
      }
      if (!ak('cookie') || !ak('sessionStorage') || !ak('localStorage')) {
        a0.do_rebounce = false;
      }
      a0.checkInstanceID = false;
      a0.skipWrongInstanceID = false;
      a0.defaultUrlToCurrentLocationOnDomainCheck = false;
      a0.excludeSubdomainOnDomainCheck = false;
      if (typeof bA != 'undefined') {
        if (bA.useInstanceID) {
          a0.checkInstanceID = true;
          a0.skipWrongInstanceID = true;
          a0.instanceID = Math.round(Math.random() * 10000)
            .toString()
            .padStart(5, '0');
          B.$o.set('instanceID', a0.instanceID);
        }
        if (bA.defaultUrlToCurrentLocationOnDomainCheck) {
          a0.defaultUrlToCurrentLocationOnDomainCheck = true;
        }
        if (bA.excludeSubdomainOnDomainCheck) {
          a0.excludeSubdomainOnDomainCheck = true;
        }
        if (bA.restoreInitialHistoryState && bA.getInitialHistoryState) {
          var bC = JSON.parse(JSON.stringify(history.state || {}));
          var bB = B.$o.get('initialHistoryState') || {};
          var bD = JSON.parse(sessionStorage.getItem('kp') || '{}').urls || [];
          if (bD.length) {
            if (!bC.stack || !bC.page) {
              if (bB.stack || bB.page) {
                if (bB.stack) {
                  bC.stack = bB.stack;
                }
                if (bB.page) {
                  bC.page = bB.page;
                }
                if (bB.rebounce) {
                  bC.rebounce = bB.rebounce;
                }
                history.replaceState(bC, '', '');
              }
            }
          }
        }
      }
    }
    function E() {
      var bA = a0.divergent;
      if (typeof bA != 'undefined') {
        if (bA.hardSkip) {
          a0.do_rebounce = false;
        }
        if (bA.userActivity) {
          var bC = Object.fromEntries(
            a0.userActivity.split(',').map(function (bE) {
              return bE.split(':');
            }),
          );
          Object.entries(bA.userActivity).map(function (bE) {
            bC[bE[0]] = bE[1];
          });
          a0.userActivity = Object.entries(bC)
            .map(function (bE) {
              return bE.join(':');
            })
            .join(',');
        }
        if (bA.rebounceLocation) {
          if (typeof bA.rebounceLocation == 'boolean') {
            if (bA.rebounceLocation === true) {
              var bB = new URL(H),
                bD = '';
              if (
                typeof bA.rebounceLocationTestPath != 'undefined' &&
                bA.rebounceLocationTestPath
              ) {
                bD = '/test';
              } else {
                if (
                  typeof bA.rebounceLocationPath != 'undefined' &&
                  bA.rebounceLocationPath != ''
                ) {
                  bD = bA.rebounceLocationPath + '';
                }
              }
              if (bD != '') {
                bB.pathname = bD + bB.pathname;
              }
              if (typeof bB.toString == 'function') {
                a0.rebounceLocation = bB.toString();
              }
            }
          } else {
            if (typeof bA.rebounceLocation == 'string') {
              a0.rebounceLocation = bA.rebounceLocation + '';
            }
          }
        }
      }
    }
    function D() {
      var bA = a0.custom;
      a0.referrerCheckOnHistoryBack = true;
      a0.referrerCheckOnReload = true;
      a0.reBounceBehaviourMode = 1;
      if (typeof bA != 'undefined') {
        if (bA.bfcache) {
          a0.rebounceModeType = 2;
          a0.rebounceEvents = 'popstate,pageshow';
        }
        if (bA.hooks) {
          bA.hooks.map(function (bB) {
            if (typeof bB.init != 'undefined') {
              if (typeof bB.init == 'function') {
                bB.init();
              } else {
                if (typeof bB[bB.init] != 'undefined') {
                  bB[bB.init].apply(this);
                }
              }
            }
          });
        }
        a0.referrerCheckOnHistoryBack = true;
        a0.referrerCheckOnReload = true;
        if (bA.extendedReferrerCheck) {
          a0.entryStateReferrerCheck = false;
          a0.referrerCheckOnHistoryBack = false;
          a0.referrerCheckOnReload = false;
          if (bA.extendedReferrerCheck & 1) {
            a0.entryStateReferrerCheck = true;
          }
          if (bA.extendedReferrerCheck & 2) {
            a0.referrerCheckOnHistoryBack = true;
          }
          if (bA.extendedReferrerCheck & 4) {
            a0.referrerCheckOnReload = true;
          }
        }
        if (bA.rebounceBehaviourFlags) {
          a0.skipRebounceFlagCheck = false;
          a0.skipRecurringPopstate = false;
          a0.skipNextPopstate = false;
          a0.reenableNextPopstate = false;
          a0.keepRulesCheckResult = false;
          a0.lockFailedRulesCheckResult = false;
          a0.skipOnFailedRulesCheck = false;
          a0.skipAppendUrlOnUrlChange = false;
          if (bA.rebounceBehaviourFlags & 1) {
            a0.skipRebounceFlagCheck = true;
          }
          if (bA.rebounceBehaviourFlags & 2) {
            a0.skipRecurringPopstate = true;
          }
          if (bA.rebounceBehaviourFlags & 4) {
            a0.skipNextPopstate = true;
          }
          if (bA.rebounceBehaviourFlags & 8) {
            a0.reenableNextPopstate = true;
          }
          if (bA.rebounceBehaviourFlags & 16) {
            a0.keepRulesCheckResult = true;
          }
          if (a0.keepRulesCheckResult && bA.rebounceBehaviourFlags & 32) {
            a0.lockFailedRulesCheckResult = true;
          }
          if (a0.keepRulesCheckResult && bA.rebounceBehaviourFlags & 64) {
            a0.skipOnFailedRulesCheck = true;
          }
          if (bA.rebounceBehaviourFlags & 128) {
            a0.skipAppendUrlOnUrlChange = true;
          }
        }
        if (bA.rebounceValidityCheckFlags) {
          a0.checkUrlChange = false;
          a0.checkNotValidStack = false;
          a0.checkWrongStack = false;
          a0.checkWrongStackDeviation = false;
          a0.checkErrornousEntry = false;
          if (bA.rebounceValidityCheckFlags & 1) {
            a0.checkUrlChange = true;
          }
          if (bA.rebounceValidityCheckFlags & 2) {
            a0.checkNotValidStack = true;
          }
          if (bA.rebounceValidityCheckFlags & 4) {
            a0.checkWrongStack = true;
          }
          if (bA.rebounceValidityCheckFlags & 8) {
            a0.checkWrongStackDeviation = true;
          }
          if (bA.rebounceValidityCheckFlags & 16) {
            a0.checkErrornousEntry = true;
          }
        }
        if (bA.correctReferrer) {
          a0.correctReferrer = true;
        }
        if (bA.reBounceBehaviourMode) {
          a0.reBounceBehaviourMode = bA.reBounceBehaviourMode;
        }
        if (bA.checkEntryState) {
          a0.checkEntryState = true;
        }
        if (bA.dynamicMods) {
          a0.dynamicMods = bA.dynamicMods;
        }
        if (bA.checkDynamicMods) {
          if (typeof bA.dynamicMods != 'undefined') {
            a0.checkDynamicMods = bA.checkDynamicMods;
          }
        }
        if (bA.checkPendingSyncs) {
          if (
            typeof bA.dynamicMods != 'undefined' &&
            typeof bA.checkDynamicMods != 'undefined'
          ) {
            a0.checkPendingSyncs = bA.checkPendingSyncs;
          }
        }
        if (bA.jsf) {
          a0.reBounceBehaviourMode = 2;
          a0.skipHistoryBack = true;
          if (typeof bA.checkEntryState == 'undefined') {
            a0.checkEntryState = true;
          }
          if (typeof bA.dynamicMods != 'undefined') {
            if (typeof bA.checkDynamicMods == 'undefined') {
              a0.checkDynamicMods = true;
            }
            if (typeof bA.checkPendingSyncs == 'undefined') {
              a0.checkPendingSyncs = true;
            }
          }
          if (typeof bA.correctReferrer == 'undefined') {
            a0.correctReferrer = true;
          }
          if (
            typeof a0.essentials == 'undefined' ||
            typeof a0.essentials.useInstanceID == 'undefined'
          ) {
            a0.essentials = a0.essentials || {};
            a0.essentials.useInstanceID = true;
            aZ();
          }
        }
      }
    }
    function ak(bB) {
      switch (bB) {
        case 'sessionStorage':
        case 'localStorage':
          var bD;
          try {
            bD = window[bB];
            var bA;
            do {
              bA =
                Math.random().toString(36).slice(2) +
                '.' +
                new Date().getTime().toString(36) +
                '.kp';
            } while (!isNaN(bA.substr(0, 1)));
            bA = bA.split('.').reverse().join('-');
            bD.setItem(bA, bA);
            bD.removeItem(bA);
            return true;
          } catch (bC) {
            return (
              bC instanceof DOMException &&
              (bC.code === 22 ||
                bC.code === 1014 ||
                bC.name === 'QuotaExceededError' ||
                bC.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
              bD &&
              bD.length !== 0
            );
          }
        case 'cookie':
          return navigator.cookieEnabled;
        default:
          return false;
      }
    }
    function d() {
      M = {
        initialized: false,
        baseKey: 'kp',
        lifetimeKey: 'lifetime',
        hashKey: 'hash',
        callsKey: 'calls',
        rebouncedKey: 'rebounced',
        rebouncesKey: 'rebounces',
        rebounceableProspectivesKey: 'rebounceableProspectives',
        rebounceablesKey: 'rebounceables',
        previousHistoryLengthKey: 'previousHistoryLength',
        entryStateKey: 'entryState',
        rebounceModeKey: 'rebounceMode',
        embedTypeKey: 'embedType',
        levelKey: 'level',
        levelPlaceholder: '[LEVEL]',
        lastRebounceKey: 'lastRebounce',
        lastRebounceEventKey: 'lastRebounceEvent',
        eventKey: 'event',
        customerIdKey: 'customerId',
        timestampsSuffixKey: 'Timestamps',
        lastSessionTimestampKey: 'lastSessionTimestamp',
        referrerParameterKey: 'referrerParameter',
        urlParameterKey: 'urlParameter',
        passThrough: true,
        active: true,
        params: {},
        paramsLifetime: {},
        cookie: {
          initialized: false,
          storage: null,
          active: true,
          defaultLifetime: 86400,
          invalidKeys: [],
          init: function () {
            if (
              typeof a0.storage != 'undefined' &&
              typeof a0.storage.cookie != 'undefined' &&
              typeof a0.storage.cookie.active != 'undefined'
            ) {
              this.setActive(a0.storage.cookie.active);
            }
            if (this.isActive()) {
              this.setStorage();
              this.setInvalidKeys();
            }
            this.initialized = true;
          },
          setStorage: function () {
            this.storage = document.cookie;
          },
          prefixKey: function (bA) {
            var bB = M.baseKey + '-';
            if (bA.indexOf(bB) == -1) {
              bA = bB + bA;
            }
            return bA;
          },
          get: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            var bB = (
              document.cookie.match(
                '(^|;)\\s*' + this.prefixKey(bA) + '\\s*=\\s*([^;]+)',
              ) || [undefined]
            ).pop();
            if (bB && [123, 91].indexOf(bB.charCodeAt(0)) != -1) {
              bB = JSON.parse(bB);
            }
            return bB;
          },
          set: function (bD, bE, bA) {
            if (!this.isActive()) {
              return null;
            }
            if (!this.isValidKey(bD)) {
              return null;
            }
            if (typeof bA == 'undefined') {
              bA = this.defaultLifetime;
            }
            var bC = new Date();
            bC.setTime(bC.getTime() + bA * 1000);
            const bB = 'expires=' + bC.toUTCString() + '; ';
            if (typeof bE == 'object') {
              bE = JSON.stringify(bE);
            }
            document.cookie =
              this.prefixKey(bD) +
              '=' +
              bE +
              '; ' +
              bB +
              'path=/; SameSite=None; Secure';
            if (typeof bA != 'undefined') {
              this.setLifetime(bD, bA);
            }
          },
          setLifetime: function (bB, bA) {
            if (!this.isActive()) {
              return null;
            }
            if (bA === null || bA === false || bA === -1) {
              this.delete(bB);
            } else {
            }
          },
          delete: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            document.cookie =
              bA +
              '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; SameSite=None; Secure';
          },
          clearStorage: function () {
            if (!this.isActive()) {
              return null;
            }
            var bB = M.baseKey + '-',
              bC = new RegExp(bB + '([^=]*)', 'g'),
              bA = (document.cookie + '; ').match(bC),
              bD = this;
            bA.forEach(function (bE) {
              bD.delete(bE);
            });
          },
          setInvalidKeys: function () {
            this.invalidKeys = [M.hashKey];
          },
          isValidKey: function (bA) {
            return this.invalidKeys.indexOf(bA) == -1;
          },
          isActive: function () {
            return this.active;
          },
          setActive: function (bA) {
            this.active = bA;
          },
        },
        session: {
          initialized: false,
          storage: null,
          passThrough: true,
          active: true,
          maxUrlCount: null,
          init: function () {
            if (
              typeof a0.storage != 'undefined' &&
              typeof a0.storage.session != 'undefined' &&
              typeof a0.storage.session.active != 'undefined'
            ) {
              this.setActive(a0.storage.session.active);
            }
            if (this.isActive()) {
              this.setStorage();
              if (this.getData().calls == 0) {
                this.getLatestSession();
              }
              if (
                typeof a0.storage != 'undefined' &&
                typeof a0.storage.session != 'undefined' &&
                typeof a0.storage.session.maxUrlCount != 'undefined' &&
                a0.storage.session.maxUrlCount > 0
              ) {
                this.setMaxUrlCount(a0.storage.session.maxUrlCount);
              }
              this.checkData();
            }
            this.initialized = true;
          },
          setStorage: function () {
            this.storage = sessionStorage;
          },
          defaultStructure: function () {
            var bB = {},
              bC = M.getTimestamp(),
              bA = bC.toString(36);
            bB.calls = 0;
            bB.hash = undefined;
            bB.sessionTimestamp = bC;
            bB.sessionKey = bA;
            bB.urls = [];
            return bB;
          },
          defaultLifetimeStructure: function () {
            var bA = {};
            return bA;
          },
          wipeData: function () {
            this.storage.removeItem(M.baseKey);
          },
          getData: function () {
            if (!this.isActive()) {
              return null;
            }
            return (
              JSON.parse(this.storage.getItem(M.baseKey)) ||
              this.defaultStructure()
            );
          },
          setData: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            this.storage.setItem(M.baseKey, JSON.stringify(bA));
          },
          getDataLifetime: function () {
            if (!this.isActive()) {
              return null;
            }
            return (
              JSON.parse(this.storage.getItem(M.baseKey + M.lifetimeKey)) ||
              this.defaultLifetimeStructure()
            );
          },
          setDataLifetime: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            this.storage.setItem(M.baseKey + M.lifetimeKey, JSON.stringify(bA));
          },
          checkData: function () {
            if (!this.isActive()) {
              return null;
            }
            var bB = this.getDataLifetime(),
              bC = this.getData();
            Object.keys(bB).forEach(function (bD) {
              if (typeof bC[bD] == 'undefined') {
                delete bB[bD];
              }
            });
            this.setDataLifetime(bB);
            if (!isNaN(this.maxUrlCount) && this.maxUrlCount > 0) {
              var bA = this.get('urls');
              if (Object.keys(bA).length > this.maxUrlCount) {
                while (Object.keys(bA).length > this.maxUrlCount) {
                  delete bA[Object.keys(bA)[0]];
                }
                this.set('urls', bA);
              }
            }
          },
          get: function (bB) {
            if (!this.isActive()) {
              return null;
            }
            var bA = this.getData(),
              bC = this.getDataLifetime(),
              bD = new Date().getTime() / 1000;
            if (typeof bC[bB] != 'undefined' && bC[bB] > 0 && bC[bB] < bD) {
              this.delete(bB);
              bA = this.getData();
              bC = this.getDataLifetime();
            }
            return typeof bC[bB] == 'undefined' || bC[bB] == 0 || bC[bB] > bD
              ? bA[bB]
              : undefined;
          },
          set: function (bC, bD, bA) {
            if (!this.isActive()) {
              return null;
            }
            var bB = this.getData();
            bB[bC] = bD;
            this.setData(bB);
            if (typeof bA != 'undefined') {
              this.setLifetime(bC, bA);
            }
            if (this.getPassThrough()) {
              M.local.setSession(bB);
            }
          },
          setLifetime: function (bC, bA) {
            if (!this.isActive()) {
              return null;
            }
            if (bA === null || bA === false || bA === -1) {
              this.delete(bC);
            } else {
              var bB = this.getDataLifetime(),
                bD = this.getData();
              if (typeof bD[bC] != 'undefined') {
                bB[bC] =
                  bA > 0 ? Math.floor(new Date().getTime() / 1000) + bA : 0;
              } else {
                delete bB[bC];
              }
              this.setDataLifetime(bB);
            }
          },
          delete: function (bB) {
            if (!this.isActive()) {
              return null;
            }
            var bA = this.getData(),
              bC = this.getDataLifetime();
            delete bA[bB];
            delete bC[bB];
            this.setData(bA);
            this.setDataLifetime(bC);
            if (this.getPassThrough()) {
              M.local.setSession(bA);
            }
          },
          clearStorage: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            if (typeof bA != 'undefined' && bA) {
              this.wipeData();
              return;
            }
            var bB = this.getPassThrough();
            this.setPassThrough(false);
            this.setData(this.defaultStructure());
            this.setDataLifetime(this.defaultLifetimeStructure());
            this.setPassThrough(bB);
          },
          getPassThrough: function () {
            return this.passThrough;
          },
          setPassThrough: function (bA) {
            this.passThrough = bA;
          },
          isActive: function () {
            return this.active;
          },
          setActive: function (bA) {
            this.active = bA;
          },
          setMaxUrlCount: function (bA) {
            this.maxUrlCount = bA;
          },
          getLatestSession: function () {
            if (!this.isActive()) {
              return null;
            }
            if (M.local.hasActiveSession()) {
              this.storage.setItem(
                M.baseKey,
                JSON.stringify(M.local.getLatestSession()),
              );
            }
            return this.getData();
          },
          getAllItems: function () {
            if (!this.isActive()) {
              return null;
            }
            var bA = {};
            bA.data = this.getData();
            bA.dataLifetime = this.getDataLifetime();
            return bA;
          },
        },
        local: {
          initialized: false,
          storage: null,
          active: true,
          sessionsKey: 'sessions',
          maxSessionAge: null,
          maxSessionCount: null,
          activeSessionIndicator: 0,
          init: function () {
            if (
              typeof a0.storage != 'undefined' &&
              typeof a0.storage.session != 'undefined' &&
              typeof a0.storage.session.active != 'undefined'
            ) {
              this.setActive(a0.storage.session.active);
            }
            if (this.isActive()) {
              this.setStorage();
              if (
                typeof a0.storage != 'undefined' &&
                typeof a0.storage.session != 'undefined'
              ) {
                if (
                  typeof a0.storage.session.maxSessionAge != 'undefined' &&
                  a0.storage.session.maxSessionAge > 0
                ) {
                  this.setMaxSessionAge(a0.storage.session.maxSessionAge);
                }
                if (
                  typeof a0.storage.session.maxSessionCount != 'undefined' &&
                  a0.storage.session.maxSessionCount > 0
                ) {
                  this.setMaxSessionCount(a0.storage.session.maxSessionCount);
                }
                if (
                  typeof a0.storage.session.activeSessionIndicator !=
                    'undefined' &&
                  a0.storage.session.activeSessionIndicator >= 0
                ) {
                  this.setActiveSessionIndicator(
                    a0.storage.session.activeSessionIndicator,
                  );
                }
              }
              this.checkData();
            }
            this.initialized = true;
          },
          setStorage: function () {
            this.storage = localStorage;
          },
          defaultStructure: function () {
            var bA = {};
            bA[this.sessionsKey] = {};
            return bA;
          },
          defaultLifetimeStructure: function () {
            var bA = {};
            return bA;
          },
          wipeData: function () {
            this.storage.removeItem(M.baseKey);
          },
          getData: function () {
            if (!this.isActive()) {
              return null;
            }
            return (
              JSON.parse(this.storage.getItem(M.baseKey)) ||
              this.defaultStructure()
            );
          },
          setData: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            this.storage.setItem(M.baseKey, JSON.stringify(bA));
          },
          getDataLifetime: function () {
            if (!this.isActive()) {
              return null;
            }
            return (
              JSON.parse(this.storage.getItem(M.baseKey + M.lifetimeKey)) ||
              this.defaultLifetimeStructure()
            );
          },
          setDataLifetime: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            this.storage.setItem(M.baseKey + M.lifetimeKey, JSON.stringify(bA));
          },
          checkData: function () {
            if (!this.isActive()) {
              return null;
            }
            var bC = this.getDataLifetime(),
              bD = this.getData();
            Object.keys(bC).forEach(function (bH) {
              if (typeof bD[bH] == 'undefined') {
                delete bC[bH];
              }
            });
            this.setDataLifetime(bC);
            if (!isNaN(this.maxSessionAge) && this.maxSessionAge > 0) {
              var bB = this.get(this.sessionsKey),
                bE = M.getTimestamp(),
                bF = false,
                bG = this;
              Object.keys(bB).forEach(function (bH) {
                if (bB[bH].sessionTimestamp + bG.maxSessionAge < bE) {
                  delete bB[bH];
                  bF = true;
                }
              });
              if (bF) {
                this.set(this.sessionsKey, bB);
              }
            }
            if (!isNaN(this.maxSessionCount) && this.maxSessionCount > 0) {
              var bA = this.get(this.sessionsKey);
              if (Object.keys(bA).length > this.maxSessionCount) {
                while (Object.keys(bA).length > this.maxSessionCount) {
                  delete bA[Object.keys(bA)[0]];
                }
                this.set(this.sessionsKey, bA);
              }
            }
          },
          get: function (bB) {
            if (!this.isActive()) {
              return null;
            }
            var bA = this.getData(),
              bC = this.getDataLifetime(),
              bD = new Date().getTime() / 1000;
            if (typeof bC[bB] != 'undefined' && bC[bB] > 0 && bC[bB] < bD) {
              this.delete(bB);
              bA = this.getData();
              bC = this.getDataLifetime();
            }
            return typeof bC[bB] == 'undefined' || bC[bB] == 0 || bC[bB] > bD
              ? bA[bB]
              : undefined;
          },
          set: function (bC, bD, bA) {
            if (!this.isActive()) {
              return null;
            }
            var bB = this.getData();
            bB[bC] = bD;
            this.setData(bB);
            if (typeof bA != 'undefined') {
              this.setLifetime(bC, bA);
            }
          },
          setLifetime: function (bC, bA) {
            if (!this.isActive()) {
              return null;
            }
            if (bA === null || bA === false || bA === -1) {
              this.delete(bC);
            } else {
              var bB = this.getDataLifetime(),
                bD = this.getData();
              if (typeof bD[bC] != 'undefined') {
                bB[bC] =
                  bA > 0 ? Math.floor(new Date().getTime() / 1000) + bA : 0;
              } else {
                delete bB[bC];
              }
              this.setDataLifetime(bB);
            }
          },
          delete: function (bB) {
            if (!this.isActive()) {
              return null;
            }
            var bA = this.getData();
            delete bA[bB];
            this.setData(bA);
          },
          clearStorage: function (bA) {
            if (!this.isActive()) {
              return null;
            }
            if (typeof bA != 'undefined' && bA) {
              this.wipeData();
              return;
            }
            this.setData(this.defaultStructure());
            this.setDataLifetime(this.defaultLifetimeStructure());
          },
          isActive: function () {
            return this.active;
          },
          setActive: function (bA) {
            this.active = bA;
          },
          setMaxSessionAge: function (bA) {
            this.maxSessionAge = bA;
          },
          setMaxSessionCount: function (bA) {
            this.maxSessionCount = bA;
          },
          setActiveSessionIndicator: function (bA) {
            this.activeSessionIndicator = bA;
          },
          setSession: function (bB) {
            if (!this.isActive()) {
              return null;
            }
            var bA = this.get(this.sessionsKey);
            bA[bB.sessionKey] = bB;
            this.set(this.sessionsKey, bA);
          },
          getLatestSessionTimestamp: function () {
            if (!this.isActive()) {
              return null;
            }
            if (null !== this.storage.getItem(M.baseKey)) {
              var bD = JSON.parse(this.storage.getItem(M.baseKey)).sessions;
              var bC = Object.values(
                JSON.parse(this.storage.getItem(M.baseKey)).sessions,
              ).map(function (bE) {
                return bE.sessionTimestamp;
              });
              var bB = Object.values(
                JSON.parse(this.storage.getItem(M.baseKey)).sessions,
              ).map(function (bE) {
                return bE.sessionKey;
              });
              var bA = Math.max.apply(null, bC);
              return bA;
            }
          },
          getLatestSessionKey: function () {
            if (!this.isActive()) {
              return null;
            }
            if (null !== this.storage.getItem(M.baseKey)) {
              var bF = JSON.parse(this.storage.getItem(M.baseKey)).sessions;
              var bD = Object.values(
                JSON.parse(this.storage.getItem(M.baseKey)).sessions,
              ).map(function (bG) {
                return bG.sessionTimestamp;
              });
              var bC = Object.values(
                JSON.parse(this.storage.getItem(M.baseKey)).sessions,
              ).map(function (bG) {
                return bG.sessionKey;
              });
              var bB = Math.max.apply(null, bD);
              var bE = bD.indexOf(bB);
              var bA = bC[bE];
              return bA;
            }
          },
          getSessions: function () {
            if (!this.isActive()) {
              return null;
            }
            if (null !== this.storage.getItem(M.baseKey)) {
              return JSON.parse(this.storage.getItem(M.baseKey)).sessions;
            }
          },
          getLatestSession: function () {
            if (!this.isActive()) {
              return null;
            }
            if (null !== this.storage.getItem(M.baseKey)) {
              var bC = JSON.parse(this.storage.getItem(M.baseKey)).sessions;
              var bB = this.getLatestSessionKey();
              var bA = bC[bB];
              return bA;
            }
          },
          hasActiveSession: function () {
            if (!this.isActive()) {
              return null;
            }
            return M.getTimestamp() <
              this.getLatestSessionTimestamp() + this.activeSessionIndicator
              ? true
              : false;
          },
          getAllItems: function () {
            if (!this.isActive()) {
              return null;
            }
            var bA = JSON.parse(this.storage.getItem(M.baseKey));
            return bA;
          },
        },
        init: function () {
          if (
            typeof a0.storage != 'undefined' &&
            typeof a0.storage.active != 'undefined'
          ) {
            this.setActive(a0.storage.active);
          }
          if (this.isActive()) {
            this.cookie.init();
            this.local.init();
            this.session.init();
            this.recoverParams();
            this.recoverHash();
            if (
              typeof a0.storage != 'undefined' &&
              typeof a0.storage.grantExternalStorageAccess != 'undefined' &&
              a0.storage.grantExternalStorageAccess
            ) {
              B.extStorage = this;
            }
          }
          this.initialized = true;
        },
        getSessionParams: function () {
          if (!this.isActive()) {
            return null;
          }
          var bB = this.session.getAllItems(),
            bD = Object.keys(bB.data),
            bC = Object.keys(bB.dataLifetime);
          if (bD.length) {
            var bE = this.getPassThrough();
            this.setPassThrough(false);
            for (var bA in bD) {
              this.set(
                bD[bA],
                bB.data[bD[bA]],
                bC.indexOf(bD[bA]) != -1 ? bB.dataLifetime[bD[bA]] : undefined,
              );
            }
            this.setPassThrough(bE);
          }
        },
        initParams: function () {
          M.inc(M.callsKey, 0);
          M.inc(M.rebouncesKey, 0);
          M.inc(M.rebounceableProspectivesKey, 0);
          M.inc(M.rebounceablesKey, 0);
          M.inc(M.previousHistoryLengthKey, 0);
          M.inc(M.lastRebounceKey, 0);
          M.set(M.rebouncedKey, false, Number.NaN);
        },
        checkParamsIntegrity: function () {
          if (!this.isActive()) {
            return null;
          }
          var bA = this.get(M.callsKey) == this.session.get(M.callsKey),
            bB = this.get('urls').length == this.session.get('urls').length;
          return bA && bB;
        },
        recoverParams: function () {
          if (!this.isActive()) {
            return null;
          }
          this.getSessionParams();
          this.initParams();
        },
        recoverHash: function () {
          if (!this.isActive()) {
            return null;
          }
          var bD = this.get(M.hashKey),
            bC = this.cookie.get(M.hashKey),
            bA = this.session.get(M.hashKey),
            bB = this.local.get(M.hashKey),
            bE = bD || bC || bA || bB;
          if (typeof bD == 'undefined') {
            this.set(M.hashKey, bE);
          }
          if (typeof bC == 'undefined' || bC != bD) {
            this.cookie.set(M.hashKey, bE);
          }
          if (typeof bA == 'undefined' || bA != bD) {
            this.session.set(M.hashKey, bE);
          }
          if (typeof bB == 'undefined' || bB != bD) {
            this.local.set(M.hashKey, bE);
          }
        },
        setData: function (bA) {
          if (!this.isActive()) {
            return null;
          }
          this.params = bA;
        },
        setDataLifetime: function (bA) {
          if (!this.isActive()) {
            return null;
          }
          this.paramsLifetime = bA;
        },
        has: function (bA) {
          if (!this.isActive()) {
            return null;
          }
          return typeof this.paramsLifetime[bA] == 'undefined' ||
            this.paramsLifetime[bA] == 0 ||
            this.paramsLifetime[bA] > new Date().getTime() / 1000
            ? bA in this.params
            : undefined;
        },
        add: function (bB, bC) {
          if (!this.isActive()) {
            return null;
          }
          if (typeof bB == 'undefined') {
            bB = null;
          }
          var bA = this.get(bB);
          if (!Array.isArray(bA)) {
            bA = [];
          }
          bA.push(bC);
          if (null === bB) {
            return;
          }
          this.set(bB, bA);
        },
        inc: function (bB, bC, bA) {
          if (!this.isActive()) {
            return null;
          }
          if (typeof bB == 'undefined') {
            bB = null;
          }
          if (typeof bC == 'undefined') {
            bC = 1;
          }
          if (typeof bA == 'undefined') {
            bA = Number.MAX_SAFE_INTEGER;
          }
          if (null === bB) {
            return;
          }
          this.set(bB, Math.min((this.get(bB) | 0) + bC, bA));
        },
        dec: function (bB, bC, bA) {
          if (!this.isActive()) {
            return null;
          }
          if (typeof bB == 'undefined') {
            bB = null;
          }
          if (typeof bC == 'undefined') {
            bC = 1;
          }
          if (typeof bA == 'undefined') {
            bA = 0;
          }
          if (null === bB) {
            return;
          }
          this.set(bB, Math.max((this.get(bB) | 0) - bC, bA));
        },
        get: function (bA) {
          if (!this.isActive()) {
            return null;
          }
          return typeof this.paramsLifetime[bA] == 'undefined' ||
            this.paramsLifetime[bA] == 0 ||
            this.paramsLifetime[bA] > new Date().getTime() / 1000
            ? this.params[bA]
            : undefined;
        },
        set: function (bB, bC, bA) {
          if (!this.isActive()) {
            return null;
          }
          this.params[bB] = bC;
          if (typeof bA != 'undefined' && isNaN(bA)) {
            return;
          }
          if (typeof bA != 'undefined') {
            this.setLifetime(bB, bA);
          }
          if (this.getPassThrough()) {
            this.session.set(bB, bC);
          }
        },
        getLifetime: function () {
          if (!this.isActive()) {
            return null;
          }
          return (
            JSON.parse(this.storage.getItem(M.baseKey + M.lifetimeKey)) ||
            this.defaultLifetimeStructure()
          );
        },
        setLifetime: function (bB, bA) {
          if (!this.isActive()) {
            return null;
          }
          if (bA === null || bA === false || bA === -1) {
            this.delete(bB);
          } else {
            if (typeof this.params[bB] != 'undefined') {
              this.paramsLifetime[bB] =
                bA > 0 ? Math.floor(new Date().getTime() / 1000) + bA : 0;
            } else {
              delete this.paramsLifetime[bB];
            }
          }
        },
        resetLifetime: function () {
          if (!this.isActive()) {
            return null;
          }
        },
        delete: function (bA) {
          if (!this.isActive()) {
            return null;
          }
          delete this.params[bA];
          delete this.paramsLifetime[bA];
          if (this.getPassThrough()) {
            this.session.delete(bA);
          }
        },
        clearStorage: function () {
          if (!this.isActive()) {
            return null;
          }
          var bA = this.getPassThrough();
          this.setPassThrough(false);
          this.setData({});
          this.setDataLifetime({});
          this.setPassThrough(bA);
        },
        clearStorageAll: function (bA) {
          if (!this.isActive()) {
            return null;
          }
          this.clearStorage(bA);
          this.session.clearStorage(bA);
          this.local.clearStorage(bA);
          this.cookie.clearStorage(bA);
          if (typeof bA == 'undefined' || !bA) {
            this.init();
          }
        },
        getPassThrough: function () {
          return this.passThrough;
        },
        setPassThrough: function (bA) {
          this.passThrough = bA;
        },
        isActive: function () {
          return this.active;
        },
        setActive: function (bA) {
          this.active = bA;
        },
        getTimestamp: function () {
          return (
            ((
              Date.now ||
              function () {
                return +new Date();
              }
            )() /
              1000) |
            0
          );
        },
        createRandomString: function () {
          var bA;
          do {
            bA = Math.random().toString(36).slice(2);
          } while (!isNaN(bA.substr(0, 1)));
          return bA;
        },
        createRandomURL: function () {
          return document.location.origin + '/' + this.createRandomString();
        },
        defaultCallStructure: function () {
          var bA = {},
            bB = this.getTimestamp();
          bA.timestamp = bB;
          bA.referrer = '';
          bA.previous = '';
          bA.url = '';
          bA.site = '';
          bA.reloads = 0;
          bA.stack = 0;
          bA.origins = [];
          return bA;
        },
        appendURL: function (bE) {
          if (!this.isActive()) {
            return null;
          }
          M.inc(M.callsKey);
          M.add(M.callsKey + M.timestampsSuffixKey, M.getTimestamp());
          bE = bE || {};
          var bI = this.get('urls') || [],
            bH = bI.length - 1,
            bC = bE.historyLength || history.length,
            bA = {};
          if (a0.correctReferrer && bI.length) {
            var bM = (history.state ? history.state.stack : false) || bC,
              bJ = this.get('lastStack') || 0;
            if (Math.abs(bM - bJ) <= 2) {
              bA.referrer = [new URL(location.href)]
                .map(function (bO) {
                  bO.pathname = bO.search = '';
                  return bO;
                })
                .shift()
                .toString();
              if (aX(bA.referrer) == aX(document.referrer)) {
                delete bA.referrer;
              }
            }
          }
          var bK = bE.referrer || bA.referrer || document.referrer || '',
            bG = bE.previous || bA.previous || bK + '',
            bB = bE.href || bA.href || location.href,
            bL = (
              typeof bE.ancestorOrigins != 'undefined'
                ? Object.values(bE.ancestorOrigins)
                : typeof location.ancestorOrigins != 'undefined'
                  ? Object.values(location.ancestorOrigins)
                  : []
            ).filter(function (bO) {
              return typeof bO == 'string';
            });
          var bD = true;
          if (
            typeof a0.entryStateReferrerCheck != 'undefined' &&
            a0.entryStateReferrerCheck &&
            bI.length
          ) {
            bD =
              Array.from(bI)
                .concat({ referrer: bK })
                .map(function (bO) {
                  return bO.referrer;
                })
                .filter(function (bP, bO, bQ) {
                  return bQ.indexOf(bP) === bO;
                }).length > 1
                ? true
                : false;
          }
          if (typeof history.replaceState == 'function') {
            if (!K()) {
              if (
                !history.state ||
                (!history.state.stack && !history.state.page)
              ) {
                history.replaceState(
                  this.setStateProperties({ stack: bC, page: bB }),
                  null,
                );
              }
            } else {
              if (
                !bE.historyState ||
                (!bE.historyState.stack && !bE.historyState.page)
              ) {
                I({ stack: bC, page: bB });
              }
            }
          }
          if (typeof bI != 'undefined') {
            if (
              bI.length == 0 ||
              typeof this.get(M.entryStateKey) == 'undefined' ||
              (bD && aX(bK || 'https://www.kupona.de') != aX(bB))
            ) {
              var bM = history.state.stack || bC;
              var bJ = this.get('lastStack') || 0;
              if (bM > bJ || typeof this.get(M.entryStateKey) == 'undefined') {
                if (!K()) {
                  this.set(
                    M.entryStateKey,
                    this.setStateProperties(this.getStateProperties()),
                  );
                } else {
                  this.set(M.entryStateKey, { stack: bC, page: bB });
                }
              }
            }
            if (
              (typeof a0.referrerCheckOnHistoryBack != 'undefined' &&
                a0.referrerCheckOnHistoryBack) ||
              (typeof a0.referrerCheckOnReload != 'undefined' &&
                a0.referrerCheckOnReload)
            ) {
              var bM = history.state.stack || bC;
              var bJ = this.get('lastStack') || 0;
              if (
                (a0.referrerCheckOnHistoryBack && bM < bJ) ||
                (a0.referrerCheckOnReload && bM == bJ)
              ) {
                var bF = bI
                  .filter(function (bO) {
                    return aX(bO.referrer || 'https://www.kupona.de') != aX(bB);
                  })
                  .filter(function (bO) {
                    return bO.url == bB && bO.referrer != bK;
                  });
                if (bF.length) {
                  bK = bF.shift().referrer;
                }
              }
            }
            if (bI.length && bI[bH].url === bB && bI[bH].referrer === bK) {
              bI[bH].reloads++;
            } else {
              var bN = this.defaultCallStructure();
              bN.referrer = bK;
              bN.previous = bG;
              bN.url = bB;
              bN.site = a0.site;
              bN.stack = bC;
              bN.origins = bL;
              if (bN.origins.length) {
                bN.url =
                  bN.referrer =
                  bN.previous =
                    bN.origins[bN.origins.length - 1];
              }
              if (bI.length) {
                bN.previous = bI[bH].url;
                bG = bN.previous;
                if (bI[bH].stack == bN.stack) {
                  bN.stack = bI[bH].stack - 1;
                }
              }
              bI.push(bN);
            }
            this.set('urls', bI);
            this.set(M.lastSessionTimestampKey, M.getTimestamp());
            this.set('lastStack', history.state.stack || bC);
          }
        },
        setStateProperties: function (bB) {
          var bA = history.state ? Object.entries(history.state) : [];
          if (typeof bB == 'object') {
            bA.push.apply(bA, Object.entries(bB));
          }
          return Object.fromEntries(bA);
        },
        getStateProperties: function (bA) {
          if (typeof bA == 'object') {
            bA = Object.keys(bA);
          }
          if (typeof bA == 'undefined') {
            bA = ['stack', 'page', 'rebounce'];
          }
          return Object.fromEntries(
            Object.entries(history.state).filter(function (bB) {
              return bB.length && bA.indexOf(bB[0]) != -1;
            }),
          );
        },
      };
      if (T('BeforeInitStorage')) {
        M = v('BeforeInitStorage', M);
      }
      M.init();
      if (!K()) {
        M.appendURL();
      }
      if (T('AfterInitStorage')) {
        M = v('AfterInitStorage', M);
      }
    }
    this.getStorage = function () {
      return typeof a0.storage != 'undefined' && M
        ? typeof a0.storage.grantStorageAccess != 'undefined' &&
          a0.storage.grantStorageAccess
          ? M
          : typeof a0.storage.grantExternalStorageAccess != 'undefined' &&
              a0.storage.grantExternalStorageAccess
            ? B.extStorage
            : null
        : null;
    };
    function aX(bB, bA) {
      var bC;
      if (
        typeof bB == 'undefined' ||
        (bB == '' && a0.defaultUrlToCurrentLocationOnDomainCheck)
      ) {
        bB = location.href;
      }
      if (typeof bA == 'undefined') {
        bA = a0.excludeSubdomainOnDomainCheck || false;
      }
      bC = new URL(bB || 'https://www.kupona.de').host;
      if (bA) {
        bC = bC.split('.').slice(-2).join('.');
      }
      return bC;
    }
    function ad(bC, bB) {
      var bA;
      if (
        typeof bC == 'undefined' ||
        (bC == '' && a0.defaultUrlToCurrentLocationOnDomainCheck)
      ) {
        bC = location.href;
      }
      if (typeof bB == 'undefined') {
        bB = a0.excludeSubdomainOnDomainCheck || false;
      }
      bA = new URL(bC || 'https://www.kupona.de').origin;
      if (bB) {
        bA = [new URL(bC)]
          .map(function (bD) {
            bD.host = aX(bD, bB);
            return bD;
          })
          .shift().origin;
      }
      return bA;
    }
    function aW(bB) {
      if (typeof bB == 'undefined') {
        bB = window.event;
      }
      if (T('OnMessage')) {
        v('OnMessage', bB);
      }
      if (bu) {
        return;
      }
      aa.source = bB.source;
      aa.origin = bB.origin;
      aa.data = {};
      aa.valid = false;
      aa.event = bB;
      if (typeof bB.data == 'string') {
        if (bB.data.indexOf('origin') != -1) {
          var bA = JSON.parse(bB.data);
          aa.data = bA;
          if (typeof bA.sourceId != 'undefined') {
            if (ba.indexOf(bA.sourceId) != -1) {
              if (T('OnValidMessage')) {
                v('OnValidMessage', bA, bB);
              }
              if (
                typeof bA.auth != 'undefined' &&
                typeof bA.authSource != 'undefined' &&
                bA.authSource == 'KPEXT'
              ) {
                if (
                  bA.authSource == 'KPEXT' &&
                  z() ==
                    bA.auth
                      .split('')
                      .map(function (bD, bC) {
                        return String.fromCharCode(
                          bD.charCodeAt(0) - Math.floor(bC / 2),
                        );
                      })
                      .reverse()
                      .join('')
                ) {
                  aa.valid = true;
                  if (typeof bA.version != 'undefined') {
                    bm = bA.version;
                  }
                  if (typeof bA.level != 'undefined') {
                    ab = bA.level;
                  }
                  aG = true;
                  setTimeout(function () {
                    aI();
                  }, 0);
                } else {
                  console.error(
                    "There has been a problem with the authentication: ext module didn't authenticate correctly. Communication will be blocked",
                  );
                  ao = true;
                  bu = true;
                }
              } else {
                if (
                  aG &&
                  typeof bA.messageSource != 'undefined' &&
                  bA.messageSource.indexOf('KPEXT') == 0
                ) {
                  aa.valid = true;
                  if (typeof bA.extension != 'undefined') {
                    switch (bA.extension) {
                      case 'reBounce':
                        if (typeof bA.method != 'undefined') {
                          switch (bA.method) {
                            case 'loaded':
                              A = true;
                              setTimeout(function () {
                                Q();
                                bp();
                              }, 0);
                              break;
                            case 'setPageData':
                              setTimeout(function () {
                                aH(bA.params);
                              }, 0);
                              break;
                            case 'reBounced':
                              setTimeout(function () {
                                bw(bA.params.param);
                              }, 0);
                              break;
                            case 'storage:set':
                              setTimeout(function () {
                                if (
                                  typeof bA.params.value == 'string' &&
                                  (bA.params.value.indexOf('{') == 0 ||
                                    bA.params.value.indexOf('[') == 0)
                                ) {
                                  bA.params.value = JSON.parse(bA.params.value);
                                }
                                if (bA.params.lifetime == 'NaN') {
                                  bA.params.lifetime = Number.NaN;
                                }
                                M.set(
                                  bA.params.key,
                                  bA.params.value,
                                  bA.params.lifetime,
                                );
                              }, 0);
                              break;
                            case 'storage:delete':
                              setTimeout(function () {
                                M.delete(bA.params.key);
                              }, 0);
                              break;
                          }
                        }
                        break;
                    }
                  }
                }
              }
            } else {
              console.error(
                'There has been a problem with the message: invalid sourceId specified',
              );
            }
          } else {
            console.error(
              'There has been a problem with the message: sourceId is missing',
            );
          }
        } else {
          console.error(
            'There has been a problem with the message: origin is missing',
          );
        }
      }
    }
    function z() {
      if (typeof S == 'undefined') {
        do {
          S = Math.round(Math.random() * Number.MAX_SAFE_INTEGER)
            .toString(36)
            .split('')
            .sort(function () {
              return Math.random() - 0.5;
            })
            .join('');
        } while (!isNaN(S.substr(0, 1)));
      }
      return S;
    }
    function aE() {
      if (typeof bl == 'undefined') {
        bl = 'KPRB';
      }
      return bl;
    }
    function i(bD) {
      var bB = '',
        bA = '',
        bE = 32;
      while (bA.length < bE) {
        bA += parseInt(Math.random() * Number.MAX_SAFE_INTEGER).toString();
      }
      bB = bA
        .split('')
        .map(function (bF) {
          return Math.max(
            Math.floor((Math.random() * 255) / Math.max(parseInt(bF), 1)),
            Math.max(Math.floor(Math.random() * 128), 36),
          ).toString(36);
        })
        .slice(0, bE / 2)
        .join('')
        .match(/(.{8})/g)
        .join('-');
      if (typeof bD != 'undefined') {
        var bC = G(bD);
        bB += '-' + Object.values(bC).join('d');
      }
      ba.push(bB);
      return bB;
    }
    function G(bC) {
      var bB = {};
      if (typeof bC != 'string') {
        bC = JSON.stringify(bC);
      }
      var bA = bC.split('');
      bB.len = bC.length;
      bB.sum = bA.reduce(function (bD, bE) {
        return bD + bE.charCodeAt(0);
      }, 0);
      bB.avg = Math.floor(bB.sum / bA.length) || 0;
      return bB;
    }
    function ax(bA, bG, bE) {
      var bD = 'messageSource';
      if (typeof bA == 'undefined') {
        bD = 'authSource';
        bG = 'auth';
        bE = z();
      }
      var bC = {};
      bC.origin = location.host;
      bC[bD] = aE();
      bC.target = '';
      bC.id = '';
      bC.sourceId = '';
      if (typeof bA != 'undefined') {
        bC.method = bA;
      }
      if (typeof bG != 'undefined' && typeof bE != 'undefined') {
        var bF = Array.isArray(bG) ? bG : [bG],
          bB = Array.isArray(bE) ? bE : [bE];
        bF.map(function (bI, bH) {
          bC[bI] = bB[bH];
        });
      }
      bC[M.levelKey] = M.levelPlaceholder;
      if (T('MessageStructure')) {
        bC = v('MessageStructure', bC);
      }
      return bC;
    }
    function aB() {
      var bA = {};
      bA.name = 'extend';
      bA.value = {};
      bA.value.extensions = {};
      var bB = [
        [
          'reBounce',
          'script',
          false,
          'mastertag_rb.js',
          false,
          false,
          'reBounce',
          { cacheTime: 86400 },
          0,
        ],
      ];
      bB.map(function (bC) {
        bA.value.extensions[bC[0]] = W.apply(this, bC.slice(1));
      });
      if (T('ExtensionsMessageStructure')) {
        bA = v('ExtensionsMessageStructure', bA);
      }
      return bA;
    }
    function W(bF, bI, bH, bE, bC, bA, bG, bB) {
      var bD = {};
      bD.type = bF;
      if (bI) {
        bD.host = bI;
      }
      bD.location = bH;
      if (bE) {
        bD.locationAttribute = bE;
      }
      if (bC) {
        bD.domTarget = bC;
      }
      bD.id = bA;
      bD.forceRemote = false;
      bD.unregisterEmbedded = false;
      bD.removeEmbedded = false;
      if (bG && typeof bG == 'object') {
        Object.keys(bG).forEach(function (bJ) {
          bD[bJ] = bG[bJ];
        });
      }
      if (bB) {
        if (bB | 1) {
          bD.forceRemote = true;
        }
        if (bB | 2) {
          bD.unregisterEmbedded = true;
        }
        if (bB | 4) {
          bD.removeEmbedded = true;
        }
      }
      if (T('ExtensionMessageStructure')) {
        bD = v('ExtensionMessageStructure', bD);
      }
      return bD;
    }
    function bj() {
      var bA = {};
      bA.name = 'params';
      bA.value = {};
      bA.value.customerId = aD;
      bA.value.redirect = s;
      var bB = [
        'rebounceableProspectives',
        'rebounceables',
        'rebounces',
        'previousHistoryLength',
        'entryState',
        'hash',
      ];
      bB.map(function (bD) {
        var bC = M.get(M[bD + 'Key']);
        bA.value[bD] = bC;
      });
      if (T('RebounceMessageStructure')) {
        bA = v('RebounceMessageStructure', bA);
      }
      return bA;
    }
    function bf() {
      g(ax(), true, 'KPEXT');
    }
    function h() {
      var bA = aB();
      g(ax('extend', ['customerId', bA.name], [aD, bA.value]), 'KPEXT');
    }
    function w() {
      g(
        ax(
          'initExtension',
          ['customerId', 'conf', 'params'],
          [aD, a0, M.params],
        ),
        'KPEXT:reBounce',
      );
    }
    function m() {
      g(ax('getPageData', 'params', {}), 'KPEXT:reBounce');
    }
    function I(bA) {
      g(ax('replaceState', 'params', bA), 'KPEXT:reBounce');
    }
    function bv() {
      var bA = bj();
      g(ax('reBounce', bA.name, bA.value), 'KPEXT:reBounce');
    }
    function g(bE, bD, bG) {
      if (typeof bD == 'string' && typeof bG == 'undefined') {
        bG = bD;
        bD = false;
      }
      if (typeof bG != 'undefined') {
        bE.target = bG;
      }
      bE.id = i(bE);
      bE = JSON.stringify(bE);
      bD = bD || false;
      var bF = !bD ? aa.source : parent,
        bB = !bD ? aa.origin : '*';
      if (T('SendMessage')) {
        var bC = v('SendMessage', bE, bD, bG, bF);
        if (typeof bC.message != 'undefined') {
          bE = bC.message;
        }
        if (typeof bC.auth != 'undefined') {
          bD = bC.auth;
        }
        if (typeof bC.target != 'undefined') {
          bG = bC.target;
        }
        if (typeof bC.source != 'undefined') {
          bF = bC.source;
        }
      }
      if (K()) {
        if (
          (aa.valid &&
            ((typeof bF != 'undefined' && typeof bB != 'undefined') ||
              typeof aa.event != 'undefined')) ||
          bD
        ) {
          if (!bD) {
            bF.postMessage(bE.replace(M.levelPlaceholder, ab), bB);
          } else {
            var bH = 1,
              bA = 5;
            do {
              if (bH > 1) {
                bF = bF.parent;
              }
              bF.postMessage(bE.replace(M.levelPlaceholder, bH), bB);
              bH++;
            } while (bF !== bF.parent && bH < bA);
          }
        }
      }
    }
    function ap() {
      bf();
      setTimeout(function () {
        if (!aG) {
          var bA =
            "There has been a problem with the authentication: ext module didn't respond or authenticate correctly";
          console.error(bA);
          console.error('Fallback to no rebounce');
          P(aY('error', 'connect-ext', { eventMessage: bA }));
          aQ();
        }
      }, a0.extTimeout);
    }
    function aI() {
      h();
      setTimeout(function () {
        if (!A) {
          var bA =
            "There has been a problem with the module communication: ext module didn't respond";
          console.error(bA);
          console.error('Fallback to no rebounce');
          P(aY('error', 'connect-ext', { eventMessage: bA }));
          aQ();
        }
      }, a0.extTimeout);
    }
    function Q() {
      w();
    }
    function bp() {
      m();
    }
    function aH(bA) {
      M.appendURL(bA);
      bh(H);
    }
    function aQ() {
      bg(false, []);
    }
    function bg(bD, bC, bB) {
      if (typeof bD == 'undefined') {
        bD = false;
      }
      if (typeof bC == 'undefined') {
        bC = [];
      }
      if (typeof bB == 'undefined') {
        bB = false;
      }
      if (T('SetRebounce')) {
        var bA = v('SetRebounce', bD, bC, bB);
        if (typeof bA.redirect != 'undefined') {
          bD = bA.redirect;
        }
        if (typeof bA.rules != 'undefined') {
          bC = bA.rules;
        }
        if (typeof bA.templateUrl != 'undefined') {
          bB = bA.templateUrl;
        }
      }
      if (bB && bB != '') {
        if (bB.indexOf('http') != 0) {
          bB = 'https://' + bB;
        }
        b = bB;
        s = y == 1 ? b : X;
      }
      M.set('redirect', bD, Number.NaN);
      M.set('rules', bC, Number.NaN);
      M.set('templateUrl', bB, Number.NaN);
    }
    function c() {
      if (!K()) {
        bh(H);
      } else {
        if (window.attachEvent) {
          window.attachEvent('onmessage', aW);
        }
        if (document.attachEvent) {
          document.attachEvent('onmessage', aW);
        }
        if (window.addEventListener) {
          window.addEventListener('message', aW);
        }
        ap();
      }
    }
    function a5(bB, bA) {
      if (typeof bB == 'undefined') {
        bB = false;
      }
      if (typeof bA == 'undefined') {
        bA = [];
      }
      return { hash: M.createRandomString(), redirect: bB, rules: bA };
    }
    function bh(bF) {
      var bD = bF,
        bH = 'mastertag',
        bA = !!bD.match('.*' + aD + '.json');
      var bB = true,
        bJ = null;
      var bG = {
        url: location.href,
        referrer: document.referrer,
        id: '',
        session: '',
        hash: undefined,
      };
      if (M.session.getData()) {
        bG.id = aD;
        bG.session = M.session.getData();
        bG.hash = M.session.get(M.hashKey);
      }
      var bC = {
        method: 'GET',
        mode: 'cors',
        cache: 'no-cache',
        credentials: 'same-origin',
        headers: new Headers(),
        redirect: 'follow',
      };
      if (af) {
        var bE = new FormData();
        bE.append(bH, JSON.stringify(bG));
        bC.method = 'POST';
        bC.body = bE;
      }
      if (T('CheckReBounce')) {
        tmp = v('CheckReBounce', aD, bG, bC, bB);
        if (typeof tmp.rebounceData != 'undefined') {
          bJ = tmp.rebounceData;
        }
        if (typeof tmp.data != 'undefined') {
          bG = tmp.data;
        }
        if (typeof tmp.fetchData != 'undefined') {
          bC = tmp.fetchData;
        }
        if (typeof tmp.doFetch != 'undefined') {
          bB = tmp.doFetch;
        }
      }
      if (bB) {
        fetch(bD, bC)
          .then(function (bK) {
            var bM = new Date().getTime();
            var bN = KPMasterTag.getConf(KPMasterTag);
            bN.data.times.ReBounceRulesLoaded = bM - kp_start_time + 'ms';
            bN.data.times.ReBounceTriggerable = '-';
            if (!bK.ok) {
              var bL =
                'there has been a problem with the fetch operation: network response was not OK';
              console.error(bL);
              console.error('fallback to no ReBounce');
              P(aY('error', 'fetch-rules', { eventMessage: bL }));
              return a5();
            }
            return bK.json();
          })
          .then(function (bL) {
            if (bL.error) {
              var bK =
                'there has been a problem with the fetch operation: ' +
                bL.error;
              console.error(bK);
              console.error('fallback to no ReBounce');
              P(aY('error', 'fetch-rules', { eventMessage: bK }));
              return a5(bL.redirect || false);
            } else {
              if (bA) {
                bL.hash = M.get(M.hashKey) || M.createRandomString();
                if (typeof bL.hash == 'undefined' || bL.hash == 'undefined') {
                  bL.hash = M.createRandomString();
                }
              }
            }
            return bL;
          })
          .then(function (bK) {
            bK.rules = bK.rules.map(function (bL) {
              if (
                typeof bL.condition == 'undefined' &&
                typeof bL.query != 'undefined'
              ) {
                var bM = bL.query;
                delete bL.query;
                bL.condition = bM;
              }
              return bq == bk
                ? bL
                : {
                    parameter: bL.parameter,
                    value: bL.value,
                    comparison: bL.comparison,
                  };
            });
            return bK;
          })
          .then(function (bL) {
            M.set(M.hashKey, bL.hash);
            M.local.set(M.hashKey, bL.hash);
            M.cookie.set(M.hashKey, bL.hash);
            bg(!!bL.redirect, bL.rules, bL.template_url);
            if (aA()) {
              if (!K()) {
                av(s);
              } else {
                bv();
              }
            } else {
              var bK = M.get(M.entryStateKey);
              if (
                history.state.stack == bK.stack + 1 &&
                history.state.page == bK.page &&
                ((a0.skipRebounceFlagCheck &&
                  typeof history.state.rebounce == 'undefined') ||
                  history.state.rebounce)
              ) {
                if (
                  a0.skipOnFailedRulesCheck &&
                  M.session.get('passedRules') === false
                ) {
                  return;
                }
                if (a0.reBounceBehaviourMode == 1) {
                  if (a0.skipNextPopstate || a0.skipPopstateOnHistoryModBack) {
                    a1(true);
                  }
                  if (!a0.skipHistoryBack) {
                    history.back();
                  }
                } else {
                  if (a0.reBounceBehaviourMode == 2) {
                    J(s);
                  }
                }
              }
            }
          })
          .catch(function (bL) {
            var bK = 'there has been a problem with the fetch operation: ' + bL;
            console.error(bK);
            console.error('fallback to no ReBounce');
            P(aY('error', 'fetch-rules', { eventMessage: bK }));
            aQ();
          });
      } else {
        if (null !== bJ) {
          bG = bJ;
          bG.hash = M.get(M.hashKey) || M.createRandomString();
          if (typeof bG.hash == 'undefined' || bG.hash == 'undefined') {
            bG.hash = M.createRandomString();
          }
          bG.rules.map(function (bK) {
            if (
              typeof bK.condition == 'undefined' &&
              typeof bK.query != 'undefined'
            ) {
              var bL = bK.query;
              delete bK.query;
              bK.condition = bL;
            }
          });
          M.set(M.hashKey, bG.hash);
          M.local.set(M.hashKey, bG.hash);
          M.cookie.set(M.hashKey, bG.hash);
          bg(!!bG.redirect, bG.rules);
          if (aA()) {
            if (!K()) {
              av(s);
            } else {
              bv();
            }
          }
        } else {
          var bI = 'there has been a problem with the fetch operation: no data';
          console.error(bI);
          console.error('fallback to no ReBounce');
          P(aY('error', 'fetch-rules', { eventMessage: bI }));
          aQ();
        }
      }
    }
    function aA() {
      var bB = M.get('redirect'),
        bA = aT();
      if (
        a0.keepRulesCheckResult &&
        (!a0.lockFailedRulesCheckResult ||
          M.session.get('passedRules') !== false)
      ) {
        M.session.set('passedRules', bA);
      }
      return bB && bA;
    }
    function F() {
      var bA = [{ parameter: 'devMode', value: '1', comparison: '=' }];
      if (T('DefaultRules')) {
        bA = v('DefaultRules', bA);
      }
      return bA;
    }
    function C() {
      var bA = [];
      if (T('AdditionalRules')) {
        bA = v('AdditionalRules', bA);
      }
      return bA;
    }
    function au(bJ, bE) {
      var bI = false;
      if (bJ.length > 0) {
        bJ.map(function (bK) {
          if (bK.parameter == 'devMode') {
            bI = true;
            ai = !!bK.value;
          }
          return bK;
        });
      }
      if (false === bI) {
        bJ.push({ parameter: 'devMode', value: 1, comparison: '=' });
        ai = 1;
      }
      var bA = [
          'devMode',
          'actions',
          'referrer',
          'referrer.',
          'url',
          'url.',
          'history.',
          'entry',
          'entry.',
          'calls',
          'calls.',
          'rebounces',
        ].reverse(),
        bB = [],
        bH,
        bD,
        bG;
      for (var bF in bA) {
        bG = bA[bF];
        bH = 0;
        bJ.map(function (bL, bK) {
          if (
            bB.indexOf(bL.parameter) == -1 &&
            (bL.parameter == bG || bL.parameter.indexOf(bG) == 0)
          ) {
            bH++;
          }
          return bL;
        });
        if (bH > 0) {
          for (var bC = 0; bC < bH; bC++) {
            bD = false;
            bJ.map(function (bL, bK) {
              if (
                bB.indexOf(bL.parameter) == -1 &&
                (bL.parameter == bG || bL.parameter.indexOf(bG) == 0)
              ) {
                bD = bK;
              }
              return bL;
            });
            if (bD !== false) {
              bJ.unshift(bJ.splice(bD, 1)[0]);
              bB.push(bJ[0].parameter);
            }
          }
        }
      }
      if (typeof bE != 'undefined') {
        if (typeof bE == 'string') {
          bE = bE.split(',');
        }
        if (bE.length) {
          bJ = bJ.filter(function (bK) {
            return bE.indexOf(bK.parameter) != -1;
          });
        }
      }
      if (T('FilterRules')) {
        bJ = v('FilterRules', bJ);
      }
      return bJ;
    }
    function L(bC, bB) {
      var bA;
      bA = !!bB.filter(function (bD) {
        return bD.parameter == bC ? true : false;
      }).length;
      return bA;
    }
    function at() {
      var bB;
      var bC = M.get('urls'),
        bA = bC[bC.length - 1];
      if (arguments.length > 1) {
        bB = bA[arguments[1]] || '';
      } else {
        bB = JSON.stringify(bA);
      }
      return bB;
    }
    function r() {
      var bC,
        bH = Array.from(arguments);
      if (bH.length > 1) {
        if (
          bH.indexOf('total') != -1 &&
          bH.indexOf('unique') != -1 &&
          bH.indexOf('total') < bH.indexOf('unique')
        ) {
          bH.push(bH.splice(1, 1).shift());
        }
        if (bH[bH.length - 1] != 'total') {
          var bD = M.get('urls');
          if (bH[bH.length - 1] != 'unique') {
            bC =
              bD
                .filter(function (bI) {
                  return bH[1].indexOf(bI.site) != -1;
                })
                .reduce(function (bJ, bI) {
                  return bJ + bI.reloads + 1;
                }, 0) || 0;
          } else {
            if (bH.length > 2) {
              var bA = [];
              bC =
                bD
                  .filter(function (bI) {
                    return bH[1].indexOf(bI.site) != -1;
                  })
                  .filter(function (bI) {
                    return bA.indexOf(bI.url) == -1 && bA.push(bI.url);
                  })
                  .reduce(function (bJ, bI) {
                    return bJ + 1;
                  }, 0) || 0;
            } else {
              bC =
                bD.reduce(function (bJ, bI) {
                  return bJ + 1;
                }, 0) || 0;
            }
          }
        } else {
          var bG = M.local.get(M.local.sessionsKey);
          if (bH.length > 2) {
            var bE = !!(bH[bH.length - 2] == 'unique'),
              bB = !!(bH[1] != 'unique');
            var bA = [];
            var bF = Object.values(bG)
              .map(function (bJ, bI) {
                return bJ.urls;
              })
              .reduce(function (bJ, bK) {
                var bI =
                  bK
                    .filter(function (bM, bL) {
                      return !bB || bH[1].indexOf(bM.site) != -1;
                    })
                    .filter(function (bL) {
                      return !bE
                        ? true
                        : bA.indexOf(bL.url) == -1 && !!(bA.push(bL.url) + 1);
                    })
                    .reduce(function (bM, bL) {
                      return bM + (!bE ? bL.reloads : 0) + 1;
                    }, 0) || 0;
                return bJ + bI;
              }, 0);
            bC = bF;
          } else {
            var bF = Object.values(bG)
              .map(function (bI) {
                return bI.calls;
              })
              .reduce(function (bJ, bI) {
                return bJ + bI;
              }, 0);
            bC = bF;
          }
        }
      } else {
        bC = M.get(bH[0]) || 0;
      }
      return bC;
    }
    function aL() {
      var bB,
        bC = Array.from(arguments),
        bA =
          typeof bC[0] == 'number' ||
          typeof bC[0] == 'undefined' ||
          bC[0] === null
            ? bC.shift()
            : undefined;
      bB = ar('referrer', bA);
      return bB;
    }
    function Z() {
      var bC,
        bD = Array.from(arguments),
        bB =
          typeof bD[0] == 'number' ||
          typeof bD[0] == 'undefined' ||
          bD[0] === null
            ? bD.shift()
            : undefined,
        bA = aL(bB);
      bC = aV(bA, bD);
      return bC;
    }
    function a4() {
      var bB,
        bC = Array.from(arguments),
        bA =
          typeof bC[0] == 'number' ||
          typeof bC[0] == 'undefined' ||
          bC[0] === null
            ? bC.shift()
            : undefined;
      bB = ar('url', bA);
      return bB;
    }
    function bt() {
      var bC,
        bD = Array.from(arguments),
        bB =
          typeof bD[0] == 'number' ||
          typeof bD[0] == 'undefined' ||
          bD[0] === null
            ? bD.shift()
            : undefined,
        bA = a4(bB);
      bC = aV(bA, bD);
      return bC;
    }
    function aC() {
      var bC,
        bE = Array.from(arguments),
        bB = bE.pop(),
        bA = bE.pop();
      var bD = M.get('urls').map(function (bF) {
        return bF.url;
      });
      bC = false;
      bD.forEach(function (bI, bF) {
        var bH = new RegExp(bA, 'i');
        var bG = (bH.exec(bI) || [null])[0];
        if (bG) {
          bC = true;
        }
      });
      return bC;
    }
    function f() {
      var bA,
        bC = Array.from(arguments);
      var bB = M.get('urls').map(function (bD) {
        return bD.url;
      });
      bA = false;
      bB.forEach(function (bF, bD) {
        var bE = aV(bF, bC);
        if (bE) {
          bA = true;
        }
      });
      return bA;
    }
    function ar(bE, bC, bA) {
      var bD;
      if (typeof bE != 'undefined') {
        var bF = M.get('urls');
        if (typeof bC == 'undefined' || bC === null) {
          bC = bF.length - 1;
        }
        var bB = bF[bC];
        if (typeof bB != 'undefined') {
          bD = bB[bE];
        } else {
          if (typeof bA != 'undefined') {
            bD = bA;
          }
        }
      }
      return bD;
    }
    function aV(bB, bG) {
      var bI;
      if (bG.length > 2) {
        var bC = 2,
          bF = 3,
          bE = 0,
          bA = 5;
        while (
          bE < bA &&
          typeof bG[bC] == 'string' &&
          ['{', '['].indexOf(bG[bC][0]) == -1
        ) {
          bC++;
          bF++;
          bE++;
        }
        if (typeof bG[bC] == 'string') {
          bG[bC] = JSON.parse(bG[bC] || '{}');
        }
        var bH = bG[bC] || {},
          bK = bG[bF] || '=',
          bD = bK[0] == '!',
          bJ;
        if (Object.keys(bH).length > 0) {
          switch (bK) {
            case '%':
            case '!%':
              bJ = false;
              break;
            case '=':
            case '!=':
              bJ = true;
          }
          bI = ah(bB, bH, bJ);
          if (bD) {
            bI = !bI;
          }
          switch (parseInt(bD + 0).toString() + parseInt(bI + 0).toString()) {
            case '01':
            case '10':
              bI = true;
              break;
            case '00':
            case '11':
              bI = false;
              break;
          }
        } else {
          bI = !bD;
        }
      }
      return bI;
    }
    function ah(bB, bF, bE) {
      if (
        (typeof bF == 'string' && bF == '') ||
        (typeof bF == 'object' && Object.keys(bF).length == 0)
      ) {
        return true;
      }
      if (typeof bF == 'string') {
        bF = JSON.parse(bF || '{}');
      }
      var bC = /[?&]([^=#&]+)=?([^&#]*)/g;
      var bA,
        bH,
        bD,
        bG = [];
      while ((bA = bC.exec(bB))) {
        bH = bA[1];
        bD = bA[2];
        if (bF.hasOwnProperty(bH)) {
          if (bF[bH].length == 0 || bF[bH].includes(bD) || bF[bH][0] == '*') {
            if (bE === false) {
              return true;
            } else {
              bG.push(bH);
            }
          } else {
            if (bE === true) {
              return false;
            }
          }
        }
      }
      if (bG.length < Object.keys(bF).length) {
        Object.keys(bF).map(function (bI) {
          if (
            bG.indexOf(bI) == -1 &&
            bF[bI].length > 0 &&
            bF[bI].indexOf('?') != -1
          ) {
            bG.push(bI);
          }
        });
      }
      if (bG.length == Object.keys(bF).length) {
        return true;
      }
      return false;
    }
    function q() {
      var bB,
        bC = Array.from(arguments),
        bA = aL();
      bB = R(bA, bC);
      M.set(M.referrerParameterKey, bB, Number.NaN);
      bB = true;
      return bB;
    }
    function k() {
      var bB,
        bC = Array.from(arguments),
        bA = a4();
      bB = R(bA, bC);
      M.set(M.urlParameterKey, bB, Number.NaN);
      bB = true;
      return bB;
    }
    function R(bB, bG) {
      var bC;
      if (bG.length > 2) {
        var bA = 2,
          bD = 0,
          bF = 5;
        while (
          bD < bF &&
          typeof bG[bA] == 'string' &&
          ['{', '['].indexOf(bG[bA][0]) == -1
        ) {
          bA++;
          bD++;
        }
        if (typeof bG[bA] == 'string') {
          bG[bA] = JSON.parse(bG[bA] || '{}');
        }
        var bE = bG[bA] || {};
        bC = aq(bB, bE);
      }
      return bC;
    }
    function aq(bC, bA) {
      if (
        (typeof bA == 'string' && bA == '') ||
        (typeof bA == 'object' && Object.keys(bA).length == 0)
      ) {
        return true;
      }
      var bD = /[?&]([^=#&]+)=?([^&#]*)/g;
      var bB,
        bH,
        bE,
        bG = [],
        bF = {};
      while ((bB = bD.exec(bC))) {
        bH = bB[1];
        bE = bB[2];
        if (bA.hasOwnProperty(bH)) {
          if (bE == '') {
            bE = bA[bH][0];
          }
          bG.push(bH);
          if (typeof bA[bH][1] != 'undefined') {
            bH = bA[bH][1];
          }
          bF[bH] = bE;
        }
      }
      if (bG.length < Object.keys(bA).length) {
        Object.keys(bA).map(function (bI) {
          if (bG.indexOf(bI) == -1) {
            bG.push(bI);
            if (typeof bA[bI] == 'object') {
              bE = typeof bA[bI][0] != 'undefined' ? bA[bI][0] : '';
              if (typeof bA[bI][1] != 'undefined') {
                bI = bA[bI][1];
              }
            }
            bF[bI] = bE;
          }
        });
      }
      bF = x(bF);
      return bF;
    }
    function a3() {
      var bA = {};
      Array.from(arguments).map(function (bB) {
        Object.keys(bB || {})
          .sort()
          .map(function (bC) {
            bA[bC] = bB[bC];
          });
      });
      return bA;
    }
    function x(bB) {
      if (Object.keys(bB).length == 1) {
        return bB;
      }
      var bF = Object.assign({}, bB);
      var bE = [],
        bA = [],
        bD = [];
      Object.keys(bF)
        .sort()
        .map(function (bG) {
          bG.indexOf('custom') == 0 ? bE.push(bG) : bA.push(bG);
        });
      bD = bE.concat(bA);
      var bC = Object.assign({}, bF),
        bF = {};
      bD.map(function (bG) {
        bF[bG] = bC[bG];
      });
      return bF;
    }
    function Y() {
      var bA,
        bC = Array.from(arguments),
        bB = bC.pop();
      if (bC.length > 1) {
        switch (bC[1]) {
          case 'isMobile':
            bA = window.matchMedia(
              'only screen and (any-pointer:coarse) and (max-width:760px) and (-webkit-min-device-pixel-ratio:2)',
            ).matches;
            break;
          case 'isDesktop':
            bA = !window.matchMedia(
              'only screen and (any-pointer:coarse) and (max-width:760px) and (-webkit-min-device-pixel-ratio:2)',
            ).matches;
            break;
          case 'matchMedia':
            if (bC.length > 2) {
              bB = bC.pop();
            }
            bA = window.matchMedia(bB).matches;
            break;
          case 'userAgent':
            bA = navigator.userAgent;
            break;
          case 'width':
            bA =
              window.innerWidth ||
              document.documentElement.clientWidth ||
              document.body.clientWidth;
            break;
          case 'height':
            bA =
              window.innerHeight ||
              document.documentElement.clientHeight ||
              document.body.clientHeight;
            break;
          default:
            break;
        }
      }
      return bA;
    }
    function bi() {
      var bB,
        bD = Array.from(arguments),
        bC = M.get(M.lastRebounceKey);
      if (bD.length > 1) {
        switch (bD[1]) {
          case 'ago':
            var bA =
              M.getTimestamp() - (typeof bC == 'undefined' || bC == 0 ? 0 : bC);
            if (bD.length > 2) {
              switch (bD[2]) {
                case 'seconds':
                  bB = bA;
                  break;
                case 'minutes':
                  bB = bA / 60;
                  break;
                case 'hours':
                  bB = bA / 3600;
                  break;
                case 'days':
                  bB = bA / 86400;
                  break;
                default:
                  break;
              }
              bB = Math.floor(bB);
            } else {
              bB = bA;
            }
            break;
          default:
            break;
        }
      } else {
        bB = bC;
      }
      return bB;
    }
    function aR() {
      var bE,
        bH = Array.from(arguments);
      if (bH.length > 1) {
        var bD = bH[1].split(','),
          bG = [];
        bG.push(bD.length);
        bG = bD.reduce(function (bK, bI) {
          var bJ = bI.split('.');
          bK.push(bJ.length);
          return bK.concat(bJ);
        }, bG);
        for (var bA = 0, bC = bG.shift(); bA < bC; bA++) {
          var bB = bG.shift(),
            bF = bG.splice(0, bB);
          switch (bF[0]) {
            case 'purge':
              bE = bd.apply(null, bF.slice(1));
              break;
            default:
              break;
          }
        }
      }
      return bE;
    }
    function bx() {
      var bA,
        bB = Array.from(arguments);
      bA =
        !!parseInt(bB[1]) == false ||
        (M.cookie.get('dev-mode') || '').split(',').indexOf(aD) != -1
          ? true
          : false;
      return bA;
    }
    function bz() {
      var bC = 0,
        bH = Array.from(arguments),
        bA = 0,
        bE = 'rebounces';
      if (bH.length > 1) {
        bE = bH[1] || 'rebounces';
        switch (bH[2]) {
          case 'in':
            var bG = (now = M.getTimestamp());
            if (bH.length > 2) {
              bA = bH[4] || 0;
              switch (bH[3]) {
                case 'seconds':
                  break;
                case 'minutes':
                  bA *= 60;
                  break;
                case 'hours':
                  bA *= 3600;
                  break;
                case 'days':
                  bA *= 86400;
                  break;
                default:
                  break;
              }
            }
            if (bA > 0) {
              bG -= bA;
            }
            if (bG < now) {
              var bF = M.local.getSessions(),
                bB = Object.values(bF);
              var bD = bB.map(function (bI) {
                return bI[bE + M.timestampsSuffixKey] || [];
              });
              bD = [].concat.apply([], bD);
              bD = bD.filter(function (bI) {
                return bI > bG;
              });
              bC = bD.length;
            }
            break;
          default:
            break;
        }
      }
      return bC;
    }
    function aw() {
      var bD,
        bG = Array.from(arguments),
        bC = bG.pop(),
        bF = bG.pop();
      if (bG.length > 1) {
        switch (bG[1]) {
          case 'google':
            if (bG.length > 2) {
              switch (bG[2]) {
                case 'shoppingads':
                  if (bG.length == 3) {
                    bD = ar('stack', 0, history.length) <= 2 ? true : false;
                  } else {
                    var bB = bG.slice(3).join('.');
                    var bE = /^parameter([0-9]*)$/i;
                    var bA = (bE.exec(bB) || [null])[0];
                    switch (bB) {
                      case bA:
                        if (typeof bF != 'undefined') {
                          bG.push(bF);
                        }
                        if (typeof bC != 'undefined') {
                          bG.push(bC);
                        }
                        bG = bG.slice(2);
                        bG.unshift(0);
                        bD = bt.apply(null, bG);
                        break;
                    }
                  }
                  break;
              }
            }
            break;
          default:
            break;
        }
      }
      return bD;
    }
    function bd() {
      var bB,
        bE = Array.from(arguments);
      if (bE.length) {
        switch (bE[0]) {
          case 'sessions':
            if (bE.length > 1) {
              var bD = M.local.get(M.local.sessionsKey),
                bC = M.getTimestamp() - bE[1],
                bA = 0;
              bD = Object.values(bD)
                .filter(function (bF) {
                  if (bF.sessionTimestamp < bC) {
                    bA++;
                  }
                  return bF.sessionTimestamp >= bC;
                })
                .reduce(function (bG, bF) {
                  bG[bF.sessionKey] = bF;
                  return bG;
                }, {});
              if (bA) {
                M.local.set(M.local.sessionsKey, bD);
              }
            }
            bB = true;
            break;
          default:
            break;
        }
      }
      return bB;
    }
    function ae(bH, bA, bS) {
      var bL,
        bD = Array.isArray(bH) ? bH : bH.split('.');
      var bE = /^referrer([0-9]*)$/i;
      var bJ = (bE.exec(bD[0]) || [null])[0];
      var bI = /^url([0-9]*)$/i;
      var bK = (bI.exec(bD[0]) || [null])[0];
      var bB = /^history([0-9]*)$/i;
      var bQ = (bB.exec(bD[0]) || [null])[0];
      switch (bD[0]) {
        case 'call':
          bL = at.apply(null, bD);
          break;
        case 'calls':
          if (typeof bA == 'string' && bA.indexOf('unique') != -1) {
            bD.push('unique');
          }
          if (typeof bA == 'string' && bA.indexOf('total') != -1) {
            bD.push('total');
          }
          bL = r.apply(null, bD);
          break;
        case bJ:
        case bK:
        case bQ:
          var bC;
          switch (bD[0]) {
            case bJ:
              bC = 1;
              break;
            case bK:
              bC = 2;
              break;
            case bQ:
              bC = 3;
              break;
          }
          if (typeof bC != 'undefined') {
            if (bD.length == 1) {
              bD.unshift(undefined);
              if (bC == 1) {
                bL = aL.apply(null, bD);
              } else {
                if (bC == 2) {
                  bL = a4.apply(null, bD);
                }
              }
            } else {
              if (bC == 1 || bC == 2) {
                var bG = /^parameter([0-9]*)$/i;
                var bF = (bG.exec(bD[1]) || [null])[0];
                switch (bD[1]) {
                  case bF:
                    if (typeof bA != 'undefined') {
                      bD.push(bA);
                    }
                    if (typeof bS != 'undefined') {
                      bD.push(bS);
                    }
                    bD.unshift(undefined);
                    if (bC == 1) {
                      bL = Z.apply(null, bD);
                    } else {
                      bL = bt.apply(null, bD);
                    }
                    break;
                  case 'parameterCollectProvide':
                    if (typeof bA != 'undefined') {
                      bD.push(bA);
                    }
                    if (typeof bS != 'undefined') {
                      bD.push(bS);
                    }
                    if (bC == 1) {
                      bL = q.apply(null, bD);
                    } else {
                      bL = k.apply(null, bD);
                    }
                    break;
                  default:
                    break;
                }
              } else {
                if (bC == 3) {
                  if (bD.length == 2) {
                    bD.push(bA);
                    bD.push(bS);
                    bL = aC.apply(null, bD);
                  } else {
                    var bG = /^parameter([0-9]*)$/i;
                    var bF = (bG.exec(bD[2]) || [null])[0];
                    switch (bD[2]) {
                      case bF:
                        if (typeof bA != 'undefined') {
                          bD.push(bA);
                        }
                        if (typeof bS != 'undefined') {
                          bD.push(bS);
                        }
                        bL = f.apply(null, bD);
                        break;
                      default:
                        break;
                    }
                  }
                }
              }
            }
          }
          break;
        case 'device':
          if (typeof bA != 'undefined') {
            bD.push(bA);
          }
          bL = Y.apply(null, bD);
          break;
        case 'lastRebounce':
          if (typeof bA == 'string') {
            var bR = bA.split('.').slice(1);
            if (bR[0] != 'ago') {
              bR = bR.reverse();
            }
            bD = bD.concat(bR);
          }
          bL = bi.apply(null, bD);
          break;
        case 'actions':
          if (typeof bA != 'undefined') {
            bD.push(bA);
          }
          bL = aR.apply(null, bD);
          break;
        case 'devMode':
          bD.push(typeof bA != 'undefined' ? bA : 0);
          bL = bx.apply(null, bD);
          break;
        case 'frequencyCapping':
          if (typeof bA == 'string') {
            var bR = bA.split('.'),
              bN = bR.indexOf('in'),
              bO = (bR.indexOf('calls') + 1 || bR.indexOf('rebounces') + 1) - 1,
              bP = bR[bO],
              bM = bD[2] || 'seconds';
            bD = bD.slice(0, 1);
            bR = bR.slice(bN + 1).reverse();
            if (Number.isInteger(parseInt(bR[0])) == true) {
              bR.unshift(bM);
            }
            bR.unshift('in');
            bR.unshift(bO == -1 ? 'rebounces' : bP);
            bD = bD.concat(bR);
          }
          bL = bz.apply(null, bD);
          break;
        case 'entry':
          bD.push(bA);
          bD.push(bS);
          bL = aw.apply(null, bD);
          break;
        default:
          bL = M.get(bD[0]);
          break;
      }
      return bL;
    }
    function a7(bG, bB, bJ) {
      var bD = Array.isArray(bB) ? bB : bB.split('.');
      var bC = /^referrer([0-9]*)$/i;
      var bF = (bC.exec(bD[0]) || [null])[0];
      var bK = /^url([0-9]*)$/i;
      var bH = (bK.exec(bD[0]) || [null])[0];
      var bA = /^history([0-9]*)$/i;
      var bI = (bA.exec(bD[0]) || [null])[0];
      switch (bD[0]) {
        case 'calls':
          if (typeof bG == 'string') {
            if (bG.indexOf('unique') != -1) {
              bG = bG.replace('unique', '');
            }
            if (bG.indexOf('total') != -1) {
              bG = bG.replace('total', '');
            }
            bG = bG.replaceAll('.', '');
          }
          break;
        case bF:
        case bH:
        case bI:
          var bE;
          switch (bD[0]) {
            case bF:
              bE = 1;
              break;
            case bH:
              bE = 2;
              break;
            case bI:
              bE = 3;
              break;
          }
          if (bE == 1 || bE == 2) {
            if (bD.length == 1) {
              bG = bG.replace(/\[007C\]/g, '|');
            } else {
              bG = true;
            }
          } else {
            if (bE == 3) {
              bG = true;
            }
          }
          break;
        case 'device':
          if (bD.length > 1) {
            switch (bD[1]) {
              case 'matchMedia':
                if (bD.length > 2) {
                  bG = bG == 1 ? 'true' : 'false';
                } else {
                  bG = true;
                }
                break;
            }
          }
          break;
        case 'lastRebounce':
          if (
            bD.length == 1 &&
            typeof bG == 'string' &&
            bG.split('.').length > 1
          ) {
            bG = bG.split('.').shift();
          }
          break;
        case 'actions':
          bG = true;
          break;
        case 'devMode':
          bG = true;
          break;
        case 'frequencyCapping':
          if (typeof bG == 'string' && bG.split('.').length > 1) {
            bG = bG.split('.').shift();
          }
          break;
        case 'entry':
          if (bD.length == 3) {
            if (typeof bG == 'undefined') {
              bG = true;
            }
            if (bG == 1 || bG == 0) {
              bG = bG == 1 ? 'true' : 'false';
            }
          } else {
            bG = true;
          }
          break;
        default:
          break;
      }
      if (['true', 'false'].indexOf(bG) != -1) {
        bG = bG === 'true';
      }
      return bG;
    }
    function ag(bF, bG, bE) {
      var bH = Array.isArray(bG) ? bG : bG.split('.');
      var bD = /^referrer([0-9]*)$/i;
      var bC = (bD.exec(bH[0]) || [null])[0];
      var bB = /^url([0-9]*)$/i;
      var bA = (bB.exec(bH[0]) || [null])[0];
      switch (bH[0]) {
        case 'actions':
          if (bF === null || typeof bF == 'undefined' || bF == '') {
            bF = '=';
          }
          break;
        case 'devMode':
          if (bF != '=') {
            bF = '=';
          }
          break;
        case 'frequencyCapping':
          if (bF != '<') {
            bF = '<';
          }
          break;
        case bC:
          if (
            bF === null ||
            typeof bF == 'undefined' ||
            bF == '' ||
            ['', '!']
              .map(function (bI) {
                return [bI + '%', bI + '='];
              })
              .flat()
              .indexOf(bF) == -1
          ) {
            bF = bC != 'referrer2' ? '%' : '!%';
          }
          if (bH.length > 1) {
            switch (bH[1]) {
              case 'parameterCollectProvide':
                if (bF != '=') {
                  bF = '=';
                }
                break;
            }
          }
          break;
        case bA:
          if (
            bF === null ||
            typeof bF == 'undefined' ||
            bF == '' ||
            ['', '!']
              .map(function (bI) {
                return [bI + '%', bI + '='];
              })
              .flat()
              .indexOf(bF) == -1
          ) {
            bF = bA != 'url2' ? '%' : '!%';
          }
          if (bH.length > 1) {
            switch (bH[1]) {
              case 'parameterCollectProvide':
                if (bF != '=') {
                  bF = '=';
                }
                break;
            }
          }
          break;
        case 'entry':
          if (bF === null || typeof bF == 'undefined' || bF == '') {
            bF = '=';
          }
          break;
        default:
          break;
      }
      return bF;
    }
    function bs(bF) {
      var bD = false,
        bC = [
          'devMode',
          'actions',
          'referrer',
          'url',
          'history',
          'calls',
          'rebounces',
          'lastRebounce',
          'frequencyCapping',
          'entry',
        ],
        bE = [
          'referrer',
          'url',
          'history',
          'calls',
          'device',
          'lastRebounce',
          'frequencyCapping',
          'entry',
        ];
      if (bC.indexOf(bF.parameter) != -1) {
        bD = true;
      } else {
        for (var bA in bE) {
          if (bF.parameter.indexOf(bE[bA]) == 0) {
            bD = true;
            break;
          }
        }
      }
      var bB = bD ? 'color:green;' : 'color:red;';
      return bD;
    }
    function aT(bE) {
      if (typeof bE == 'string') {
        bE = bE.split(',');
      }
      var bH = M.get('rules'),
        bC = C();
      if (bH.length == 0) {
        bH = F();
      }
      if (bC.length > 0) {
        bH = bH.concat(bC);
      }
      bH = au(bH, bE);
      var bI = {
        EQUAL: '=',
        NOT_EQUAL: '!=',
        GREATER_THAN: '>',
        LESS_THAN: '<',
        GREATER_EQUAL: '>=',
        LESS_EQUAL: '<=',
        LIKE: '%',
        NOT_LIKE: '!%',
        IN: 'in',
        NOT_IN: '!in',
        BETWEEN: '<x<',
      };
      var bF = { AND: 'AND', OR: 'OR', NONE: null };
      var bG = true,
        bB = [],
        bA = true,
        bD = bF.NONE;
      if (bH.length) {
        bH.forEach(function (bM, bJ) {
          if (!bA) {
            return;
          }
          if (typeof bM.parameter != 'undefined' && bs(bM)) {
            var bP =
                bD == bF.OR && typeof bM.condition != bF.OR
                  ? bF.NONE
                  : bM.condition || bF.AND,
              bL = ae(bM.parameter, bM.value, bM.comparison),
              bO = a7(bM.value, bM.parameter, bM.comparison),
              bN = ag(bM.comparison, bM.parameter, bM.value);
            switch (bN) {
              case bI.EQUAL:
                bG = bL == bO;
                break;
              case bI.NOT_EQUAL:
                bG = bL != bO;
                break;
              case bI.GREATER_THAN:
                bG = bL > bO;
                break;
              case bI.LESS_THAN:
                bG = bL < bO;
                break;
              case bI.GREATER_EQUAL:
                bG = bL >= bO;
                break;
              case bI.LESS_EQUAL:
                bG = bL <= bO;
                break;
              case bI.LIKE:
                bG = !!(bL + '').match(bO);
                break;
              case bI.NOT_LIKE:
                bG = !(bL + '').match(bO);
                break;
              case bI.IN:
                bG =
                  (Array.isArray(bL) ? bL : bL.split(','))
                    .map(function (bQ) {
                      return bQ + '';
                    })
                    .indexOf(bO + '') != -1;
                break;
              case bI:
                NOT_IN: bG =
                  (Array.isArray(bL) ? bL : bL.split(','))
                    .map(function (bQ) {
                      return bQ + '';
                    })
                    .indexOf(bO + '') == -1;
                break;
              case bI.BETWEEN:
                var bK = Array.isArray(bO) ? bO : bO.split(',');
                bG = !!(bK.length == 2 && bL >= bK[0] && bL <= bK[1]);
                break;
              default:
                bG = false;
                break;
            }
            if (bP == bF.AND) {
              bB = [];
              if (bG == false) {
                bA = false;
              }
            } else {
              if (bP == bF.OR) {
                if (bD == bF.NONE) {
                  bB = [];
                }
                bB.push(bG + 0);
              } else {
                if (bP == bF.NONE) {
                  bB.push(bG + 0);
                  if (bB.join('').indexOf('1') == -1) {
                    bA = false;
                  }
                }
              }
            }
            bD = bP;
          }
        });
      }
      return bA;
    }
    function l() {
      var bA = false;
      if (
        M.get('urls').filter(function (bB) {
          return bB.referrer.indexOf(ad(location.href)) == -1;
        }).length == 0
      ) {
        bA = true;
      }
      return bA;
    }
    function bc() {
      var bA = false,
        bC = M.get('urls').slice(-1).shift().url,
        bB = location.href;
      if (bC != bB) {
        bA = true;
      }
      return bA;
    }
    function a1(bA) {
      if (typeof M == 'undefined') {
        return undefined;
      }
      if (typeof bA != 'undefined') {
        M.session.set('skipNextPopstate', bA);
        br('skipNextPopstate', bA);
        return true;
      } else {
        return M.session.get('skipNextPopstate');
      }
    }
    this.skipNextPopstate = function () {
      return a1.apply(undefined, arguments);
    };
    function V(bA) {
      if (typeof M == 'undefined') {
        return undefined;
      }
      if (typeof bA != 'undefined') {
        M.session.set('skipHistoryBack', bA);
        br('skipHistoryBack', bA);
        return true;
      } else {
        return M.session.get('skipHistoryBack');
      }
    }
    this.skipHistoryBack = function () {
      return V.apply(undefined, arguments);
    };
    function aO(bA) {
      if (typeof M == 'undefined') {
        return undefined;
      }
      if (typeof bA != 'undefined') {
        M.session.set('skipRebounce', bA);
        br('skipRebounce', bA);
        return true;
      } else {
        return M.session.get('skipRebounce');
      }
    }
    this.skipRebounce = function () {
      return aO.apply(undefined, arguments);
    };
    function az(bA) {
      if (typeof M == 'undefined') {
        return undefined;
      }
      if (typeof bA != 'undefined') {
        M.session.set('_skipEarly', bA);
        br('skipEarly', bA);
        return true;
      } else {
        return M.session.get('_skipEarly');
      }
    }
    this.skipEarly = function () {
      return az.apply(undefined, arguments);
    };
    function n() {
      V(false);
      aO(false);
      az(false);
    }
    function br(bC, bB) {
      if (a0.checkDynamicMods && a0.dynamicMods) {
        var bA = bC + ':' + bB;
        if (typeof a0.dynamicMods[bA] != 'undefined') {
          if (typeof window.KPMasterTag.KPReBounce.syncs.conf == 'undefined') {
            window.KPMasterTag.KPReBounce.syncs.conf = [];
          }
          Object.entries(a0.dynamicMods[bA]).map(function (bD) {
            if (bD.length == 2) {
              a0[bD[0]] = bD[1];
              window.KPMasterTag.KPReBounce.syncs.conf.push(bD.slice());
            }
          });
        }
      }
    }
    function av(bO) {
      if (aT('devMode') == false) {
        return;
      }
      var bF = Array.from(arguments),
        bS = aS('defaultInitReBounceOnUserActivity', 0),
        bT = bF.length >= 2 ? !!bF[1] : !bS,
        bJ = bF.length >= 3 ? parseInt(bF[2]) || bS : bS;
      if (!bT) {
        if (
          (ar('stack', 0, history.length) <= 2 && !!(bJ & 1)) ||
          (!navigator.userActivation.isActive && !!(bJ & 2))
        ) {
          var bN = aS('checkInterval', 100),
            bP = aS('checkTimeout', 5000),
            bQ = new Date().getTime();
          var bH = setInterval(function () {
            var bU = new Date().getTime();
            if (bU >= bQ + bP) {
              clearInterval(bH);
            }
            if (navigator.userActivation.isActive) {
              clearInterval(bH);
              av(bO, true);
            }
          }, bN);
          return;
        }
      }
      bw(M.rebounceableProspectivesKey);
      var bL = M.get(M.rebounceableProspectivesKey),
        bI = M.get(M.rebounceablesKey),
        bR = M.get(M.rebouncesKey),
        bM = M.get(M.previousHistoryLengthKey),
        bD = history.length,
        bG = M.get(M.entryStateKey),
        bC = M.get(M.hashKey);
      M.set(M.previousHistoryLengthKey, bD);
      if (bM > 0 && bM + 1 > bD) {
        bL -= bM - bD;
        M.set(M.rebounceableProspectivesKey, bL);
      }
      if (
        a0.checkPendingSyncs &&
        typeof window.KPMasterTag.KPReBounce.syncs != 'undefined' &&
        typeof window.KPMasterTag.KPReBounce.syncs.conf != 'undefined'
      ) {
        var bK = window.KPMasterTag.KPReBounce.syncs.conf.slice();
        bK.map(function (bU) {
          a0[bU[0]] = bU[1];
        });
        delete window.KPMasterTag.KPReBounce.syncs.conf;
      }
      if (history.state.stack == bG.stack && history.state.page == bG.page) {
        var bB = new Date().getTime();
        var bE = KPMasterTag.getConf(KPMasterTag);
        bE.data.times.ReBounceTriggerable = bB - kp_start_time + 'ms';
        var bA = M.setStateProperties(M.getStateProperties());
        bA.stack++;
        bA.rebounce = true;
        history.pushState(bA, null, location);
        J(bO);
        bw(M.rebounceablesKey);
      } else {
        if (
          history.state.stack == bG.stack + 1 &&
          history.state.page == bG.page
        ) {
          if (
            typeof a0.skipRebounceFlagCheck != 'undefined' &&
            a0.skipRebounceFlagCheck
          ) {
            if (a0.reBounceBehaviourMode == 1) {
              if (a0.skipNextPopstate || a0.skipPopstateOnHistoryModBack) {
                a1(true);
              }
              if (!a0.skipHistoryBack) {
                history.back();
              }
              setTimeout(function () {
                av(bO);
              }, 100);
            } else {
              if (a0.reBounceBehaviourMode == 2) {
                J(bO);
              }
            }
          } else {
            if (typeof history.state.rebounce != 'undefined') {
              if (history.state.rebounce) {
                if (a0.reBounceBehaviourMode == 1) {
                  if (a0.skipNextPopstate || a0.skipPopstateOnHistoryModBack) {
                    a1(true);
                  }
                  if (!a0.skipHistoryBack) {
                    history.back();
                  }
                  setTimeout(function () {
                    av(bO);
                  }, 100);
                } else {
                  if (a0.reBounceBehaviourMode == 2) {
                    J(bO);
                  }
                }
              }
            } else {
              console.error(
                'problem while initiating rebounce; probably blocked requests by browser, firewall or antivirus software',
              );
            }
          }
        } else {
          if (
            typeof history.state.stack == 'undefined' &&
            typeof history.state.page == 'undefined'
          ) {
          }
        }
      }
      aK();
    }
    function J(bE) {
      var bA = M.get(M.entryStateKey);
      if ((p == bn || p == am) && a2.indexOf('popstate') != -1) {
        var bH,
          bB = a6('popstate', 0);
        window.addEventListener(
          'popstate',
          function (bP) {
            if (
              a0.checkInstanceID &&
              a0.skipWrongInstanceID &&
              a0.instanceID != B.$o.get('instanceID')
            ) {
              return;
            }
            if (
              a0.checkPendingSyncs &&
              typeof window.KPMasterTag.KPReBounce.syncs != 'undefined' &&
              typeof window.KPMasterTag.KPReBounce.syncs.conf != 'undefined'
            ) {
              var bM = window.KPMasterTag.KPReBounce.syncs.conf.slice();
              bM.map(function (bR) {
                a0[bR[0]] = bR[1];
              });
              delete window.KPMasterTag.KPReBounce.syncs.conf;
            }
            if (
              a0.checkEntryState &&
              (history.state.stack > bA.stack || history.state.page != bA.page)
            ) {
              return;
            }
            if (
              a0.skipRecurringPopstate ||
              a0.skipNextPopstate ||
              a0.customSkipFlag1
            ) {
              if (a1()) {
                if (a0.reenableNextPopstate) {
                  a1(false);
                }
                return;
              } else {
                if (a0.skipNextPopstate) {
                  a1(true);
                }
                setTimeout(function () {
                  if (a0.reenableNextPopstate) {
                    B.skipNextPopstate(false);
                  }
                }, 100);
              }
            }
            if (
              ((V() || aO() || a0.customSkipFlag2) && az()) ||
              a0.customSkipFlag3
            ) {
              n();
              return;
            }
            if (!M.checkParamsIntegrity()) {
              M.recoverParams();
            }
            if (aA()) {
              if (a0.checkUrlChange !== false && bc()) {
                if (!a0.skipAppendUrlOnUrlChange) {
                  M.appendURL();
                }
                return;
              }
              if (
                a0.checkNotValidStack === true &&
                (typeof history.state.stack == 'undefined' ||
                  isNaN(history.state.stack))
              ) {
                return;
              }
              if (
                a0.checkWrongStack !== false &&
                !(history.state.stack == bA.stack)
              ) {
                if (
                  a0.checkWrongStackDeviation == true &&
                  (isNaN(history.state.stack) ||
                    isNaN(bA.stack) ||
                    Math.abs(history.state.stack - bA.stack) > 1)
                ) {
                  return;
                }
                if (!V()) {
                  if (!a0.skipHistoryBack) {
                    history.back();
                  }
                } else {
                  n();
                }
                return;
              }
              if (a0.checkErrornousEntry !== false && l()) {
                if (!V()) {
                  if (!a0.skipHistoryBack) {
                    history.back();
                  }
                } else {
                  n();
                }
                return;
              }
              var bO = M.get(M.lastRebounceEventKey),
                bQ = bO || 'popstate';
              M.set(M.lastRebounceEventKey, 'popstate', Number.NaN);
              M.set(M.lastRebounceKey, M.getTimestamp());
              M.set(M.lastSessionTimestampKey, M.getTimestamp());
              M.delete(M.entryStateKey);
              M.set(M.rebouncedKey, true, Number.NaN);
              var bN = new URL(
                  (M.get('urls') || [{ url: location.href }])
                    .slice(-1)
                    .shift().url,
                ),
                bJ = { path: bN ? bN.pathname + bN.search : '', parameter: {} };
              if (M.has(M.referrerParameterKey) || M.has(M.urlParameterKey)) {
                var bK = a3(
                  M.get(M.referrerParameterKey),
                  M.get(M.urlParameterKey),
                );
                bK = x(bK);
                bJ.parameter = bK;
              }
              if (aO()) {
                n();
                return;
              }
              var bL = aY(bQ, '', false, true, bJ);
              bH = setTimeout(function () {
                P(bL);
                var bS = bE;
                if (bE == b) {
                  bS += bL.params.path;
                }
                if (t) {
                  bS +=
                    (bS.indexOf('?') == -1 ? '?' : '&') +
                    'e=' +
                    btoa(bL.params.path) +
                    '&p=' +
                    btoa(JSON.stringify(bL.params));
                }
                if (bb) {
                  var bR = function (bX) {
                    if (bX.length) {
                      var bZ = bX[0],
                        b0 = (bX.length == 1) + 0;
                      var bU = '75267',
                        bW = document.querySelector('#tmpFuncIframe' + bU),
                        b1 =
                          bE.replace(new RegExp('/(([a-z]+).html)?$'), '') +
                          '/session.html',
                        bT = {},
                        bV = 'onhashchange' in window ? '#' : '?';
                      if (!bW) {
                        bW = document.createElement('iframe');
                        bW.id = 'tmpFuncIframe' + bU;
                        bW.allowtransparency = 'true';
                        bW.framespacing = '0';
                        bW.frameborder = '0';
                        bW.scrolling = 'no';
                        bW.width = '0';
                        bW.height = '0';
                        var bY = document.getElementById('kpdiv' + bU);
                        if (bY === null) {
                          bY = document.createElement('div');
                          bY.id = 'kpdiv' + bU;
                          bY.classList.add('iframe');
                          bY.innerHTML = '';
                          bY.style.visibility = 'hidden';
                          bY.style.display = 'none';
                          bY.style.position = 'absolute';
                          bY.style.overflow = 'hidden';
                          bY.style.left = '0';
                          bY.style.top = '0';
                          bY.style.width = '0';
                          bY.style.height = '0';
                          bY.style.border = '0';
                          document.body.appendChild(bY);
                        }
                        bY.appendChild(bW);
                      }
                      bT.l = b0;
                      bT.s = bZ;
                      bW.src =
                        b1 +
                        bV +
                        Object.entries(bT)
                          .map(function (b2) {
                            return b2[0] + '=' + b2[1];
                          })
                          .join('&');
                      bW.onload = function () {
                        setTimeout(function () {
                          bR(bX.slice(1));
                        }, 0);
                      };
                    } else {
                      location.replace(bS);
                    }
                  };
                  bR(
                    btoa(JSON.stringify(M.session.getData()))
                      .replaceAll('=', '-')
                      .match(/.{1,256}/g) || [],
                  );
                  return;
                }
                location.replace(bS);
              }, bB);
              bw();
            } else {
              if (!V()) {
                if (
                  a0.skipOnFailedRulesCheck &&
                  M.session.get('passedRules') === false
                ) {
                  return;
                }
                if (!a0.skipHistoryBack) {
                  history.back();
                }
              } else {
                n();
              }
            }
          },
          false,
        );
      }
      if (p == am) {
        if (a2.indexOf('beforeunload') != -1) {
          var bC,
            bF = a6('beforeunload', 0);
          window.addEventListener('beforeunload', function (bL) {
            var bK = M.get(M.lastRebounceEventKey),
              bM = 'beforeunload';
            M.set(M.lastRebounceEventKey, bM, Number.NaN);
            var bJ = aY(bM);
            if (typeof bK != 'undefined' && bK == 'popstate') {
              bJ = aY(bM, 'after-popstate');
            } else {
              bJ = aY(bM, 'no-popstate');
            }
            bC = setTimeout(function () {
              P(bJ);
            }, bF);
          });
        }
        if (a2.indexOf(',unload') != -1) {
          window.addEventListener('unload', function (bJ) {
            var bK = 'unload';
            M.set(M.lastRebounceEventKey, bK, Number.NaN);
            P(aY(bK));
          });
        }
        if (a2.indexOf('pagehide') != -1) {
          window.addEventListener('pagehide', function (bJ) {
            var bK = 'pagehide';
            M.set(M.lastRebounceEventKey, bK, Number.NaN);
            P(aY(bK));
          });
        }
        if (a2.indexOf('pageshow') != -1) {
          window.addEventListener('pageshow', function (bJ) {
            var bK = 'pageshow';
            M.set(M.lastRebounceEventKey, bK, Number.NaN);
            P(aY(bK));
          });
        }
        if (a2.indexOf('visibilitychange') != -1) {
          window.addEventListener('visibilitychange', function (bJ) {
            var bK = 'visibilitychange';
            M.set(M.lastRebounceEventKey, bK, Number.NaN);
          });
          var bD,
            bG = a6('visibilitychange', 5000),
            bI = false;
          document.addEventListener('visibilitychange', function (bN) {
            var bO = 'visibilitychange';
            M.set(M.lastRebounceEventKey, bO, Number.NaN);
            var bM = new URL(
                (M.get('urls') || [{ url: location.href }])
                  .slice(-1)
                  .shift().url,
              ),
              bJ = { path: bM ? bM.pathname + bM.search : '', parameter: {} };
            if (M.has(M.referrerParameterKey) || M.has(M.urlParameterKey)) {
              var bK = a3(
                M.get(M.referrerParameterKey),
                M.get(M.urlParameterKey),
              );
              bK = x(bK);
              bJ.parameter = bK;
            }
            if (aO()) {
              n();
              return;
            }
            var bL = aY(
              bO + '-' + document.visibilityState,
              document.visibilityState,
              false,
              true,
              bJ,
            );
            if (document.visibilityState == 'hidden') {
              bD = setTimeout(function () {
                P(bL);
                var bQ = bE;
                if (bE == b) {
                  bQ += bL.params.path;
                }
                if (t) {
                  bQ +=
                    (bQ.indexOf('?') == -1 ? '?' : '&') +
                    'e=' +
                    btoa(bL.params.path) +
                    '&p=' +
                    btoa(JSON.stringify(bL.params));
                }
                if (bb) {
                  var bP = function (bV) {
                    if (bV.length) {
                      var bX = bV[0],
                        bY = (bV.length == 1) + 0;
                      var bS = '75267',
                        bU = document.querySelector('#tmpFuncIframe' + bS),
                        bZ =
                          bE.replace(new RegExp('/(([a-z]+).html)?$'), '') +
                          '/session.html',
                        bR = {},
                        bT = 'onhashchange' in window ? '#' : '?';
                      if (!bU) {
                        bU = document.createElement('iframe');
                        bU.id = 'tmpFuncIframe' + bS;
                        bU.allowtransparency = 'true';
                        bU.framespacing = '0';
                        bU.frameborder = '0';
                        bU.scrolling = 'no';
                        bU.width = '0';
                        bU.height = '0';
                        var bW = document.getElementById('kpdiv' + bS);
                        if (bW === null) {
                          bW = document.createElement('div');
                          bW.id = 'kpdiv' + bS;
                          bW.classList.add('iframe');
                          bW.innerHTML = '';
                          bW.style.visibility = 'hidden';
                          bW.style.display = 'none';
                          bW.style.position = 'absolute';
                          bW.style.overflow = 'hidden';
                          bW.style.left = '0';
                          bW.style.top = '0';
                          bW.style.width = '0';
                          bW.style.height = '0';
                          bW.style.border = '0';
                          document.body.appendChild(bW);
                        }
                        bW.appendChild(bU);
                      }
                      bR.l = bY;
                      bR.s = bX;
                      bU.src =
                        bZ +
                        bT +
                        Object.entries(bR)
                          .map(function (b0) {
                            return b0[0] + '=' + b0[1];
                          })
                          .join('&');
                      bU.onload = function () {
                        setTimeout(function () {
                          bP(bV.slice(1));
                        }, 0);
                      };
                    } else {
                      location.replace(bQ);
                    }
                  };
                  bP(
                    btoa(JSON.stringify(M.session.getData()))
                      .replaceAll('=', '-')
                      .match(/.{1,256}/g) || [],
                  );
                  return;
                }
                location.replace(bQ);
              }, bG);
              bw();
            } else {
              if (document.visibilityState == 'visible') {
                clearTimeout(bD);
                bI = false;
                P(bL);
              }
            }
          });
        }
      }
    }
    function aK() {
      if (p == am) {
        if (a2.indexOf('pagehide') != -1) {
          window.addEventListener('pagehide', function (bA) {
            var bB = 'pagehide';
            M.set(M.lastRebounceEventKey, bB, Number.NaN);
            P(aY(bB + '-independed'));
          });
        }
        if (a2.indexOf('pageshow') != -1) {
          window.addEventListener('pageshow', function (bB) {
            if ((a0.custom || {}).bfcache) {
              if (!M.checkParamsIntegrity()) {
                M.recoverParams();
                var bA = {};
                bA.historyLength =
                  (M.get('urls') || [{}]).slice(-1).pop().stack ||
                  history.state.stack - 1;
                M.appendURL(bA);
              }
            }
            var bC = 'pageshow';
            M.set(M.lastRebounceEventKey, bC, Number.NaN);
            P(aY(bC + '-independed'));
          });
        }
      }
    }
    function bw(bA) {
      bA = bA || M.rebouncesKey;
      M.inc(bA);
      M.add(bA + M.timestampsSuffixKey, M.getTimestamp());
    }
    function aY(bC, bH, bE, bI, bA, bF, bB) {
      if (typeof bC == 'undefined' || bC == '') {
        bC = 'unknown';
      }
      if (typeof bH == 'undefined' || bH == '') {
        bH = '';
      }
      if (typeof bI == 'undefined') {
        bI = false;
      }
      bI = !!bI;
      var bG = {};
      bG.event = bC;
      bG.eventInfo = bH;
      bG.query = bC + (bH != '' ? '-' + bH : '');
      if (typeof bE != 'undefined' && bE != 'undefined' && false !== bE) {
        if (typeof bE == 'object' && !Array.isArray(bE)) {
          bE = Object.entries(bE);
        }
        bG.additionalAttributes = [];
        bE.map(function (bK, bJ) {
          if (Number.isInteger(bJ) && Array.isArray(bK) && bK.length == 2) {
            bJ = bK[0];
            bK = bK[1];
          }
          bG[bJ] = bK;
          bG.additionalAttributes.push(bJ);
        });
      }
      if (bI) {
        var bD = {};
        bD[M.hashKey] = M.get(M.hashKey);
        bD[M.embedTypeKey] = N;
        bD[M.levelKey] = ab || 0;
        bD[M.rebouncesKey] = M.get(M.rebouncesKey) + 1;
        bD[M.lastRebounceKey] = M.get(M.lastRebounceKey);
        bD[M.rebounceModeKey] = p;
        bD[M.eventKey] = bC;
        bD.eventInfo = bH;
        bG.params = bD;
      }
      if (typeof bA != 'undefined' && bA != 'undefined' && false !== bA) {
        if (typeof bA == 'object' && !Array.isArray(bA)) {
          bA = Object.entries(bA);
        }
        var bD = typeof bG.params != 'undefined' ? bG.params : {};
        bA.map(function (bK, bJ) {
          if (Number.isInteger(bJ) && Array.isArray(bK) && bK.length == 2) {
            bJ = bK[0];
            bK = bK[1];
          }
          bD[bJ] = bK;
        });
        bG.params = bD;
      }
      if (typeof bF != 'undefined' && bF != 'undefined' && false !== bF) {
        if (typeof bG.params != 'undefined') {
          if (typeof bF == 'object' && !Array.isArray(bF)) {
            bF = Object.keys(bF);
          }
          bF.map(function (bJ) {
            delete bG.params[bJ];
          });
        }
      }
      if (typeof bB != 'undefined' && bB != 'undefined' && false !== bB) {
        if (typeof bG.params != 'undefined') {
          if (typeof bB == 'object' && !Array.isArray(bB)) {
            bB = Object.keys(bB);
          }
          var bD = Object.entries(bG.params);
          bD = bD.filter(function (bJ) {
            return bB.indexOf(bJ[0]) + 1;
          });
          bD = bD.reduce(function (bJ, bK) {
            bJ[bK[0]] = bK[1];
            return bJ;
          }, {});
          bG.params = bD;
        }
      }
      return bG;
    }
    function P(bD, bF) {
      if (!a0.logRebounceEvents) {
        return;
      }
      if (typeof bF == 'undefined') {
        bF = true;
      }
      bF = !!bF;
      var bA = {
        neory_id: aD,
        event: bD.event,
        eventInfo: bD.eventInfo,
        params: typeof bD.params != 'undefined' ? bD.params : {},
      };
      if (typeof bD.additionalAttributes != 'undefined') {
        var bC = bA.params;
        delete bA.params;
        bD.additionalAttributes.forEach(function (bG) {
          bA[bG] = bD[bG];
        });
        bA.params = bC;
      }
      if (bF) {
        var bC = [];
        if (typeof bD.additionalAttributes != 'undefined') {
          bD.additionalAttributes.forEach(function (bG) {
            bA['c' + bC.length] = O(bA[bG]);
            delete bA[bG];
            bC.push(['c' + bC.length, O(bG)]);
          });
        }
        bA['c' + bC.length] = O(bA.params);
        delete bA.params;
        bC.push(['c' + bC.length, O('params')]);
        bA.cp = bC;
      }
      var bE = new FormData();
      bE.append('mastertag', JSON.stringify(bA));
      var bB = {
        method: 'POST',
        mode: 'no-cors',
        cache: 'no-cache',
        credentials: 'same-origin',
        headers: new Headers(),
        redirect: 'follow',
        body: bE,
      };
      fetch(aF, bB)
        .then(function (bG) {})
        .catch(function (bG) {});
    }
    function O(bD, bF, bB) {
      if (typeof bF == 'undefined') {
        bF = true;
      }
      bF = !!bF;
      if (bF) {
        var bE = 0;
        if (typeof bD != 'string') {
          bD = JSON.stringify(bD);
          bE = 1;
        }
        if (
          typeof bB == 'undefined' ||
          (typeof bB != 'number' && isNaN(parseInt(bB)))
        ) {
          bB = 8;
        }
        if (bB <= 4 || bB % 2 == 1) {
          bB = Math.pow(2, bB);
        }
        var bC = 4 / 3,
          bA = bB;
        while (bD.length % Math.ceil(bB / bC) != 0) {
          bD += ' ';
        }
        bD = btoa(bD);
        while (bB / 2 >= 1) {
          bD = bD
            .match(new RegExp('.{1,' + bB + '}', 'g'))
            .reverse()
            .join('');
          bB /= 2;
        }
        bD += bA.toString(36).padStart(2, '0') + bE;
      }
      return bD;
    }
    function a6(bD, bC) {
      var bB = new RegExp(bD + ':(\\d+)', 'g'),
        bA = '';
      bA = (a2.match(bB) || ['']).pop().replace(bD + ':', '') * 1 || bC;
      return bA;
    }
    function aS(bD, bA) {
      var bC = new RegExp(bD + ':(\\d+)', 'g'),
        bB = '';
      bB = (ay.match(bC) || ['']).pop().replace(bD + ':', '') * 1 || bA;
      return bB;
    }
    function j(bH) {
      if (!a0.mouse.active) {
        return;
      }
      var bI = { pageX: 0, pageY: 0, diffX: 0, diffY: 0 },
        bK = {
          pageX: 0,
          pageY: 0,
          diffX: 0,
          diffY: 0,
          angle: 0,
          left: false,
          top: false,
          right: false,
          bottom: false,
          potentialRebounceTriggerArea: false,
          possibleRebounceTriggerArea: false,
        },
        bE = true,
        bC = 0,
        bD = 0,
        bG;
      var bB = a0.mouse,
        bM = bB.potentialActive,
        bJ = bB.potentialTriggerTime,
        bA = bB.possibleActive,
        bF = bB.possibleTriggerTime,
        bN = bB.checkIntervalTime,
        bL = bB.borderTriggerWidth;
      document.addEventListener('mousemove', function (bP) {
        bD = new Date().getTime();
        if (bD < bC + bN) {
          return;
        }
        bC = bD;
        var bO, bT, bR, bS, bQ;
        bP = bP || window.event;
        if (bP.pageX == null && bP.clientX != null) {
          bO = (bP.target && bP.target.ownerDocument) || document;
          bT = bO.documentElement;
          bR = bO.body;
          bP.pageX =
            bP.clientX +
            ((bT && bT.scrollLeft) || (bR && bR.scrollLeft) || 0) -
            ((bT && bT.clientLeft) || (bR && bR.clientLeft) || 0);
          bP.pageY =
            bP.clientY +
            ((bT && bT.scrollTop) || (bR && bR.scrollTop) || 0) -
            ((bT && bT.clientTop) || (bR && bR.clientTop) || 0);
        }
        bK.pageX = bP.pageX;
        bK.pageY = bP.pageY;
        bK.diffX = bK.pageX - bI.pageX;
        bK.diffY = bK.pageY - bI.pageY;
        bK.angle =
          Math.round((Math.atan2(-bK.diffX, bK.diffY) * 180) / Math.PI) + 180;
        bQ = top.innerWidth;
        bS = top.innerHeight;
        bK.innerWidth = bQ;
        bK.innerHeight = bS;
        bK.left = bK.pageX < bL || bK.pageX + bK.diffX < bL;
        bK.top = bK.pageY < bL || bK.pageY + bK.diffY < bL;
        bK.right = bK.pageX > bQ - bL || bK.pageX + bK.diffX > bQ - bL;
        bK.bottom = bK.pageY > bS - bL || bK.pageY + bK.diffY > bS - bL;
        bK.potentialRebounceTriggerArea = false;
        bK.possibleRebounceTriggerArea = false;
        if (
          bK.left ||
          bK.pageX < bL * 3 ||
          (bK.pageX < bK.innerWidth / 4 &&
            bK.angle >= 270 &&
            bK.angle <= 315) ||
          (bK.pageX < bL * 3 && bK.angle >= 315 && bK.angle <= 360)
        ) {
          bK.potentialRebounceTriggerArea = true;
        } else {
          bK.possibleRebounceTriggerArea = true;
        }
        bI = JSON.parse(JSON.stringify(bK));
      });
      document.addEventListener('mouseout', function (bO) {
        if (bO.toElement == null && bO.relatedTarget == null) {
          bE = false;
          if (!bE && bI.top) {
            if (bI.potentialRebounceTriggerArea) {
              if (bM) {
                bG = setTimeout(function () {
                  if (!bE && bI.top) {
                    if (bI.potentialRebounceTriggerArea) {
                      M.set(M.lastRebounceEventKey, 'mouse', Number.NaN);
                      if (!V()) {
                        if (!a0.skipHistoryBack) {
                          history.back();
                        }
                      } else {
                        n();
                      }
                    }
                  }
                }, bJ);
              }
            } else {
              if (bI.possibleRebounceTriggerArea) {
                if (bA) {
                  bG = setTimeout(function () {
                    if (!bE && bI.top) {
                      if (bI.possibleRebounceTriggerArea) {
                        M.set(M.lastRebounceEventKey, 'mouse', Number.NaN);
                        if (!V()) {
                          if (!a0.skipHistoryBack) {
                            history.back();
                          }
                        } else {
                          n();
                        }
                      }
                    }
                  }, bF);
                }
              }
            }
          }
        }
      });
      document.addEventListener('mouseenter', function (bO) {
        if (bO.toElement != null || bO.relatedTarget != null) {
          bE = true;
          clearTimeout(bG);
          setTimeout(function () {}, bN + 10);
        }
      });
    }
    function K() {
      try {
        return typeof location.ancestorOrigins != 'undefined'
          ? !!Object.values(location.ancestorOrigins).filter(function (bB) {
              return typeof bB == 'string';
            }).length
          : self !== top;
      } catch (bA) {
        return true;
      }
    }
    function aJ(bC, bB) {
      if (bC) {
        for (var bA = 0; bA < bC.length; bA++) {
          if (bC[bA] === bB) {
            return true;
          }
        }
      }
      return false;
    }
    function v() {
      var bB = Array.prototype.slice.call(arguments);
      bB.unshift(KPMasterTag.KPReBounce || KPReBounce);
      var bA = null;
      if (
        typeof window.KPMasterTag != 'undefined' &&
        typeof window.KPMasterTag._execute != 'undefined'
      ) {
        bA = window.KPMasterTag._execute.apply(bB[0], bB);
      } else {
        bA = e.apply(bB[0], bB);
      }
      return bA;
    }
    this._execute = function () {
      var bA = Array.prototype.slice.call(arguments);
      if (bA.length == 1 && typeof bA[0] == 'string') {
        bA.unshift(KPMasterTag.KPReBounce || KPReBounce);
      }
      return e.apply(bA[0], bA);
    };
    function e(bD, bE) {
      var bA = null;
      if (typeof bD == 'undefined' || typeof bE == 'undefined' || bD === null) {
        return;
      }
      var bC = Array.prototype.slice.call(arguments);
      bC.shift();
      bC.shift();
      var bB = KPMasterTag.getConf(this);
      if (!bB.useCodeInjections) {
        return false;
      }
      if (
        typeof bB.codeInjections[bD.name] != 'undefined' &&
        typeof bB.codeInjections[bD.name][bE] != 'undefined'
      ) {
        bA = bB.codeInjections[bD.name][bE].apply(bD, bC);
      } else {
        if (typeof bB.codeInjections[bD.name + '.' + bE] != 'undefined') {
          bA = bB.codeInjections[bD.name + '.' + bE].apply(bD, bC);
        } else {
          if (typeof bB.codeInjections[bE] != 'undefined') {
            bA = bB.codeInjections[bE].apply(bD, bC);
          }
        }
      }
      return bA;
    }
    function T() {
      var bB = Array.prototype.slice.call(arguments);
      bB.unshift(KPMasterTag.KPReBounce || KPReBounce);
      var bA = null;
      if (
        typeof window.KPMasterTag != 'undefined' &&
        typeof window.KPMasterTag._has != 'undefined'
      ) {
        bA = window.KPMasterTag._has.apply(bB[0], bB);
      } else {
        bA = by.apply(bB[0], bB);
      }
      return bA;
    }
    this._has = function () {
      var bA = Array.prototype.slice.call(arguments);
      if (bA.length == 1 && typeof bA[0] == 'string') {
        bA.unshift(KPMasterTag.KPReBounce || KPReBounce);
      }
      return by.apply(bA[0], bA);
    };
    function by(bC, bD) {
      var bA = false;
      if (typeof bC == 'undefined' || typeof bD == 'undefined' || bC === null) {
        return;
      }
      var bB = KPMasterTag.getConf(this);
      if (!bB.useCodeInjections) {
        return false;
      }
      if (
        typeof bB.codeInjections[bC.name] != 'undefined' &&
        typeof bB.codeInjections[bC.name][bD] != 'undefined'
      ) {
        bA = true;
      } else {
        if (typeof bB.codeInjections[bC.name + '.' + bD] != 'undefined') {
          bA = true;
        } else {
          if (typeof bB.codeInjections[bD] != 'undefined') {
            bA = true;
          }
        }
      }
      return bA;
    }
    function a8() {
      var bB = Array.prototype.slice.call(arguments);
      bB.unshift(KPMasterTag.KPReBounce || KPReBounce);
      var bA = null;
      bA = aN.apply(bB[0], bB);
      return bA;
    }
    this._prop = function () {
      var bA = Array.prototype.slice.call(arguments);
      if (bA.length > 1 && typeof bA[1] == 'string') {
        bA.unshift(KPMasterTag.KPReBounce || KPReBounce);
      }
      return aN.apply(bA[0], bA);
    };
    function aN(bC, bD, bF, bE) {
      var bB = Array.prototype.slice.call(arguments);
      var bA = null;
      if (
        typeof window.KPMasterTag != 'undefined' &&
        typeof window.KPMasterTag._prop != 'undefined'
      ) {
        bA = window.KPMasterTag._prop.apply(bB[0], bB);
      }
      return bA;
    }
    if (typeof U == 'undefined' || U == true) {
      this.init();
    }
  }
  if (typeof KPMasterTag.name == 'undefined') {
    KPMasterTag.name = 'KPMasterTag';
  }
  if (typeof KPConsent.name == 'undefined') {
    KPConsent.name = 'KPConsent';
  }
  if (typeof KPConsentData.name == 'undefined') {
    KPConsentData.name = 'KPConsentData';
  }
  if (typeof KPRule.name == 'undefined') {
    KPRule.name = 'KPRule';
  }
  if (typeof KPReBounce.name == 'undefined') {
    KPReBounce.name = 'KPReBounce';
  }
  if (typeof KPMasterTag.mtk == 'undefined') {
    KPMasterTag.mtk = kp_mtk;
  }
}
if (!Array.prototype.filter) {
  Array.prototype.filter = function (c) {
    if (this === void 0 || this === null) {
      throw new TypeError();
    }
    var f = Object(this);
    var a = f.length >>> 0;
    if (typeof c !== 'function') {
      throw new TypeError();
    }
    var e = [];
    var b = arguments.length >= 2 ? arguments[1] : void 0;
    for (var d = 0; d < a; d++) {
      if (d in f) {
        var g = f[d];
        if (c.call(b, g, d, f)) {
          e.push(g);
        }
      }
    }
    return e;
  };
}
if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function (c) {
    if (this === void 0 || this === null) {
      throw new TypeError();
    }
    var f = Object(this);
    var a = f.length >>> 0;
    if (typeof c !== 'function') {
      throw new TypeError();
    }
    var e = -1;
    var b = arguments.length >= 2 ? arguments[1] : void 0;
    for (var d = 0; d < a; d++) {
      if (d in f) {
        var g = f[d];
        if (c.call(b, g, d, f)) {
          e = d;
          break;
        }
      }
    }
    return e;
  };
}
if (!Array.isArray) {
  Array.isArray = function (a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  };
}
if (!Object.keys) {
  Object.keys = function (c) {
    var a = [],
      b;
    for (var b in c) {
      if (c.hasOwnProperty(b)) {
        a.push(b);
      }
    }
    return a;
  };
}
if (!String.prototype.substr) {
  String.prototype.substr = function () {
    if (this === void 0 || this === null) {
      throw new TypeError();
    }
    var a = Array.from(arguments),
      c = a[0] || 0,
      b = typeof a[1] != 'undefined' ? a[1] : this.length;
    if (c < 0) {
      c = Math.max(c + this.length, 0);
    }
    if (c + b > this.length) {
      b = this.length - c;
    }
    return b > 0 ? this.substring(c, c + b) : '';
  };
}
if (!window.btoa || !window.atob) {
  var Base64 = {
    _keyStr:
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    encode: function (j) {
      var m = '';
      var d, b, g, p, c, l, k;
      var h = 0;
      j = Base64._utf8_encode(j);
      while (h < j.length) {
        d = j.charCodeAt(h++);
        b = j.charCodeAt(h++);
        g = j.charCodeAt(h++);
        p = d >> 2;
        c = ((d & 3) << 4) | (b >> 4);
        l = ((b & 15) << 2) | (g >> 6);
        k = g & 63;
        if (isNaN(b)) {
          l = k = 64;
        } else {
          if (isNaN(g)) {
            k = 64;
          }
        }
        m =
          m +
          this._keyStr.charAt(p) +
          this._keyStr.charAt(c) +
          this._keyStr.charAt(l) +
          this._keyStr.charAt(k);
      }
      return m;
    },
    decode: function (j) {
      var m = '';
      var d, b, g;
      var p, c, l, k;
      var h = 0;
      j = j.replace(/[^A-Za-z0-9+/=]/g, '');
      while (h < j.length) {
        p = this._keyStr.indexOf(j.charAt(h++));
        c = this._keyStr.indexOf(j.charAt(h++));
        l = this._keyStr.indexOf(j.charAt(h++));
        k = this._keyStr.indexOf(j.charAt(h++));
        d = (p << 2) | (c >> 4);
        b = ((c & 15) << 4) | (l >> 2);
        g = ((l & 3) << 6) | k;
        m = m + String.fromCharCode(d);
        if (l != 64) {
          m = m + String.fromCharCode(b);
        }
        if (k != 64) {
          m = m + String.fromCharCode(g);
        }
      }
      m = Base64._utf8_decode(m);
      return m;
    },
    _utf8_encode: function (c) {
      c = c.replace(/rn/g, 'n');
      var a = '';
      for (var d = 0; d < c.length; d++) {
        var b = c.charCodeAt(d);
        if (b < 128) {
          a += String.fromCharCode(b);
        } else {
          if (b > 127 && b < 2048) {
            a += String.fromCharCode((b >> 6) | 192);
            a += String.fromCharCode((b & 63) | 128);
          } else {
            a += String.fromCharCode((b >> 12) | 224);
            a += String.fromCharCode(((b >> 6) & 63) | 128);
            a += String.fromCharCode((b & 63) | 128);
          }
        }
      }
      return a;
    },
    _utf8_decode: function (c) {
      var a = '';
      var d = 0;
      var b = (c1 = c2 = 0);
      while (d < c.length) {
        b = c.charCodeAt(d);
        if (b < 128) {
          a += String.fromCharCode(b);
          d++;
        } else {
          if (b > 191 && b < 224) {
            c2 = c.charCodeAt(d + 1);
            a += String.fromCharCode(((b & 31) << 6) | (c2 & 63));
            d += 2;
          } else {
            c2 = c.charCodeAt(d + 1);
            c3 = c.charCodeAt(d + 2);
            a += String.fromCharCode(
              ((b & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63),
            );
            d += 3;
          }
        }
      }
      return a;
    },
  };
  if (!window.btoa) {
    window.btoa = function (a) {
      return Base64.encode(a);
    };
  }
  if (!window.atob) {
    window.atob = function (a) {
      return Base64.decode(a);
    };
  }
}
(function () {
  if (typeof kp_execute == 'undefined' || kp_execute === true) {
    var a = function (i, j, f) {
      if (typeof i == 'undefined') {
        i = window;
      }
      if (!Array.isArray(j)) {
        if (typeof j == 'string') {
          j = [j];
        } else {
          if (typeof j == 'object') {
            j = Array.from(j);
          }
        }
      }
      if (typeof f == 'undefined') {
        f = 3;
      }
      var g, h;
      if ([4, 5].indexOf(arguments.length) == -1) {
        return false;
      }
      if (arguments.length == 5) {
        g = [arguments[3]];
        h = [arguments[4]];
      } else {
        if (arguments.length == 4) {
          g = arguments[3].map(function (k) {
            return k[0];
          });
          h = arguments[3].map(function (k) {
            return k[1];
          });
        } else {
          return false;
        }
      }
      j.filter(function (k) {
        switch (f) {
          case 1:
            if (null !== i && typeof k == 'string') {
              (function (m) {
                var l = m;
                i[k] = function () {
                  if (typeof new.target != 'undefined') {
                    var n;
                    switch (arguments.length) {
                      case 0:
                        n = new l();
                        break;
                      case 1:
                        n = new l(arguments[0]);
                        break;
                      case 2:
                        n = new l(arguments[0], arguments[1]);
                        break;
                    }
                    if (n) {
                      Object.keys(g).map(function (p) {
                        var o = g[p],
                          q = h[p];
                        n[o] = q;
                      });
                    }
                    return n;
                  } else {
                    Object.keys(g).map(function (p) {
                      var o = g[p],
                        q = h[p];
                      l[o] = q;
                    });
                    i[k].getInner = function () {
                      return l;
                    };
                    return l.apply(l, arguments);
                  }
                };
              })(i[k]);
            } else {
              return false;
            }
            break;
          case 2:
            Object.keys(g).map(function (m) {
              var l = g[m],
                n = h[m];
              if (null !== i) {
                i[k].prototype[l] = n;
              } else {
                k.prototype[l] = n;
              }
            });
            break;
          case 3:
            Object.keys(g).map(function (m) {
              var l = g[m],
                n = h[m];
              if (typeof n == 'function') {
                c._f(l, n);
              } else {
                c._v(l, n);
              }
            });
            break;
        }
      });
      return true;
    };
    var c = (function () {
      var f = {
        defaultScopedFunctionCount: 10,
        defaultScopedFunctionPrefix: 'uf',
        defaultScopedVariableCount: 10,
        defaultScopedVariablePrefix: 'uv',
        defaultScopesCount: 10,
        defaultScopesPrefix: 's',
        defaultGlobalScopePrefix: 'global',
        f: {},
        v: {},
        s: {},
        fm: {},
        vm: {},
        sm: {},
        as: null,
        gs: null,
        scopedFunctionPrefix: null,
        scopedVariablePrefix: null,
        init: function (i, j, l, g, h, m, k) {
          this.initScopes(h, m, k);
          this.initScope(k, i, j, l, g);
        },
        initScopes: function (g, k, h) {
          g = g || this.defaultScopesCount;
          k = k || this.defaultScopesPrefix;
          var j = c || this.defaultGlobalScopePrefix;
          var i = this;
          Array(g)
            .fill(k)
            .map(function (m, l) {
              i.s[m + l] = undefined;
            });
          this._s(j);
        },
        initScope: function (l, h, i, j, g) {
          h = h || this.defaultScopedFunctionCount;
          i = i || this.defaultScopedVariableCount;
          j = j || this.defaultScopedFunctionPrefix;
          g = g || this.defaultScopedVariablePrefix;
          l = l || this.defaultGlobalScopePrefix;
          var k = this;
          this._s(l);
          this.scopedFunctionPrefix = j;
          this.scopedVariablePrefix = g;
          Array(h)
            .fill(j)
            .map(function (n, m) {
              k.f[k.as + '.' + n + m] = undefined;
            });
          Array(i)
            .fill(g)
            .map(function (n, m) {
              k.v[k.as + '.' + n + m] = undefined;
            });
        },
        _s: function () {
          var i = this.s;
          switch (arguments.length) {
            case 0:
              return i;
            case 1:
              var h = arguments[0] !== false ? arguments[0] : this.gs,
                j = this._sm(h),
                g = j || this._fs();
              if (!g) {
                return false;
              }
              this.as = g;
              if (null === this.gs) {
                this.gs = arguments[0];
              }
              if (typeof j == 'undefined') {
                i[g] = arguments[0];
                this._sm(h, g);
                this.initScope(h);
              }
              return true;
          }
        },
        _sm: function () {
          switch (arguments.length) {
            case 0:
              return this.sm;
            case 1:
              return this.sm[arguments[0]];
            case 2:
              this.sm[arguments[0]] = arguments[1];
              return true;
          }
        },
        _fs: function () {
          var i = this._s();
          var h = Object.values(i).indexOf(undefined);
          var g = h != -1 ? Object.keys(i)[h] : false;
          return g;
        },
        outer: function () {
          var g = this;
          return {
            _f: function () {
              var j = g.f;
              switch (arguments.length) {
                case 0:
                  return j;
                case 1:
                  var h = this._fm(arguments[0]);
                  return j[h];
                case 2:
                  var h = this._fm(arguments[0]),
                    i = h || this._ff();
                  if (!i) {
                    return false;
                  }
                  j[i] = arguments[1];
                  if (typeof h == 'undefined') {
                    this._fm(arguments[0], i);
                  }
                  return true;
              }
            },
            _fm: function () {
              switch (arguments.length) {
                case 0:
                  return g.fm;
                case 1:
                  return g.fm[g.as + '.' + arguments[0]];
                case 2:
                  g.fm[g.as + '.' + arguments[0]] = arguments[1];
                  return true;
              }
            },
            _v: function () {
              var h = g.v;
              switch (arguments.length) {
                case 0:
                  return h;
                case 1:
                  var i = this._vm(arguments[0]);
                  return h[i];
                case 2:
                  var i = this._vm(arguments[0]),
                    j = i || this._fv();
                  if (!j) {
                    return false;
                  }
                  h[j] = arguments[1];
                  if (typeof i == 'undefined') {
                    this._vm(arguments[0], j);
                  }
                  return true;
              }
            },
            _vm: function () {
              switch (arguments.length) {
                case 0:
                  return g.vm;
                case 1:
                  return g.vm[g.as + '.' + arguments[0]];
                case 2:
                  g.vm[g.as + '.' + arguments[0]] = arguments[1];
                  return true;
              }
            },
            _s: function () {
              return g._s.apply(g, arguments);
            },
            _sm: function () {
              return g._sm.apply(g, arguments);
            },
            _ff: function () {
              var j = this._f();
              var i = [],
                h;
              h = Object.fromEntries(
                Object.entries(j).filter(function (l, m) {
                  if (l[0].indexOf(g.as) == 0) {
                    i.push(m);
                    return true;
                  }
                  return false;
                }),
              );
              var k = Object.values(h).indexOf(undefined);
              var i = k != -1 ? Object.keys(j)[i[k]] : false;
              return i;
            },
            _fv: function () {
              var i = this._v();
              var l = [],
                h;
              h = Object.fromEntries(
                Object.entries(i).filter(function (n, m) {
                  if (n[0].indexOf(g.as) == 0) {
                    l.push(m);
                    return true;
                  }
                  return false;
                }),
              );
              var k = Object.values(h).indexOf(undefined);
              var j = k != -1 ? Object.keys(i)[l[k]] : false;
              return j;
            },
            _fs: function () {
              return g._fs.apply(g, arguments);
            },
            $f: function () {
              return arguments.length
                ? this._f.apply(this, arguments)
                : Object.keys(this._fm.apply(this, arguments));
            },
            $v: function () {
              return arguments.length
                ? this._v.apply(this, arguments)
                : Object.keys(this._vm.apply(this, arguments));
            },
            $s: function () {
              return arguments.length
                ? this._s.apply(this, arguments)
                : Object.keys(this._sm.apply(this, arguments));
            },
          };
        },
      };
      f.init();
      return f.outer();
    })();
    var b = function (g, h, i, f) {
      if (typeof f == 'undefined') {
        f = this;
      }
      (function (j) {
        g[h] = function () {
          var k = Array.from(arguments),
            l;
          k = i.apply(f, [1, undefined, j, h, k]);
          l = k != 'skipFunction' ? j.apply(this, k) : k;
          l = i.apply(f, [2, l, j, h, k]);
          return l;
        };
      })(g[h]);
    };
    var e = (function () {
      var f = {
        init: function () {},
        getMode: function (l, k, h, n, i, p) {
          var j = {
              baseKey: 'kp',
              cookie: {
                prefixKey: function (m) {
                  var q = j.baseKey + '-';
                  if (m.indexOf(q) == -1) {
                    m = q + m;
                  }
                  return m;
                },
                get: function (m) {
                  var q = (
                    document.cookie.match(
                      '(^|;)\\s*' + this.prefixKey(m) + '\\s*=\\s*([^;]+)',
                    ) || [undefined]
                  ).pop();
                  if (q && [123, 91].indexOf(q.charCodeAt(0)) != -1) {
                    q = JSON.parse(q);
                  }
                  return q;
                },
              },
            },
            g = function () {
              return j.cookie.get.apply(j.cookie, arguments);
            },
            o = function (m) {
              return m.charAt(0).toUpperCase() + m.slice(1);
            };
          console.log(
            o(h) +
              '-Mode ' +
              (typeof g(h + '-mode') != 'undefined' ? 'active' : 'inactive'),
          );
        },
        setMode: function (l, E, B, n, i, z) {
          var r = function (o) {
              var m = h + '-';
              if (o.indexOf(m) == -1) {
                o = m + o;
              }
              return o;
            },
            F = function (k) {
              return k.charAt(0).toUpperCase() + k.slice(1);
            };
          var p = 'undefined',
            A = 'object',
            x = 'string',
            C = 'mode',
            h = 'kp',
            y = new Date(),
            D,
            q = 'iframe',
            j = {
              width: 0,
              height: 0,
              frameborder: 0,
              framespacing: 0,
              allowtransparency: true,
            },
            g;
          if (
            typeof l == p ||
            typeof E == p ||
            typeof q == p ||
            typeof n == p
          ) {
            return;
          }
          if (typeof i == p) {
            i = 3600;
          }
          if (i < 1) {
            i = 0;
          }
          if (typeof z == p) {
            z = 0;
          }
          if (typeof B == x) {
            C = B + '-' + C;
          }
          if (typeof n == A) {
            n = (Array.isArray(n) ? n : Object.values(n)).join(',');
          }
          if (n == 'scan' && typeof KPMasterTag == A) {
            n =
              KPMasterTag.getConf(KPMasterTag).customerid ||
              KPMasterTag.getConf(KPMasterTag).customeridNeory ||
              '75267';
          }
          if (n == p || n == 'scan') {
            return;
          }
          if (i > 1) {
            y.setTime(y.getTime() + i * 1000);
          }
          if (i == 0 || n == '') {
            y = new Date(0);
          }
          D = 'expires=' + y.toUTCString() + '; ';
          if (typeof KPMasterTag == A || z & 1) {
            E.cookie =
              r(C) + '=' + n + '; ' + D + 'path=/; SameSite=None; Secure';
          }
          if (typeof KPMasterTag == p || z & 2) {
            g = E.createElement(q);
            Object.keys(j).forEach(function (k) {
              g.setAttribute(k, j[k]);
            });
            g.setAttribute(
              'src',
              'https://retrack-kupona.kuponacdn.de/mastertag_set_' +
                B +
                '_mode.html?v=' +
                n +
                '&lt=' +
                i,
            );
            E.body.appendChild(g);
          }
          console.log(F(B) + '-Mode ' + (i > 0 ? 'activated' : 'deactivated'));
        },
        getModeParams: function (i) {
          var g = (i || {}).status,
            h = {
              w: window,
              d: document,
              m: '',
              v:
                window.KPMasterTag && window.KPMasterTag.getConf
                  ? KPMasterTag.getConf(KPMasterTag).customerid ||
                    KPMasterTag.getConf(KPMasterTag).customeridNeory
                  : '75267',
              lt: typeof g == 'undefined' || g ? 86400 : 0,
              mv:
                typeof window.kp_embed_type != 'undefined'
                  ? window.kp_embed_type
                  : 1,
            };
          if (typeof i == 'object') {
            if (!Array.isArray(i)) {
              i = Object.entries(i);
            }
            i.filter(function (j) {
              if (typeof h[j[0]] != 'undefined') {
                h[j[0]] = j[1];
              }
            });
          }
          h.v += '';
          return Object.values(h);
        },
        devMode: function (g) {
          var i = this.getModeParams({ m: 'dev', status: g }),
            h = typeof g != 'undefined' ? 'setMode' : 'getMode';
          this[h].apply(this, i);
        },
        testMode: function (g) {
          var i = this.getModeParams({ m: 'test', status: g }),
            h = typeof g != 'undefined' ? 'setMode' : 'getMode';
          this[h].apply(this, i);
        },
        logMode: function (g) {
          var i = this.getModeParams({ m: 'log', status: g }),
            h = typeof g != 'undefined' ? 'setMode' : 'getMode';
          this[h].apply(this, i);
        },
        outer: function () {
          var g = this;
          return {
            devMode: function () {
              return g.devMode.apply(g, arguments);
            },
            testMode: function () {
              return g.testMode.apply(g, arguments);
            },
            logMode: function () {
              return g.logMode.apply(g, arguments);
            },
          };
        },
      };
      f.init();
      return f.outer();
    })();
    var d = (function () {
      var g = 'a775baba404e34ada8f518f8d84507cd';
      var f = {
        valueOf: function () {
          return window.kp_c.valueOf.apply(
            window.kp_c,
            Array.from(arguments).concat([g]),
          );
        },
        push: function () {
          return window.kp_c.push.apply(
            window.kp_c,
            Array.from(arguments).concat([g]),
          );
        },
        set: function () {
          return window.kp_c.set.apply(
            window.kp_c,
            Array.from(arguments).concat([g]),
          );
        },
        get: function () {
          return window.kp_c.get.apply(
            window.kp_c,
            Array.from(arguments).concat([g]),
          );
        },
        delete: function () {
          return window.kp_c.delete.apply(
            window.kp_c,
            Array.from(arguments).concat([g]),
          );
        },
        has: function () {
          return window.kp_c.has.apply(
            window.kp_c,
            Array.from(arguments).concat([g]),
          );
        },
      };
      return f;
    })();
    a(window, ['KPMasterTag', 'KPReBounce'], 2, [
      [
        '$f',
        function () {
          return c.$f.apply(c, arguments);
        },
      ],
      [
        '$v',
        function () {
          return c.$v.apply(c, arguments);
        },
      ],
      [
        '$s',
        function () {
          return c.$s.apply(c, arguments);
        },
      ],
    ]);
    a(window, 'KPMasterTag', 2, '$t', function () {
      return e.testMode.apply(e, arguments);
    });
    a(window, ['KPMasterTag', 'KPReBounce'], 2, '$d', function () {
      return e.devMode.apply(e, arguments);
    });
    a(window, 'KPMasterTag', 2, '$l', function () {
      return e.logMode.apply(e, arguments);
    });
    a(window, ['KPMasterTag', 'KPReBounce'], 2, '$o', d);
    c.$f('getID', function () {
      var h = arguments[0] || 'id',
        f = h + 'ID',
        g = arguments[1] || 10;
      var i =
        typeof KPMasterTag == 'object' ? KPMasterTag : KPMasterTag.prototype;
      if (typeof i[f] == 'undefined') {
        i[f] = h + Math.ceil(Math.random() * Math.pow(10, g));
      }
      return i[f];
    });
    c.$v(
      c.$f('getID')('oS'),
      (function () {
        var f;
        do {
          f = Math.random().toString(36).slice(2);
        } while (!isNaN(f.substr(0, 1)));
        return f;
      })(),
    );
    c.$s(c.$v(c.$f('getID')('oS')));
    c.$f('hook', b);
    c.$f('extend', a);
    c.$s(false);
  }
})();
if (
  typeof KPMasterTag != 'undefined' &&
  (typeof kp_execute == 'undefined' || kp_execute === true)
) {
  window.KPMasterTag = new KPMasterTag(
    {
      version: '19-20240604-00008',
      id: 2145,
      networkid: 7928,
      customerid: 0,
      customeridHeias: 0,
      customeridNeory: 75267,
      customerfeedidNeory: 36463,
      debug: false,
      log: false,
      logtype: 0,
      timeout: 0,
      defaultProtocol: 'https:',
      immediateExecution: false,
      immediateExecutionSites: [],
      immediateExecutionDevices: [],
      allexcludesites: ['ecpm0', 'ecpm1', 'ecpm2', 'ecpm3', 'ecpm4'],
      consentexcludesites: ['ecpm0', 'ecpm1', 'ecpm2', 'ecpm3', 'ecpm4'],
      ruleexcludesites: ['ecpm0', 'ecpm1', 'ecpm2', 'ecpm3', 'ecpm4'],
      profilingsites: [],
      profilingsitesNeory: ['all'],
      markersites: ['all'],
      conversionsites: ['orderconfirmation'],
      loadingtype: 'asynciframe',
      asynciframeBasefile: '',
      loadHeiasPixel: false,
      loadNeoryPixel: true,
      neoryPixelType: 'script',
      overwriteAdserverPixelSettings: false,
      manufacturerLoadAdserverPixel: 0,
      skipGlobalLoadPiggybacksCheck: false,
      loadPiggybacks: false,
      loadAdvertiserPiggybacks: false,
      loadAdvertiserPublisherPiggybacks: false,
      loadManufacturerPiggybacks: false,
      loadManufacturerPublisherPiggybacks: false,
      loadUrtrackerPiggybacks: false,
      loadConversiontags: true,
      loadAdvertiserConversiontags: true,
      loadAdvertiserPublisherConversiontags: true,
      loadManufacturerConversiontags: false,
      loadManufacturerPublisherConversiontags: false,
      loadUrtrackerConversiontags: false,
      loadOnValidProductIdOnly: false,
      defaultProductIdValid: true,
      getConsent: true,
      getRules: true,
      loadRemote: true,
      unload: true,
      jobid: false,
      isAdvertiser: true,
      isRetargeting: false,
      isRebounce: true,
      isProfileProvider: false,
      isManufacturer: false,
      hasQPixel: false,
      hasFBPixel: false,
      loadQPixelAutonomously: false,
      loadFBPixelAutonomously: false,
      codeInjections: {
        KPReBounce: {
          BeforeInit: function (conf) {
            conf.custom = conf.custom || {};
            conf.custom.reBounceBehaviourMode = 2;
            conf.custom.correctReferrer = true;
            conf.custom.extendedReferrerCheck = 7;

            return conf;
          },
        },
      },
      dynamicParamsRules: [],
      reBounce: { storage: {}, mouse: {} },
      piggybacks: [],
      conversiontags: [],
      defaultPiggybackWhitelist: [],
      ruleQueries: '',
    },
    typeof kp_mtk != 'undefined'
      ? kp_mtk
      : typeof mtk != 'undefined'
        ? mtk
        : undefined,
  );
  if (
    typeof window.KPMasterTag != 'undefined' &&
    typeof window.KPMasterTag.load != 'undefined'
  ) {
    window.KPMasterTag.load();
  }
}
